const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-jpo5857y.js","assets/default-highlight-BMZEMs9f.js","assets/index-D91CPeas.js"])))=>i.map(i=>d[i]);
import{r as e,j as o,D as t,_ as a}from"./index-D91CPeas.js";import{T as n}from"./textAreaField-Bltym3Df.js";import{b as r}from"./buttonsRow-GmLsAxIS.js";import{D as s,d as i}from"./dFormModal-B1f3hIKb.js";import{T as l}from"./tabulatorGridField-hImX61U6.js";import{I as m}from"./inputField-De3tneM5.js";import{F as d}from"./buttonsProps-f9TMAqTb.js";import{T as u,a as p,b as c}from"./tabulatorData-DixKHn5D.js";import{T as b}from"./tabsField-D4xKbncf.js";import{P as f,C as j}from"./pageLayout--M9g9ylJ.js";import{d as F,c as h}from"./darcula-BqMdvqtY.js";import"./baseField-Ck1FIJOr.js";import"./isArray-kfOH8zvo.js";import"./messageBox-qO1-pidw.js";import"./index-CqQxpQkp.js";import"./index-Cs3oLKRx.js";import"./SearchOutlined-Bqgbt2-E.js";import"./modal-DnvV1nEz.js";import"./tabulatorGrid-CUKsGPqY.js";import"./defaultButtonsProps-DmlRWoi3.js";import"./PlusOutlined-DvQ8YCBW.js";import"./index-HMNpXYKt.js";import"./index-BJ5XJaBH.js";const x={},T={formId:"Test form",apiRef:x,confirmChanges:!0,height:500,fieldsProps:{tabs:{component:b,autoHeightResize:!0,onTabDataFetch:(e,o)=>{if("tab2"===e)return new Promise(((e,t)=>{setTimeout((()=>{if(Math.random()<.3)return void t({message:"Random loading data error",code:400});const a=o.getModel().getField("users"),n=i(c);a.updateProps({dataSet:n}),e({data:{users:[{id:"1"}],name:"newName"}})}),2e3)}))},tabs:{tab1:{name:{component:m,label:"Name"},desc:{component:n,label:"Description"}},tab2:{users:{id:"users",component:l,headerLabel:"Users",columnDefaults:i(p),columns:i(u),layout:"fitColumns",selectionMode:!0,autoHeightResize:!0}}}}},width:900,buttons:d(x),onSubmitSuccess:e=>{console.log(e)}},P=()=>{const t=e.useCallback((()=>{x.open("update")}),[]);return o.jsxs(o.Fragment,{children:[o.jsx("h1",{children:"Example of a modal form with tabulator in selection mode with async loading tab"}),o.jsxs("div",{style:{maxWidth:500},children:[o.jsx(r,{onClick:t,children:"Open form"}),o.jsx(s,{...T})]})]})},g=e.lazy((()=>a((()=>import("./index-jpo5857y.js").then((e=>e.dw))),__vite__mapDeps([0,1,2])).then((e=>({default:e.Prism}))))),k=a=>o.jsxs(f,{children:[o.jsx(P,{}),o.jsx(t,{}),o.jsx("div",{children:o.jsx(j,{items:[{key:1,label:"Show source",children:o.jsx(e.Suspense,{fallback:o.jsx("div",{children:"Loading source..."}),children:o.jsx(g,{language:"tsx",style:a.darkMode?F:h,showLineNumbers:!0,children:"\nimport {ITextAreaFieldProps, TextAreaField} from @krinopotam/ui-kit/dForm/fields/textArea\";\nimport React, {useCallback} from 'react';\nimport {Button} from @krinopotam/ui-kit/button';\nimport {DFormModal, IDFormModalApi, IDFormModalProps} from @krinopotam/ui-kit/dFormModal';\nimport {ITabulatorGridFieldProps, TabulatorGridField} from @krinopotam/ui-kit/dForm/fields/tabulatorGrid/tabulatorGridField';\nimport {IInputFieldProps, InputField} from @krinopotam/ui-kit/dForm/fields/input/inputField';\nimport {FormLayoutSwitch} from '../../../common/buttonsProps';\nimport {TabulatorBaseColumns, TabulatorBaseColumnsDef, TabulatorPlainData} from '../../../data/tabulatorData';\nimport {ITabsFieldProps, TabsField} from @krinopotam/ui-kit/dForm/fields/tabs';\nimport {CloneObject} from '@krinopotam/js-helpers/helpersObjects/cloneObject';\nconst formApi = {} as IDFormModalApi;\n/** main modal form props */\nconst formProps: IDFormModalProps = {\n    formId: 'Test form',\n    apiRef: formApi,\n    confirmChanges: true,\n    height: 500,\n    fieldsProps: {\n        tabs: {\n            component: TabsField,\n            autoHeightResize: true,\n            onTabDataFetch: (tabName, field) => {\n                if (tabName !== 'tab2') return;\n                return new Promise((resolve, reject) => {\n                    setTimeout(() => {\n                        if (Math.random() < 0.3) {\n                            reject({message: 'Random loading data error', code: 400});\n                            return\n                        }\n                        const usersField = field.getModel().getField('users');\n                        const dataSet = CloneObject(TabulatorPlainData);\n                        usersField.updateProps({dataSet: dataSet});\n                        resolve({data: {users: [{id: '1'}], name:'newName'}});\n                    }, 2000);\n                });\n            },\n            tabs: {\n                tab1: {\n                    name: {component: InputField, label: 'Name'} as IInputFieldProps,\n                    desc: {component: TextAreaField, label: 'Description'} as ITextAreaFieldProps,\n                },\n                tab2: {\n                    users: {\n                        id: 'users',\n                        component: TabulatorGridField,\n                        headerLabel: 'Users',\n                        columnDefaults: CloneObject(TabulatorBaseColumnsDef),\n                        columns: CloneObject(TabulatorBaseColumns),\n                        layout: 'fitColumns',\n                        selectionMode: true,\n                        autoHeightResize: true,\n                    } as ITabulatorGridFieldProps,\n                },\n            },\n        } as ITabsFieldProps,\n    },\n    width: 900,\n    buttons: FormLayoutSwitch(formApi),\n    onSubmitSuccess: values => {\n        console.log(values);\n    },\n};\nexport const Example = (): React.JSX.Element => {\n    const onClick = useCallback(() => {\n        //formApi.open('update', {dataSet: {users1: CloneObject(TabulatorPlainData)}});\n        formApi.open('update');\n    }, []);\n    return (\n        <>\n            <div style={{maxWidth: 500}}>\n                <Button onClick={onClick}>Open form</Button>\n                <DFormModal {...formProps} />\n            </div>\n        </>\n    );\n};\n"})})}]})})]});export{k as Page1d2eb84dda0a4a8b8fc860b6dea5b610,k as default};
