const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-CiDC3pM_.js","assets/default-highlight-DWmFXoWX.js","assets/index-CUcNIvkO.js"])))=>i.map(i=>d[i]);
import{j as e,D as o,r,_ as t}from"./index-CUcNIvkO.js";import{T as n}from"./tabulatorGrid-Dyo_Hc-_.js";import{I as a}from"./inputField-CwkFLW2j.js";import{N as s}from"./numberField-Bf5YM3x9.js";import{a as i,T as m,b as l}from"./tabulatorData-CGulmLtr.js";import{P as d,C as u}from"./pageLayout-DhfMlgTd.js";import{d as p,c}from"./darcula-BqMdvqtY.js";import"./buttonsRow-COSrEi_L.js";import"./isArray-CFaV0B-6.js";import"./messageBox-B7GILuWH.js";import"./index-Bw4-tvQH.js";import"./dFormModal-C2quglu8.js";import"./modal-DICJlQV5.js";import"./defaultButtonsProps-DBv08e9a.js";import"./PlusOutlined-CnuL6mjI.js";import"./index-DKkyhCR3.js";import"./baseField-Byxe-saX.js";import"./index-BPIiivji.js";import"./SearchOutlined-DmBxBlUt.js";const f={id:"TabulatorGridWithFormAsync",columns:m,columnDefaults:i,editFormProps:{formId:"gridEditForm",layout:"horizontal",fieldsProps:{name:{component:a,label:"Name"},age:{component:s,label:"Age"},col:{component:a,label:"Favourite Color"},dob:{component:a,label:"Day of Birth"}},confirmChanges:!0,onSubmit:e=>new Promise(((o,r)=>{setTimeout((()=>{Math.random()<.5?r({message:"Ошибка сохранения",code:400}):o({data:e})}),2e3)}))},confirmDelete:!0,height:500,layout:"fitColumns",onDataFetch:()=>new Promise(((e,o)=>{setTimeout((()=>{Math.random()<.5?o({message:"Ошибка загрузки данных",code:400}):e({data:l})}),2e3)})),onDelete:e=>new Promise(((e,o)=>{setTimeout((()=>{Math.random()<.3?o({message:"Ошибка удаления строк",code:400}):e({data:!0})}),2e3)}))},j=()=>e.jsxs(e.Fragment,{children:[e.jsx("h1",{children:"Пример простого асинхронного грида Tabulator с формой редактирование"}),e.jsx(n,{...f})]}),b=r.lazy((()=>t((()=>import("./index-CiDC3pM_.js").then((e=>e.dw))),__vite__mapDeps([0,1,2])).then((e=>({default:e.Prism}))))),h=t=>e.jsxs(d,{children:[e.jsx(j,{}),e.jsx(o,{}),e.jsx("div",{children:e.jsx(u,{items:[{key:1,label:"Show source",children:e.jsx(r.Suspense,{fallback:e.jsx("div",{children:"Loading source..."}),children:e.jsx(b,{language:"tsx",style:t.darkMode?p:c,showLineNumbers:!0,children:"\nimport React from 'react';\nimport {IGridProps, TabulatorGrid} from @krinopotam/ui-kit/tabulatorGrid';\nimport {IDFormModalProps} from @krinopotam/ui-kit/dFormModal';\nimport {InputField} from @krinopotam/ui-kit/dForm/fields/input/inputField';\nimport {NumberField} from @krinopotam/ui-kit/dForm/fields/number/numberField';\nimport {TabulatorBaseColumns, TabulatorBaseColumnsDef, TabulatorPlainData} from '../../../data/tabulatorData';\nconst editFormConfig: IDFormModalProps = {\n    formId: 'gridEditForm',\n    layout: 'horizontal',\n    fieldsProps: {\n        name: {component: InputField, label: 'Name'},\n        age: {component: NumberField, label: 'Age'},\n        col: {component: InputField, label: 'Favourite Color'},\n        dob: {component: InputField, label: 'Day of Birth'},\n    },\n    confirmChanges: true,\n    onSubmit: values => {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                if (Math.random() < 0.5) reject({message: 'Ошибка сохранения', code: 400});\n                else resolve({data: values});\n            }, 2000);\n        });\n    },\n};\nconst props: IGridProps = {\n    id: 'TabulatorGridWithFormAsync',\n    columns: TabulatorBaseColumns,\n    columnDefaults: TabulatorBaseColumnsDef,\n    editFormProps: editFormConfig,\n    confirmDelete: true,\n    height: 500,\n    layout: 'fitColumns',\n    onDataFetch: () => {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                const random = Math.random();\n                if (random < 0.5) reject({message: 'Ошибка загрузки данных', code: 400});\n                else resolve({data: TabulatorPlainData});\n            }, 2000);\n        });\n    },\n    onDelete: rows => {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                if (Math.random() < 0.3) reject({message: 'Ошибка удаления строк', code: 400});\n                else resolve({data: true});\n            }, 2000);\n        });\n    },\n};\nexport const AsyncWithForm = (): React.JSX.Element => {\n    return (\n        <>\n            <TabulatorGrid {...props} />\n        </>\n    );\n};\n"})})}]})})]});export{h as Page62a92c04fb3943b3a961c00311fad3d5,h as default};
