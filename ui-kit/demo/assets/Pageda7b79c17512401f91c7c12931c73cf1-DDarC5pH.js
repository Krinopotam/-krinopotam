const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-CMtWWSYb.js","assets/default-highlight-yidbdAYe.js","assets/index-CaUXSDTU.js"])))=>i.map(i=>d[i]);
import{W as e,j as n,S as i,a as o,D as t,r as s,_ as r}from"./index-CaUXSDTU.js";import{D as l}from"./isArray-u16FlN35.js";import{I as d}from"./inputField-WfKVso57.js";import{P as a,C as m}from"./pageLayout-BR9kRyMz.js";import{d as p,c}from"./darcula-BqMdvqtY.js";import"./buttonsRow-fDAEC3Yd.js";import"./messageBox-BR-pjdfa.js";import"./index-B5sgojpR.js";import"./baseField-BCG2VAL1.js";import"./index-BXRrN9D2.js";import"./SearchOutlined-BVyj-FqM.js";const h=()=>{const[t,s]=e.useState(!1),r=f(t);return n.jsxs(n.Fragment,{children:[n.jsx("h1",{children:"An example of a form with fields whose visibility depends on each other"}),n.jsx("p",{children:"While the parent field is empty, dependent fields are hidden"}),n.jsxs("div",{style:{maxWidth:500},children:[n.jsx(i,{style:{marginBottom:30},children:n.jsx(o,{checkedChildren:"Horizontal",unCheckedChildren:"Vertical",onChange:()=>s((e=>!e))})}),n.jsx(l,{...r})]})]})},f=e=>({formId:"Test form",layout:e?"horizontal":"vertical",confirmChanges:!0,fieldsProps:{field1:{component:d,label:"Field 1",placeholder:"While I am empty, other fields are not visible"},field2:{component:d,label:"Field 2 (depends on Field 1)",placeholder:"I can't be seen if Field 1 is empty. Enter something",dependsOn:["field1"]},field3:{component:d,label:"Field 3 (depends on Fields 1 and 2)",placeholder:"I am not visible if fields 1 or 2 are empty",dependsOn:["field1","field2"]}},buttons:{ok:{position:"right"}}}),u=s.lazy((()=>r((()=>import("./index-CMtWWSYb.js").then((e=>e.dw))),__vite__mapDeps([0,1,2])).then((e=>({default:e.Prism}))))),j=e=>n.jsxs(a,{children:[n.jsx(h,{}),n.jsx(t,{}),n.jsx("div",{children:n.jsx(m,{items:[{key:1,label:"Show source",children:n.jsx(s.Suspense,{fallback:n.jsx("div",{children:"Loading source..."}),children:n.jsx(u,{language:"tsx",style:e.darkMode?p:c,showLineNumbers:!0,children:"\nimport React from 'react';\nimport {DForm, IDFormProps} from @krinopotam/ui-kit/dForm';\nimport {InputField} from @krinopotam/ui-kit/dForm/fields/input/inputField';\nimport {Space, Switch} from 'antd';\nexport const Example = (): React.JSX.Element => {\n    const [horizontal, setHorizontal] = React.useState(false);\n    const formProps = useFormProps(horizontal);\n    return (\n        <>\n            <div style={{maxWidth: 500}}>\n                <Space style={{marginBottom: 30}}>\n                    <Switch checkedChildren={'Horizontal'} unCheckedChildren={'Vertical'} onChange={() => setHorizontal(cur => !cur)} />\n                </Space>\n                <DForm {...formProps} />\n            </div>\n        </>\n    );\n};\nconst useFormProps = (horizontal: boolean) => {\n    return {\n        formId: 'Test form',\n        layout: horizontal ? 'horizontal' : 'vertical',\n        confirmChanges: true,\n        fieldsProps: {\n            field1: {component: InputField, label: 'Field 1', placeholder: 'While I am empty, other fields are not visible'},\n            field2: {\n                component: InputField,\n                label: 'Field 2 (depends on Field 1)',\n                placeholder: 'I can't be seen if Field 1 is empty. Enter something',\n                dependsOn: ['field1'],\n            },\n            field3: {\n                component: InputField,\n                label: 'Field 3 (depends on Fields 1 and 2)',\n                placeholder: 'I am not visible if fields 1 or 2 are empty',\n                dependsOn: ['field1', 'field2'],\n            } ,\n        },\n        buttons: {ok: {position: 'right'}},\n    } satisfies IDFormProps;\n};\n"})})}]})})]});export{j as Pageda7b79c17512401f91c7c12931c73cf1,j as default};
