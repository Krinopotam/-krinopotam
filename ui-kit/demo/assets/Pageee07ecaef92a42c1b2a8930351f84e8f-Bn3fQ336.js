const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-BYbtVaI6.js","assets/default-highlight-eiogfuM3.js","assets/index-2kNJvRok.js"])))=>i.map(i=>d[i]);
import{r as e,j as n,D as t,_ as o}from"./index-2kNJvRok.js";import{g as i,d as r}from"./isArray-CSftiXTM.js";import{b as s}from"./buttonsRow-CEp-tPII.js";import{D as l}from"./dFormModal-rOwhCOZx.js";import{I as a}from"./inputField-CWtDZw_-.js";import{D as d}from"./dateTimeField-B-DYBtQK.js";import{P as m}from"./passwordField-KGh2A6jf.js";import{T as p}from"./tabulatorGridField-CUID99e3.js";import{T as u}from"./treeSelectField-JBt7lAaW.js";import{S as c}from"./switchField-MB5aI8Kr.js";import{T as f}from"./tabsField-CKDPGJSz.js";import{I as h}from"./inlineGroupField-BZc1dzjU.js";import{P as _,C as F}from"./pageLayout-CLJSRyFt.js";import{d as b,c as y}from"./darcula-BqMdvqtY.js";import"./messageBox-CT7sYhNV.js";import"./index-DMIBgRp3.js";import"./modal-CogDClGD.js";import"./baseField-qJ3OPc7F.js";import"./index-Di8KV0Ju.js";import"./SearchOutlined-BGxCkjyd.js";import"./useIcons-CKeG0o9V.js";import"./tabulatorGrid-gn39MWkO.js";import"./defaultButtonsProps-DbPTLgBj.js";import"./PlusOutlined-CLLwS-jZ.js";import"./index-p54HjAsh.js";import"./useApiGetGroupsOnly-PC0AYnqb.js";import"./index-DovGOY2m.js";import"./useShowArrow-Du0fXnTV.js";import"./index-BtGSBmVt.js";var g,j={exports:{}};g||(g=1,j.exports=function(e){function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var t=n(e),o="января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),i="январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),r="янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),s="янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_"),l=/D[oD]?(\[[^[\]]*\]|\s)+MMMM?/;function a(e,n,t){var o,i;return"m"===t?n?"минута":"минуту":e+" "+(o=+e,i={mm:n?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[t].split("_"),o%10==1&&o%100!=11?i[0]:o%10>=2&&o%10<=4&&(o%100<10||o%100>=20)?i[1]:i[2])}var d=function(e,n){return l.test(n)?o[e.month()]:i[e.month()]};d.s=i,d.f=o;var m=function(e,n){return l.test(n)?r[e.month()]:s[e.month()]};m.s=s,m.f=r;var p={name:"ru",weekdays:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),weekdaysShort:"вск_пнд_втр_срд_чтв_птн_сбт".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),months:d,monthsShort:m,weekStart:1,yearStart:4,formats:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",m:a,mm:a,h:"час",hh:a,d:"день",dd:a,M:"месяц",MM:a,y:"год",yy:a},ordinal:function(e){return e},meridiem:function(e){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"}};return t.default.locale(p,null,!0),p}(i())),r.locale("ru");const M={id:"1",profess:"Программист",specialty:"profess2",departmentName:"Департамент главных",neverField:"neverData"},k={},w={formId:"TestFormModalConfig",apiRef:k,colorType:"info",title:"Форма редактирования",formMode:"update",validationRules:{profess:[{type:"string",rule:"not-empty",message:"Поле не должно быть пустым"}],specialty:[{type:"string",rule:"not-empty",message:"Поле не должно быть пустым"}],login:[{type:"string",rule:"not-empty",message:"Поле не должно быть пустым"}],name:[{type:"string",rule:"not-empty",message:"Поле не должно быть пустым"}]},layout:"vertical",contentIndent:12,confirmChanges:!0,height:600,maxHeight:500,minHeight:200,width:500,minWidth:200,maxWidth:1e3,onSubmit:()=>new Promise(((e,n)=>{setTimeout((()=>{Math.random()<.5?n({message:"Ошибка сохранения",code:400}):e({data:{result:"OK"}})}),3e3)})),fieldsProps:{tabs:{component:f,tabs:{Tab1:{row1:{component:h,fieldsProps:{profess:{component:a,label:"Профессия",showCount:!0,maxLength:50},specialty:{component:a,label:"Специализация",value:"дефолтная специализация",dependsOn:["profess"]}}},assignDate:{component:d,label:"Дата назначения"},row2:{component:h,fieldsProps:{name:{component:a,label:"Имя пользователя",value:"дефолтное имя пользователя",dependsOn:["profess"]},login:{component:a,label:"Логин",value:"дефолтный логин",dependsOn:["name","specialty"]}}},departments:{component:u,label:"Подразделение",fetchMode:"onUse",noCacheFetchedData:!1,debounce:300,dataSet:[{id:"0-0",title:"Node1",label:"Label из данных",children:[{id:"0-0-1",title:"Child Node1",other:"OK"},{id:"0-0-2",title:"Child Node2",disabled:!0},{id:"0-0-3",title:"Child Node3"}]},{title:"Node2",id:"0-1"}],editFormProps:{formId:"treeViewEditForm",fieldsProps:{title:{component:a,label:"title"}}}}},Tab2:{password:{component:m,label:"Пароль"},isLocked:{component:c,label:"Заблокировано",checkedChildren:"Вкл",unCheckedChildren:"Выкл"}},Tab3:{permissions:{component:p,label:"Полномочия",confirmDelete:!0,height:300,editFormProps:{formId:"grid_edit_form",fieldsProps:{name:{component:a,label:"Имя"},role:{component:a,label:"Роль"}}},columns:[{title:"Name",field:"name"},{title:"Age",field:"age"},{title:"Address",field:"address"}]}}}}}},I=()=>{const t=e.useCallback((()=>{k.open("update",{dataSet:M})}),[]);return n.jsxs(n.Fragment,{children:[n.jsx("h1",{children:"Песочница"}),n.jsx(l,{...w}),n.jsx(s,{type:"primary",onClick:t,children:"Open form"})]})},D=e.lazy((()=>o((()=>import("./index-BYbtVaI6.js").then((e=>e.dw))),__vite__mapDeps([0,1,2])).then((e=>({default:e.Prism}))))),P=o=>n.jsxs(_,{children:[n.jsx(I,{}),n.jsx(t,{}),n.jsx("div",{children:n.jsx(F,{items:[{key:1,label:"Show source",children:n.jsx(e.Suspense,{fallback:n.jsx("div",{children:"Loading source..."}),children:n.jsx(D,{language:"tsx",style:o.darkMode?b:y,showLineNumbers:!0,children:"\nimport 'dayjs/locale/ru';\nimport React, {useCallback} from 'react';\nimport dayjs from 'dayjs';\nimport {Button} from @krinopotam/ui-kit/button';\nimport {IDFormModalApi, DFormModal, IDFormModalProps} from @krinopotam/ui-kit/dFormModal';\nimport {InputField} from @krinopotam/ui-kit/dForm/fields/input/inputField';\nimport {DateTimeField} from @krinopotam/ui-kit/dForm/fields/dateTime/dateTimeField';\nimport {PasswordField} from @krinopotam/ui-kit/dForm/fields/password/passwordField';\nimport {TabulatorGridField} from @krinopotam/ui-kit/dForm/fields/tabulatorGrid/tabulatorGridField';\nimport {TreeSelectField} from @krinopotam/ui-kit/dForm/fields/treeSelect/treeSelectField';\nimport {SwitchField} from @krinopotam/ui-kit/dForm/fields/switch/switchField';\nimport {ITreeSelectNode} from @krinopotam/ui-kit/treeSelect';\nimport {IDFormValidationRules} from @krinopotam/ui-kit/dForm';\nimport {TabsField} from @krinopotam/ui-kit/dForm/fields/tabs/tabsField';\nimport {IInlineGroupFieldProps, InlineGroupField} from @krinopotam/ui-kit/dForm/fields/inlineGroup';\ndayjs.locale('ru');\nconst validationRules: IDFormValidationRules = {\n    //password: [{type: 'string', rule: 'not-empty', message: 'Поле не должно быть пустым'}],\n    profess: [{type: 'string', rule: 'not-empty', message: 'Поле не должно быть пустым'}],\n    specialty: [{type: 'string', rule: 'not-empty', message: 'Поле не должно быть пустым'}],\n    login: [{type: 'string', rule: 'not-empty', message: 'Поле не должно быть пустым'}],\n    name: [{type: 'string', rule: 'not-empty', message: 'Поле не должно быть пустым'}],\n    //departments: [{type: 'object', rule: 'not-empty', message: 'Поле не должно быть пустым'}],\n    //permissions: [{type: 'string', rule: 'not-empty', message: 'Поле не должно быть пустым'}],\n};\nconst formData = {\n    id: '1',\n    profess: 'Программист',\n    specialty: 'profess2',\n    //departments: {value: '0-0-1', label: 'Начальные данные'},\n    //departments: '0-0-1',\n    //departments: '12345',\n    departmentName: 'Департамент главных',\n    neverField: 'neverData',\n};\nconst treeDataSet: ITreeSelectNode[] = [\n    {\n        id: '0-0',\n        title: 'Node1',\n        label: 'Label из данных',\n        children: [\n            {id: '0-0-1', title: 'Child Node1', other: 'OK'},\n            {id: '0-0-2', title: 'Child Node2', disabled: true},\n            {id: '0-0-3', title: 'Child Node3'},\n        ],\n    },\n    {title: 'Node2', id: '0-1'},\n];\nconst formModalApi: IDFormModalApi = {} as IDFormModalApi;\nconst formProps: IDFormModalProps = {\n    formId: 'TestFormModalConfig',\n    apiRef: formModalApi,\n    colorType: 'info',\n    title: 'Форма редактирования',\n    formMode: 'update',\n    validationRules: validationRules,\n    layout: 'vertical',\n    contentIndent: 12,\n    confirmChanges: true,\n    height: 600,\n    maxHeight: 500,\n    minHeight: 200,\n    width: 500,\n    minWidth: 200,\n    maxWidth: 1000,\n    /*onDataFetch: () => {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                if (Math.random() < 0.5) reject({message: 'Ошибка загрузки данных', code: 400});\n                else resolve({data: {profess: 'Загружено Профессия', specialty: 'Загружено специализация'}});\n            }, 3000);\n        });\n    },*/\n    onSubmit: () => {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                if (Math.random() < 0.5) reject({message: 'Ошибка сохранения', code: 400});\n                else resolve({data: {result: 'OK'}});\n            }, 3000);\n        });\n    },\n    fieldsProps: {\n        tabs: {\n            component: TabsField,\n            tabs: {\n                Tab1: {\n                    row1: {\n                        component: InlineGroupField,\n                        fieldsProps: {\n                            profess: {component: InputField, label: 'Профессия', showCount: true, maxLength: 50},\n                            specialty: {component: InputField, label: 'Специализация', value: 'дефолтная специализация', dependsOn: ['profess']},\n                        },\n                    } satisfies IInlineGroupFieldProps,\n                    assignDate: {component: DateTimeField, label: 'Дата назначения'},\n                    row2: {\n                        component: InlineGroupField,\n                        fieldsProps: {\n                            name: {component: InputField, label: 'Имя пользователя', value: 'дефолтное имя пользователя', dependsOn: ['profess']},\n                            login: {component: InputField, label: 'Логин', value: 'дефолтный логин', dependsOn: ['name', 'specialty']},\n                        },\n                    } satisfies IInlineGroupFieldProps,\n                    departments: {\n                        component: TreeSelectField,\n                        label: 'Подразделение',\n                        fetchMode: 'onUse',\n                        noCacheFetchedData: false,\n                        debounce: 300,\n                        // minSearchLength: 1,\n                        // value: {label: 'default value', id: 'id-01'},\n                        // multiple: true,\n                        // treeCheckable: true,\n                        // dataSource: GetApiAppUsersSelect('', {search: '', limit: 0}),\n                        // dataSource: {\n                        //     url: 'http://127.0.0.1:8081/api/do',\n                        //     parameters: {action: 'app/users', method: 'List', data: {limit: 100}},\n                        // },\n                        dataSet: treeDataSet,\n                        editFormProps: {formId: 'treeViewEditForm', fieldsProps: {title: {component: InputField, label: 'title'}}},\n                        // titleRender: (treeNode: IApiJUser) => {\n                        //     return (\n                        //         <>\n                        //             {treeNode.fio}\n                        //             <br /> {treeNode.email}\n                        //         </>\n                        //     );\n                        // },\n                        // labelRender: (treeNode: IApiJUser) => {\n                        //     return (\n                        //         <>\n                        //             {treeNode.fio}\n                        //             <br /> {treeNode.email}\n                        //         </>\n                        //     );\n                        // },\n                        // filterTreeNode: (inputValue, treeNode: IApiJUser) => {\n                        //     return (treeNode.fio + ' ' + treeNode.email).toLowerCase().indexOf(inputValue.toLowerCase()) >= 0;\n                        // }\n                    },\n                },\n                Tab2: {\n                    password: {component: PasswordField, label: 'Пароль'},\n                    isLocked: {component: SwitchField, label: 'Заблокировано', checkedChildren: 'Вкл', unCheckedChildren: 'Выкл'},\n                },\n                Tab3: {\n                    permissions: {\n                        component: TabulatorGridField,\n                        label: 'Полномочия',\n                        confirmDelete: true,\n                        height: 300,\n                        editFormProps: {\n                            formId: 'grid_edit_form',\n                            fieldsProps: {\n                                name: {component: InputField, label: 'Имя'},\n                                role: {component: InputField, label: 'Роль'},\n                            },\n                        },\n                        columns: [\n                            {\n                                title: 'Name',\n                                field: 'name',\n                            },\n                            {\n                                title: 'Age',\n                                field: 'age',\n                            },\n                            {\n                                title: 'Address',\n                                field: 'address',\n                            },\n                        ],\n                    },\n                },\n            },\n        },\n    },\n};\nexport const PlayGround = (): React.JSX.Element => {\n    const showModal = useCallback(() => {\n        formModalApi.open('update', {dataSet: formData});\n    }, []);\n    return (\n        <>\n            <DFormModal {...formProps} />\n            <Button type=\"primary\" onClick={showModal}>\n                Open form\n            </Button>\n        </>\n    );\n};\n"})})}]})})]});export{P as Pageee07ecaef92a42c1b2a8930351f84e8f,P as default};
