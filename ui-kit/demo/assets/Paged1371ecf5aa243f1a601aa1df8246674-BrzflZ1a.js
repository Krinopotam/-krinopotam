const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-BNjet-3W.js","assets/default-highlight-DdW2S8iS.js","assets/index-BYTxC3xS.js"])))=>i.map(i=>d[i]);
import{r as o,j as s,D as r,_ as t}from"./index-BYTxC3xS.js";import{b as e}from"./buttonsRow-JL3h8SZf.js";import{D as n}from"./dFormModal-np82chGo.js";import{I as i}from"./inputField-Bqpci0ar.js";import{P as a}from"./passwordField-DgIz_9Uo.js";import{F as m}from"./buttonsProps-CZkAvbAa.js";import{P as l,C as p}from"./pageLayout-CeU2Cl8T.js";import{d,c as u}from"./darcula-BqMdvqtY.js";import"./isArray-ByIOrY18.js";import"./messageBox-DGOEHkOQ.js";import"./index-CdDoHZh8.js";import"./modal-D3_G00Vo.js";import"./baseField-uHyjuBop.js";import"./index-OmxKuYto.js";import"./SearchOutlined-C5H0yATP.js";const c={},f={formId:"Test form",apiRef:c,confirmChanges:!0,arrowsButtonsSelection:!0,fieldsProps:{login:{component:i,label:"Login",rules:[{type:"string",rule:"not-empty",message:"Необходимо заполнить поле"}]},password:{component:a,label:"Password",rules:[{type:"string",rule:"not-empty",message:"Необходимо заполнить поле"}]}},buttons:m(c)},j=()=>{const r=o.useCallback((()=>{c.open("create")}),[]);return s.jsxs(s.Fragment,{children:[s.jsx("h1",{children:"Example of a simple modal form (vertical layout)"}),s.jsx("p",{children:"By default, a modal form has the ability to drag it by its title and resize it"}),s.jsxs("div",{style:{maxWidth:500},children:[s.jsx(e,{onClick:r,children:"Open form"}),s.jsx(n,{...f})]})]})},F=o.lazy((()=>t((()=>import("./index-BNjet-3W.js").then((o=>o.dw))),__vite__mapDeps([0,1,2])).then((o=>({default:o.Prism}))))),h=t=>s.jsxs(l,{children:[s.jsx(j,{}),s.jsx(r,{}),s.jsx("div",{children:s.jsx(p,{items:[{key:1,label:"Show source",children:s.jsx(o.Suspense,{fallback:s.jsx("div",{children:"Loading source..."}),children:s.jsx(F,{language:"tsx",style:t.darkMode?d:u,showLineNumbers:!0,children:"\nimport React, {useCallback} from 'react';\nimport {Button} from @krinopotam/ui-kit/button';\nimport {DFormModal, IDFormModalApi, IDFormModalProps} from @krinopotam/ui-kit/dFormModal';\nimport {IInputFieldProps, InputField} from @krinopotam/ui-kit/dForm/fields/input/inputField';\nimport {IPasswordFieldProps, PasswordField} from @krinopotam/ui-kit/dForm/fields/password/passwordField';\nimport {FormLayoutSwitch} from '../../common/buttonsProps';\nconst formApi = {} as IDFormModalApi;\nconst formProps: IDFormModalProps = {\n    formId: 'Test form',\n    apiRef: formApi,\n    confirmChanges: true,\n    arrowsButtonsSelection: true,\n    fieldsProps: {\n        login: {component: InputField, label: 'Login', rules: [{type: 'string', rule: 'not-empty', message: 'Необходимо заполнить поле'}]} as IInputFieldProps,\n        password: {\n            component: PasswordField,\n            label: 'Password',\n            rules: [{type: 'string', rule: 'not-empty', message: 'Необходимо заполнить поле'}],\n        } as IPasswordFieldProps,\n    },\n    buttons: FormLayoutSwitch(formApi),\n};\nexport const Validation = (): React.JSX.Element => {\n    const onClick = useCallback(() => {\n        formApi.open('create');\n    }, []);\n    return (\n        <>\n            <div style={{maxWidth: 500}}>\n                <Button onClick={onClick}>Open form</Button>\n                <DFormModal {...formProps} />\n            </div>\n        </>\n    );\n};\n"})})}]})})]});export{h as Paged1371ecf5aa243f1a601aa1df8246674,h as default};
