const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-s3JYYcml.js","assets/default-highlight-CgZf-mKA.js","assets/index-BifVs3yP.js"])))=>i.map(i=>d[i]);
import{j as t,D as o,r as e,_ as r}from"./index-BifVs3yP.js";import{T as a}from"./tabulatorGrid-7axxTASU.js";import{T as i}from"./tabulatorGridField-D8m7C1vv.js";import{a as n,b as s,T as l}from"./tabulatorData-DoNZz2W_.js";import{F as m}from"./buttonsProps--ovsWTNw.js";import{P as d,C as u}from"./pageLayout-CQ75ho6N.js";import{d as p,c as h}from"./darcula-BqMdvqtY.js";import"./buttonsRow-B_xoywMk.js";import"./isArray-DZpirPjN.js";import"./messageBox-2IfVYj0o.js";import"./index-CWHT4hGv.js";import"./dFormModal-_hZTfvWc.js";import"./modal-CZTSSsuL.js";import"./defaultButtonsProps-De9HXyKM.js";import"./PlusOutlined-CQ-Ipige.js";import"./index-DhV2aAoz.js";import"./baseField-BOZdNZcm.js";const b={},f={apiRef:b,confirmChanges:!0,height:400,width:600,fieldsProps:{inputs:{component:i,columnDefaults:n,columns:[{title:"Name",field:"name",headerFilter:!0}],headerFilterHidden:!0,autoHeightResize:!0,height:"100%",layout:"fitColumns",onDataFetch:()=>new Promise(((t,o)=>{setTimeout((()=>{Math.random()<.5?o({message:"Loading error",code:400}):t({data:s})}),2e3)}))}},buttons:m(b)},c={columnDefaults:n,columns:l,dataSet:s,layout:"fitColumns",movableColumns:!0,buttonsSize:"middle",editFormProps:f,height:"100%",buttons:{title:{type:"element",title:t.jsx("b",{style:{fontSize:18},children:"Системы"}),position:"left"}}},j=()=>t.jsxs(t.Fragment,{children:[t.jsx("h1",{children:"An example of an editable TabulatorGrid, on the editing form of which there is another asynchronous TabulatorGrid"}),t.jsx(a,{...c}),";"]}),F=e.lazy((()=>r((()=>import("./index-s3JYYcml.js").then((t=>t.dw))),__vite__mapDeps([0,1,2])).then((t=>({default:t.Prism}))))),P=r=>t.jsxs(d,{children:[t.jsx(j,{}),t.jsx(o,{}),t.jsx("div",{children:t.jsx(u,{items:[{key:1,label:"Show source",children:t.jsx(e.Suspense,{fallback:t.jsx("div",{children:"Loading source..."}),children:t.jsx(F,{language:"tsx",style:r.darkMode?p:h,showLineNumbers:!0,children:"\nimport React from 'react';\nimport {TabulatorGrid} from @krinopotam/ui-kit/tabulatorGrid/tabulatorGrid';\nimport {IGridProps} from @krinopotam/ui-kit/tabulatorGrid/types/tabulatorGridTypes';\nimport {IDFormModalApi, IDFormModalProps} from @krinopotam/ui-kit/dFormModal/types/dFormModalTypes';\nimport {ITabulatorGridFieldProps, TabulatorGridField} from @krinopotam/ui-kit/dForm/fields/tabulatorGrid/tabulatorGridField';\nimport {TabulatorBaseColumns, TabulatorBaseColumnsDef, TabulatorPlainData} from '../../../data/tabulatorData';\nimport {FormLayoutSwitch} from '../../../common/buttonsProps';\nconst editFormApi = {} as IDFormModalApi;\nconst editFormProps: IDFormModalProps = {\n    apiRef: editFormApi,\n    confirmChanges: true,\n    height: 400,\n    width: 600,\n    fieldsProps: {\n        inputs: {\n            component: TabulatorGridField,\n            columnDefaults: TabulatorBaseColumnsDef,\n            columns: [{title: 'Name', field: 'name', headerFilter: true}],\n            headerFilterHidden: true,\n            autoHeightResize: true,\n            height: '100%',\n            layout: 'fitColumns',\n            onDataFetch: () => {\n                return new Promise((resolve, reject) => {\n                    setTimeout(() => {\n                        const random = Math.random();\n                        if (random < 0.5) reject({message: 'Loading error', code: 400});\n                        else resolve({data: TabulatorPlainData});\n                    }, 2000);\n                });\n            },\n        } satisfies ITabulatorGridFieldProps,\n    },\n    buttons: FormLayoutSwitch(editFormApi),\n};\nconst mainGridProps: IGridProps = {\n    columnDefaults: TabulatorBaseColumnsDef,\n    columns: TabulatorBaseColumns,\n    dataSet: TabulatorPlainData,\n    layout: 'fitColumns',\n    movableColumns: true,\n    buttonsSize: 'middle',\n    editFormProps: editFormProps,\n    height: '100%',\n    buttons: {title: {type: 'element', title: <b style={{fontSize: 18}}>Системы</b>, position: 'left'}},\n};\nexport const EditableGridWithAsyncTabulatorGrid = (): React.JSX.Element => {\n    return (\n        <>\n            <TabulatorGrid {...mainGridProps} />;\n        </>\n    );\n};\n"})})}]})})]});export{P as Page7c118ce005c24b17b379f738d034563b,P as default};
