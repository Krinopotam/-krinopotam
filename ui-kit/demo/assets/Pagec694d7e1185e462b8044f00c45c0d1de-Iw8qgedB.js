const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-D0Dzp33a.js","assets/default-highlight-DQXVbr5l.js","assets/index-DEKOHtjL.js"])))=>i.map(i=>d[i]);
import{j as o,D as a,r,_ as s}from"./index-DEKOHtjL.js";import{T as t}from"./tabulatorGrid-ueiQSqlo.js";import{a as e,T as n,b as i}from"./tabulatorData-CxDKwQJ9.js";import{P as l,C as m}from"./pageLayout-BAEqcME3.js";import{d,c as u}from"./darcula-BqMdvqtY.js";import"./buttonsRow-CRmAST--.js";import"./isArray-CilX2EC5.js";import"./messageBox-DiSTOwiN.js";import"./index-B4134D_s.js";import"./dFormModal-CXclmgf1.js";import"./modal-Ddxw_vMx.js";import"./defaultButtonsProps-CTS3EVUl.js";import"./PlusOutlined-DNtPRFLr.js";import"./index-v5l4yKKB.js";const c=()=>{const a={columns:n,columnDefaults:e,height:500,layout:"fitColumns",onDataFetch:o=>(console.log("params",o),new Promise(((o,a)=>{setTimeout((()=>{Math.random()<.5?a({message:"Loading error",code:400}):o({data:i})}),2e3)})))};return o.jsxs(o.Fragment,{children:[o.jsx("h1",{children:"Asynchronous loading of data into the TabulatorGrid"}),o.jsx("p",{style:{color:"red"},children:"To test boot resumption there is a 50/50 chance of error"}),o.jsx(t,{...a})]})},p=r.lazy((()=>s((()=>import("./index-D0Dzp33a.js").then((o=>o.dw))),__vite__mapDeps([0,1,2])).then((o=>({default:o.Prism}))))),j=s=>o.jsxs(l,{children:[o.jsx(c,{}),o.jsx(a,{}),o.jsx("div",{children:o.jsx(m,{items:[{key:1,label:"Show source",children:o.jsx(r.Suspense,{fallback:o.jsx("div",{children:"Loading source..."}),children:o.jsx(p,{language:"tsx",style:s.darkMode?d:u,showLineNumbers:!0,children:"\nimport React from 'react';\nimport {IGridProps, TabulatorGrid} from @krinopotam/ui-kit/tabulatorGrid';\nimport {TabulatorBaseColumns, TabulatorBaseColumnsDef, TabulatorPlainData} from '../../../data/tabulatorData';\nexport const AsyncLoading = (): React.JSX.Element => {\n    const props: IGridProps = {\n        columns: TabulatorBaseColumns,\n        columnDefaults: TabulatorBaseColumnsDef,\n        height: 500,\n        layout: 'fitColumns',\n        onDataFetch: (params) => {\n            console.log('params', params);\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    const random = Math.random();\n                    if (random < 0.5) reject({message: 'Loading error', code: 400});\n                    else resolve({data: TabulatorPlainData});\n                }, 2000);\n            });\n        },\n    };\n    return (\n        <>\n            <TabulatorGrid {...props} />\n        </>\n    );\n};\n"})})}]})})]});export{j as Pagec694d7e1185e462b8044f00c45c0d1de,j as default};
