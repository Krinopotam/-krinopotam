const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-CYtcEg42.js","assets/default-highlight-DmLVT0MV.js","assets/index-7nZFAa1C.js"])))=>i.map(i=>d[i]);
import{r as a,j as t,D as o,_ as e}from"./index-7nZFAa1C.js";import{b as r}from"./buttonsRow-CbJpBlrJ.js";import{T as n}from"./tabulatorGrid-7ZT71B5r.js";import{G as s,a as i}from"./tabulatorData-CNl3ryUI.js";import{P as l,C as m}from"./pageLayout-CvD8cTj-.js";import{d as u,c as d}from"./darcula-BqMdvqtY.js";import"./isArray-Dr27fI6O.js";import"./messageBox-DbI9dXeH.js";import"./index-B4aTtR1L.js";import"./dFormModal-C9vmBgI4.js";import"./modal-VvTCZt36.js";import"./defaultButtonsProps-SW37Xp2d.js";import"./PlusOutlined-DEuRVQuc.js";import"./index-D3HaYG9t.js";const c=[{title:"Column 1",field:"col1"},{title:"Column 2",field:"col2"},{title:"Column 3",field:"col3"}],p=()=>{const[o]=a.useState({}),e=a.useCallback((()=>{o.fetchData((a=>(console.log("params",a),new Promise(((a,t)=>{setTimeout((()=>{Math.random()<.5?t({message:"Loading error",code:400}):a({data:s(100,"async")})}),1e3)})))),{manualParam:"manualValue"})}),[o]),l={apiRef:o,columnDefaults:i,columns:c,height:500};return t.jsxs(t.Fragment,{children:[t.jsx("h1",{children:"Force asynchronous update of the TabulatorGrid dataset"}),t.jsx("p",{style:{color:"red"},children:"To test boot resumption there is a 50/50 chance of error"}),t.jsx(r,{onClick:e,children:"Update dataSet asynchronously via Api.fetchData"}),t.jsx(n,{...l})]})},f=a.lazy((()=>e((()=>import("./index-CYtcEg42.js").then((a=>a.dw))),__vite__mapDeps([0,1,2])).then((a=>({default:a.Prism}))))),h=e=>t.jsxs(l,{children:[t.jsx(p,{}),t.jsx(o,{}),t.jsx("div",{children:t.jsx(m,{items:[{key:1,label:"Show source",children:t.jsx(a.Suspense,{fallback:t.jsx("div",{children:"Loading source..."}),children:t.jsx(f,{language:"tsx",style:e.darkMode?u:d,showLineNumbers:!0,children:"\nimport React, {useCallback, useState} from 'react';\nimport {Button} from @krinopotam/ui-kit/button';\nimport {TabulatorGrid, ITabulatorProps, IGridProps, IGridApi} from @krinopotam/ui-kit/tabulatorGrid';\nimport {GenerateDataSet, TabulatorBaseColumnsDef} from '../../../data/tabulatorData';\nconst columns: ITabulatorProps['columns'] = [\n    {title: 'Column 1', field: 'col1'},\n    {title: 'Column 2', field: 'col2'},\n    {title: 'Column 3', field: 'col3'},\n];\nexport const AsyncManualFetch = (): React.JSX.Element => {\n    const [gridApi] = useState({} as IGridApi);\n    const updateDataViaApiAsync = useCallback(() => {\n        gridApi.fetchData(params => {\n            console.log('params', params);\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    const random = Math.random();\n                    if (random < 0.5) reject({message: 'Loading error', code: 400});\n                    else resolve({data: GenerateDataSet(100, 'async')});\n                }, 1000);\n            });\n        }, {manualParam:'manualValue'});\n    }, [gridApi]);\n    const props: IGridProps = {\n        apiRef: gridApi,\n        columnDefaults: TabulatorBaseColumnsDef,\n        columns: columns,\n        height: 500,\n    };\n    return (\n        <>\n            <Button onClick={updateDataViaApiAsync}>Update dataSet asynchronously via Api.fetchData</Button>\n            <TabulatorGrid {...props} />\n        </>\n    );\n};\n"})})}]})})]});export{h as Page020f100c5a3b4232af909aeaba7cd2aa,h as default};
