const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-jpo5857y.js","assets/default-highlight-BMZEMs9f.js","assets/index-D91CPeas.js"])))=>i.map(i=>d[i]);
import{j as e,D as a,r,_ as t}from"./index-D91CPeas.js";import{T as o}from"./tabulatorGrid-CUKsGPqY.js";import{c as n,D as s}from"./tabulatorData-DixKHn5D.js";import{P as l,C as i}from"./pageLayout--M9g9ylJ.js";import{d as m,c as u}from"./darcula-BqMdvqtY.js";import"./buttonsRow-GmLsAxIS.js";import"./isArray-kfOH8zvo.js";import"./messageBox-qO1-pidw.js";import"./index-CqQxpQkp.js";import"./dFormModal-B1f3hIKb.js";import"./modal-DnvV1nEz.js";import"./defaultButtonsProps-DmlRWoi3.js";import"./PlusOutlined-DvQ8YCBW.js";import"./index-HMNpXYKt.js";const d={resizable:"header",headerFilter:!0,headerFilterFunc:"like"},c=[{title:"ФИО",field:"fio",formatter:e=>{const a=e.getRow().getData();return`<span>${a.surname} ${a.name} ${a.patronymic}</span><br/><small style="color:#808080;">${a.email}</small>`},headerFilterFunc:(e,a,r)=>`${r.surname} ${r.name} ${r.patronymic} (${r.email})`.toLowerCase().indexOf(e.toLowerCase())>=0,sorter:(e,a,r,t)=>{const o=r.getData(),n=t.getData(),s=`${o.surname} ${o.name} ${o.patronymic} (${o.email})`,l=`${n.surname} ${n.name} ${n.patronymic} (${n.email})`;return s===l?0:s>l?1:-1},headerFilter:void 0},{title:"День рождения",field:"birthday",sorter:s,headerFilter:void 0}],f=()=>{const a={id:"TabulatorGridCellFormat",columnDefaults:d,columns:c,dataSet:n,height:500};return e.jsxs(e.Fragment,{children:[e.jsx("h1",{children:"Пример грида Tabulator с настраиваемым отображением ячеек"}),e.jsx("p",{children:"В данном примере в ячейке столбца ФИО отображаются данные из полей surname, name, patronymic и email"}),e.jsx("p",{children:"Фильтр и сортировка производятся по каждому из этих полей"}),e.jsx(o,{...a})]})},h=r.lazy((()=>t((()=>import("./index-jpo5857y.js").then((e=>e.dw))),__vite__mapDeps([0,1,2])).then((e=>({default:e.Prism}))))),p=t=>e.jsxs(l,{children:[e.jsx(f,{}),e.jsx(a,{}),e.jsx("div",{children:e.jsx(i,{items:[{key:1,label:"Show source",children:e.jsx(r.Suspense,{fallback:e.jsx("div",{children:"Loading source..."}),children:e.jsx(h,{language:"tsx",style:t.darkMode?m:u,showLineNumbers:!0,children:"\nimport React from 'react';\nimport {TabulatorGrid, ITabulatorProps, IGridProps} from @krinopotam/ui-kit/tabulatorGrid\";\nimport {DateTimeSorter} from @krinopotam/ui-kit/tabulatorBase/sorters/dateTime\";\nimport {TabulatorNamesPlainData} from \"../../data/tabulatorData\";\nimport {ITabulatorColumn} from @krinopotam/ui-kit/tabulatorBase\";\nconst fioFormatter: ITabulatorColumn['formatter'] = (cell) => {\n    //cell - the cell component\n    //formatterParams - parameters set for the column\n    //onRendered - function to call when the formatter has been rendered\n    const row = cell.getRow();\n    const rowData = row.getData();\n    return `<span>${rowData['surname']} ${rowData['name']} ${rowData['patronymic']}</span><br/><small style=\"color:#808080;\">${rowData['email']}</small>`; //return the contents of the cell;\n};\nconst fioFilter: ITabulatorColumn['headerFilterFunc'] = (headerValue, _rowValue, rowData) => {\n    //headerValue - the value of the header filter element\n    //rowValue - the value of the column in this row\n    //rowData - the data for the row being filtered\n    //filterParams - params object passed to the headerFilterFuncParams property\n    //must return a boolean, true if it passes the filter.\n    const rowString = `${rowData['surname']} ${rowData['name']} ${rowData['patronymic']} (${rowData['email']})`.toLowerCase();\n    return rowString.indexOf(headerValue.toLowerCase()) >= 0;\n};\nconst fioSorter: ITabulatorColumn['sorter'] = (_a, _b, aRow, bRow): number => {\n    //a, b - the two values being compared\n    //aRow, bRow - the row components for the values being compared (useful if you need to access additional fields in the row data for the sort)\n    //column - the column component for the column being sorted\n    //dir - the direction of the sort (\"asc\" or \"desc\")\n    //sorterParams - sorterParams object from column definition array\n    const rowDataA = aRow.getData();\n    const rowDataB = bRow.getData();\n    const valA = `${rowDataA['surname']} ${rowDataA['name']} ${rowDataA['patronymic']} (${rowDataA['email']})`;\n    const valB = `${rowDataB['surname']} ${rowDataB['name']} ${rowDataB['patronymic']} (${rowDataB['email']})`;\n    if (valA === valB) return 0;\n    return valA > valB ? 1 : -1; //you must return the difference between the two values\n};\nconst columnDefaults: ITabulatorProps['columnDefaults'] = {\n    resizable: 'header',\n    headerFilter: true,\n    headerFilterFunc: 'like'\n};\nconst columns: ITabulatorProps['columns'] = [\n    {\n        title: 'ФИО',\n        field: 'fio',\n        formatter: fioFormatter,\n        headerFilterFunc: fioFilter,\n        sorter: fioSorter,\n        headerFilter: undefined\n    },\n    {\n        title: 'День рождения',\n        field: 'birthday',\n        sorter: DateTimeSorter,\n        //sorterParams:{format:'DD.MM.YYYY'} - you can set custom format. Default DD.MM.YYYY\n        headerFilter: undefined\n    },\n];\nexport const CellFormat = (): React.JSX.Element => {\n    const props: IGridProps = {\n        id: 'TabulatorGridCellFormat',\n        columnDefaults: columnDefaults,\n        columns: columns,\n        dataSet: TabulatorNamesPlainData,\n        height: 500,\n    }\n    return (\n        <>\n            <TabulatorGrid {...props}/>\n        </>\n    );\n};\n"})})}]})})]});export{p as Page4922a7d34a1748839bdf5b225d3018ef,p as default};
