const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-CMtWWSYb.js","assets/default-highlight-yidbdAYe.js","assets/index-CaUXSDTU.js"])))=>i.map(i=>d[i]);
import{r as t,j as o,D as e,_ as n}from"./index-CaUXSDTU.js";import{b as i}from"./buttonsRow-fDAEC3Yd.js";import{D as a}from"./dFormModal-zYRzVg05.js";import{T as r}from"./tabulatorGridField-CC13lN6s.js";import{I as l}from"./inputField-WfKVso57.js";import{F as s}from"./buttonsProps-DwUThcdC.js";import{G as m,a as d}from"./tabulatorData-Dat_vwhN.js";import{P as p,C as u}from"./pageLayout-BR9kRyMz.js";import{d as c,c as f}from"./darcula-BqMdvqtY.js";import"./isArray-u16FlN35.js";import"./messageBox-BR-pjdfa.js";import"./index-B5sgojpR.js";import"./modal-BipExRkW.js";import"./baseField-BCG2VAL1.js";import"./tabulatorGrid-D5ykMoqs.js";import"./defaultButtonsProps-CzlMMZ7M.js";import"./PlusOutlined-BZE5dasb.js";import"./index-C4STtPI5.js";import"./index-BXRrN9D2.js";import"./SearchOutlined-BVyj-FqM.js";const b={},h={},F={apiRef:h,formId:"formWithGrid",fieldsProps:{col1:{component:l,label:"Column 1"},col2:{component:l,label:"Column 2"},col3:{component:l,label:"Column 3"}},confirmChanges:!0,buttons:s(h)},j={},D={formId:"Test form",apiRef:b,confirmChanges:!0,height:500,width:"50%",fieldsProps:{grid:{component:r,apiRef:j,label:"Пользователи",columnDefaults:d,columns:[{title:"Column 1",field:"col1"},{title:"Column 2",field:"col2"},{title:"Column 3",field:"col3"}],layout:"fitColumns",autoHeightResize:!0,editFormProps:F,confirmDelete:!0}},buttons:{...s(b),updateDataSet:{type:"button",title:"Update DataSet",position:"center",onClick:()=>{b.model.getField("grid").setValue(m(1e3,"Set field Value "))}},asyncUpdateDataSet:{type:"button",title:"Async update DataSet",position:"center",onClick:()=>{j.fetchData((()=>new Promise(((t,o)=>{setTimeout((()=>{Math.random()<.1?o({message:"Ошибка загрузки данных",code:400}):t({data:m(1e3,"async ")})}),1e3)}))))}},clearDataSet:{type:"button",title:"Clear DataSet",position:"center",onClick:()=>{b.model.getField("grid").setValue([])}}}},g=()=>{const e=t.useCallback((()=>{b.open("update",{dataSet:{grid:m(1e3,"Initial ")}})}),[]);return o.jsxs(o.Fragment,{children:[o.jsx("h1",{children:"Example of a modal form with a TabulatorGrid field"}),o.jsxs("div",{style:{maxWidth:500},children:[o.jsx(i,{onClick:e,children:"Open form"}),o.jsx(a,{...D})]})]})},C=t.lazy((()=>n((()=>import("./index-CMtWWSYb.js").then((t=>t.dw))),__vite__mapDeps([0,1,2])).then((t=>({default:t.Prism}))))),k=n=>o.jsxs(p,{children:[o.jsx(g,{}),o.jsx(e,{}),o.jsx("div",{children:o.jsx(u,{items:[{key:1,label:"Show source",children:o.jsx(t.Suspense,{fallback:o.jsx("div",{children:"Loading source..."}),children:o.jsx(C,{language:"tsx",style:n.darkMode?c:f,showLineNumbers:!0,children:"\nimport React, {useCallback} from 'react';\nimport {Button} from @krinopotam/ui-kit/button';\nimport {DFormModal, IDFormModalApi, IDFormModalProps} from @krinopotam/ui-kit/dFormModal';\nimport {TabulatorGridField} from @krinopotam/ui-kit/dForm/fields/tabulatorGrid';\nimport {InputField} from @krinopotam/ui-kit/dForm/fields/input/inputField';\nimport {FormLayoutSwitch} from '../../common/buttonsProps';\nimport {GenerateDataSet, TabulatorBaseColumnsDef} from '../../data/tabulatorData';\nimport {ITabulatorProps} from @krinopotam/ui-kit/tabulatorBase';\nimport {IGridApi} from @krinopotam/ui-kit/tabulatorGrid\";\nconst columns: ITabulatorProps['columns'] = [\n    {title: 'Column 1', field: 'col1'},\n    {title: 'Column 2', field: 'col2'},\n    {title: 'Column 3', field: 'col3'},\n];\nconst formApi = {} as IDFormModalApi;\nconst editFormApi = {} as IDFormModalApi;\n/** Tabulator edit form props */\nconst editFormProps: IDFormModalProps = {\n    apiRef: editFormApi,\n    formId: 'formWithGrid',\n    fieldsProps: {\n        col1: {component: InputField, label: 'Column 1'},\n        col2: {component: InputField, label: 'Column 2'},\n        col3: {component: InputField, label: 'Column 3'},\n    },\n    confirmChanges: true,\n    buttons: FormLayoutSwitch(editFormApi),\n};\nconst gridApi = {} as IGridApi\n/** main modal form props */\nconst formProps: IDFormModalProps = {\n    formId: 'Test form',\n    apiRef: formApi,\n    confirmChanges: true,\n    height: 500,\n    width: '50%',\n    fieldsProps: {\n        grid: {\n            component: TabulatorGridField,\n            apiRef:gridApi,\n            label: 'Пользователи',\n            columnDefaults: TabulatorBaseColumnsDef,\n            columns: columns,\n            layout: 'fitColumns',\n            autoHeightResize: true,\n            editFormProps: editFormProps,\n            confirmDelete: true,\n        },\n    },\n    buttons: {\n        ...FormLayoutSwitch(formApi),\n        updateDataSet: {\n            type: 'button',\n            title: 'Update DataSet',\n            position: 'center',\n            onClick: () => {\n                const model = formApi.model;\n                const gridField = model.getField('grid');\n                gridField.setValue(GenerateDataSet(1000, 'Set field Value '));\n            },\n        },\n        asyncUpdateDataSet: {\n            type: 'button',\n            title: 'Async update DataSet',\n            position: 'center',\n            onClick: () => {\n                gridApi.fetchData(() => {\n                    return new Promise((resolve, reject) => {\n                        setTimeout(() => {\n                            if (Math.random() < 0.1) reject({message: 'Ошибка загрузки данных', code: 400});\n                            else resolve({data: GenerateDataSet(1000, 'async ')});\n                        }, 1000);\n                    });\n                })\n            },\n        },\n        clearDataSet: {\n            type: 'button',\n            title: 'Clear DataSet',\n            position: 'center',\n            onClick: () => {\n                const model = formApi.model;\n                const gridField = model.getField('grid');\n                gridField.setValue([]);\n            },\n        },\n    },\n};\nexport const FormWithGridChangeDataSet = (): React.JSX.Element => {\n    const onClick = useCallback(() => {\n        formApi.open('update', {dataSet: {grid: GenerateDataSet(1000, 'Initial ')}});\n    }, []);\n    return (\n        <>\n            <div style={{maxWidth: 500}}>\n                <Button onClick={onClick}>Open form</Button>\n                <DFormModal {...formProps} />\n            </div>\n        </>\n    );\n};\n"})})}]})})]});export{k as Page82318b8f884b4b89a995986fcda34745,k as default};
