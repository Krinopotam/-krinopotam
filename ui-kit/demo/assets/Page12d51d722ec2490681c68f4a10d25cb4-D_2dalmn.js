const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-CyWR1QGj.js","assets/default-highlight-DReNbQFQ.js","assets/index-D8v8ynpz.js"])))=>i.map(i=>d[i]);
import{j as e,D as a,r as t,_ as o}from"./index-D8v8ynpz.js";import{T as s}from"./tabulatorGrid-nR2QxnI0.js";import{a as r,G as n}from"./tabulatorData-Bnz4d21q.js";import{P as i,C as l}from"./pageLayout-CP4XPFwB.js";import{d as m,c as d}from"./darcula-BqMdvqtY.js";import"./buttonsRow-4PdtnNz6.js";import"./isArray-BED9qbCT.js";import"./messageBox-B0gUtOZX.js";import"./index-CW9-W7Rk.js";import"./dFormModal-BdurZTse.js";import"./modal-D28EARKj.js";import"./defaultButtonsProps-CET-ft4_.js";import"./PlusOutlined-GlG2akss.js";import"./index-DjofcbMR.js";const c=[{title:"Column 1",field:"col1"},{title:"Column 2",field:"col2"},{title:"Column 3",field:"col3"}],p=n(500,"async"),u=()=>{const a={columnDefaults:r,columns:c,layout:"fitColumns",height:500,progressiveLoad:"scroll",paginationSize:10,progressiveLoadScrollMargin:300,paginationMode:"remote",filterMode:"remote",sortMode:"remote",onDataFetch:(e,a)=>(console.log("params",e),new Promise(((t,o)=>{setTimeout((()=>{const o=(null==e?void 0:e.page)??1,s=(null==e?void 0:e.size)??a.getProps().paginationSize??5,r=Math.ceil(p.length/s),n=p.slice((o-1)*s,o*s);t({data:n,last_page:r})}),1e3)}))),ajaxParams:{extraKey1:"extraValue1",extraKey2:"extraValue2"}};return e.jsxs(e.Fragment,{children:[e.jsx("h1",{children:"Asynchronous progressive loading data to the TabulatorGrid"}),e.jsx(s,{...a})]})},g=t.lazy((()=>o((()=>import("./index-CyWR1QGj.js").then((e=>e.dw))),__vite__mapDeps([0,1,2])).then((e=>({default:e.Prism}))))),j=o=>e.jsxs(i,{children:[e.jsx(u,{}),e.jsx(a,{}),e.jsx("div",{children:e.jsx(l,{items:[{key:1,label:"Show source",children:e.jsx(t.Suspense,{fallback:e.jsx("div",{children:"Loading source..."}),children:e.jsx(g,{language:"tsx",style:o.darkMode?m:d,showLineNumbers:!0,children:"\nimport React from 'react';\nimport {IGridProps, ITabulatorProps, TabulatorGrid} from @krinopotam/ui-kit/tabulatorGrid';\nimport {GenerateDataSet, TabulatorBaseColumnsDef} from '../../../data/tabulatorData';\nconst columns: ITabulatorProps['columns'] = [\n    {title: 'Column 1', field: 'col1'},\n    {title: 'Column 2', field: 'col2'},\n    {title: 'Column 3', field: 'col3'},\n];\nconst dataSet = GenerateDataSet(500, 'async');\nexport const AsyncProgressive = (): React.JSX.Element => {\n    const props: IGridProps = {\n        columnDefaults: TabulatorBaseColumnsDef,\n        columns: columns,\n        layout: 'fitColumns',\n        height: 500,\n        progressiveLoad: 'scroll',\n        paginationSize: 10,\n        progressiveLoadScrollMargin:300,\n        paginationMode: 'remote',\n        filterMode: 'remote',\n        sortMode: 'remote',\n        onDataFetch: (params, gridApi) => {\n            console.log('params', params);\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    const page = params?.page ?? 1;\n                    const size = params?.size ?? gridApi.getProps().paginationSize ?? 5;\n                    const lastPage = Math.ceil(dataSet.length / size);\n                    const slicedDataSet = dataSet.slice((page - 1) * size, page * size); //remote fetch imitation\n                    resolve({data: slicedDataSet, last_page: lastPage});\n                }, 1000);\n            });\n        },\n        ajaxParams: {extraKey1: 'extraValue1', extraKey2: 'extraValue2'}, //any additional params (you can pass a callback)\n    };\n    return (\n        <>\n            <TabulatorGrid {...props} />\n        </>\n    );\n};\n"})})}]})})]});export{j as Page12d51d722ec2490681c68f4a10d25cb4,j as default};
