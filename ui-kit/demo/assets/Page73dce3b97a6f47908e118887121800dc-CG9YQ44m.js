const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-CiDC3pM_.js","assets/default-highlight-DWmFXoWX.js","assets/index-CUcNIvkO.js"])))=>i.map(i=>d[i]);
import{r as a,j as e,D as t,_ as n}from"./index-CUcNIvkO.js";import{b as o}from"./buttonsRow-COSrEi_L.js";import{T as s}from"./tabulatorGrid-Dyo_Hc-_.js";import{G as i,a as r}from"./tabulatorData-CGulmLtr.js";import{P as l,C as m}from"./pageLayout-DhfMlgTd.js";import{d as c,c as d}from"./darcula-BqMdvqtY.js";import"./isArray-CFaV0B-6.js";import"./messageBox-B7GILuWH.js";import"./index-Bw4-tvQH.js";import"./dFormModal-C2quglu8.js";import"./modal-DICJlQV5.js";import"./defaultButtonsProps-DBv08e9a.js";import"./PlusOutlined-CnuL6mjI.js";import"./index-DKkyhCR3.js";const p=[{title:"Column 1",field:"col1"},{title:"Column 2",field:"col2"},{title:"Column 3",field:"col3"}],u=i(1e4,"async"),g=()=>{const[t]=a.useState({}),n=a.useCallback((()=>{t.fetchData((a=>(console.log("params",a),new Promise(((e,n)=>{setTimeout((()=>{Math.random()<.5&&n({message:"Loading error",code:400});const o=(null==a?void 0:a.page)??1,s=(null==a?void 0:a.size)??t.getProps().paginationSize??10,i=Math.ceil(u.length/s),r=u.slice((o-1)*s,o*s);e({data:r,last_page:i})}),1e3)})))),{manualParam:"manualValue"})}),[t]),i={apiRef:t,columnDefaults:r,columns:p,height:500,pagination:!0,paginationSize:10,paginationSizeSelector:[5,10,50,100],paginationCounter:"rows",paginationMode:"remote",filterMode:"remote",sortMode:"remote",onDataFetch:(a,e)=>(console.log("params",a),new Promise(((t,n)=>{setTimeout((()=>{Math.random()<.5&&n({message:"Loading error",code:400});const o=(null==a?void 0:a.page)??1,s=(null==a?void 0:a.size)??e.getProps().paginationSize??10,i=Math.ceil(u.length/s),r=u.slice((o-1)*s,o*s);t({data:r,last_page:i})}),1e3)}))),ajaxParams:{extraKey1:"extraValue1",extraKey2:"extraValue2"}};return e.jsxs(e.Fragment,{children:[e.jsx("h1",{children:"Force asynchronous update of the TabulatorGrid dataset in the page mode"}),e.jsx("p",{style:{color:"red"},children:"To test boot resumption there is a 50/50 chance of error"}),e.jsx(o,{onClick:n,children:"Update dataSet asynchronously via Api.fetchData"}),e.jsx(s,{...i})]})},h=a.lazy((()=>n((()=>import("./index-CiDC3pM_.js").then((a=>a.dw))),__vite__mapDeps([0,1,2])).then((a=>({default:a.Prism}))))),f=n=>e.jsxs(l,{children:[e.jsx(g,{}),e.jsx(t,{}),e.jsx("div",{children:e.jsx(m,{items:[{key:1,label:"Show source",children:e.jsx(a.Suspense,{fallback:e.jsx("div",{children:"Loading source..."}),children:e.jsx(h,{language:"tsx",style:n.darkMode?c:d,showLineNumbers:!0,children:"\nimport React, {useCallback, useState} from 'react';\nimport {Button} from @krinopotam/ui-kit/button';\nimport {TabulatorGrid, ITabulatorProps, IGridProps, IGridApi} from @krinopotam/ui-kit/tabulatorGrid';\nimport {GenerateDataSet, TabulatorBaseColumnsDef} from '../../../data/tabulatorData';\nconst columns: ITabulatorProps['columns'] = [\n    {title: 'Column 1', field: 'col1'},\n    {title: 'Column 2', field: 'col2'},\n    {title: 'Column 3', field: 'col3'},\n];\nconst dataSet = GenerateDataSet(10000, 'async');\nexport const AsyncPagesManualFetch = (): React.JSX.Element => {\n    const [gridApi] = useState({} as IGridApi);\n    const updateDataViaApiAsync = useCallback(() => {\n        gridApi.fetchData(\n            params => {\n                console.log('params', params);\n                return new Promise((resolve, reject) => {\n                    setTimeout(() => {\n                        const random = Math.random();\n                        if (random < 0.5) reject({message: 'Loading error', code: 400});\n                        const page = params?.page ?? 1;\n                        const size = params?.size ?? gridApi.getProps().paginationSize ?? 10;\n                        const lastPage = Math.ceil(dataSet.length / size);\n                        const slicedDataSet = dataSet.slice((page - 1) * size, page * size); //remote fetch imitation\n                        resolve({data: slicedDataSet, last_page: lastPage});\n                    }, 1000);\n                });\n            },\n            {manualParam: 'manualValue'}\n        );\n    }, [gridApi]);\n    const props: IGridProps = {\n        apiRef: gridApi,\n        columnDefaults: TabulatorBaseColumnsDef,\n        columns: columns,\n        height: 500,\n        pagination: true,\n        paginationSize: 10,\n        paginationSizeSelector: [5, 10, 50, 100],\n        paginationCounter: 'rows',\n        paginationMode: 'remote',\n        filterMode: 'remote',\n        sortMode: 'remote',\n        onDataFetch: (params, gridApi) => {\n            console.log('params', params);\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    const random = Math.random();\n                    if (random < 0.5) reject({message: 'Loading error', code: 400});\n                    const page = params?.page ?? 1;\n                    const size = params?.size ?? gridApi.getProps().paginationSize ?? 10;\n                    const lastPage = Math.ceil(dataSet.length / size);\n                    const slicedDataSet = dataSet.slice((page - 1) * size, page * size); //remote fetch imitation\n                    resolve({data: slicedDataSet, last_page: lastPage});\n                }, 1000);\n            });\n        },\n        ajaxParams: {extraKey1: 'extraValue1', extraKey2: 'extraValue2'}, //any additional params (you can pass a callback)\n    };\n    return (\n        <>\n            <Button onClick={updateDataViaApiAsync}>Update dataSet asynchronously via Api.fetchData</Button>\n            <TabulatorGrid {...props} />\n        </>\n    );\n};\n"})})}]})})]});export{f as Page73dce3b97a6f47908e118887121800dc,f as default};
