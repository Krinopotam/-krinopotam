const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-DfeqwvF1.js","assets/default-highlight-DCdxgBnZ.js","assets/index-BB72a6eU.js"])))=>i.map(i=>d[i]);
import{W as e,j as t,S as o,a as n,D as r,r as i,_ as s}from"./index-BB72a6eU.js";import{D as l}from"./isArray-BKTI4CpV.js";import{I as a}from"./inputField-B1hfPwz1.js";import{P as m,C as d}from"./pageLayout-DKLvBL1I.js";import{d as p,c as u}from"./darcula-BqMdvqtY.js";import"./buttonsRow-BoYDsAWL.js";import"./messageBox-6Y5BIsMu.js";import"./index-Dz5OhjVD.js";import"./baseField-BdnhLPgH.js";import"./index-ByzpD6LE.js";import"./SearchOutlined-xF1ruEFb.js";const c=()=>{const[r,i]=e.useState(!1),s=h(r);return t.jsxs("div",{style:{maxWidth:500},children:[t.jsx(o,{style:{marginBottom:30},children:t.jsx(n,{checkedChildren:"Horizontal",unCheckedChildren:"Vertical",onChange:()=>i((e=>!e))})}),t.jsx(l,{...s})]})},h=e=>({formId:"Test form",layout:e?"horizontal":"vertical",confirmChanges:!0,fieldsProps:{field1:{component:a,label:"Field 1",placeholder:"I shouldn't be empty"},field2:{component:a,label:"Field 2",placeholder:"I must be a number"}},validationRules:{field1:[{type:"string",rule:"not-empty",message:"The field must not be empty"}],field2:[{type:"number",rule:"not-empty",message:"Field must be a number"}]},buttons:{ok:{position:"right"}}}),f=i.lazy((()=>s((()=>import("./index-DfeqwvF1.js").then((e=>e.dw))),__vite__mapDeps([0,1,2])).then((e=>({default:e.Prism}))))),b=e=>t.jsxs(m,{children:[t.jsx(c,{}),t.jsx(r,{}),t.jsx("div",{children:t.jsx(d,{items:[{key:1,label:"Show source",children:t.jsx(i.Suspense,{fallback:t.jsx("div",{children:"Loading source..."}),children:t.jsx(f,{language:"tsx",style:e.darkMode?p:u,showLineNumbers:!0,children:"\nimport React from 'react';\nimport {DForm, IDFormProps} from @krinopotam/ui-kit/dForm';\nimport {InputField} from @krinopotam/ui-kit/dForm/fields/input/inputField';\nimport {Space, Switch} from 'antd';\nexport const Example = (): React.JSX.Element => {\n    const [horizontal, setHorizontal] = React.useState(false);\n    const formProps = useFormProps(horizontal);\n    return (\n        <div style={{maxWidth: 500}}>\n            <Space style={{marginBottom: 30}}>\n                <Switch checkedChildren={'Horizontal'} unCheckedChildren={'Vertical'} onChange={() => setHorizontal(cur => !cur)} />\n            </Space>\n            <DForm {...formProps} />\n        </div>\n    );\n};\nconst useFormProps = (horizontal: boolean) => {\n    return {\n        formId: 'Test form',\n        layout: horizontal ? 'horizontal' : 'vertical',\n        confirmChanges: true,\n        fieldsProps: {\n            field1: {component: InputField, label: 'Field 1', placeholder: 'I shouldn't be empty'},\n            field2: {component: InputField, label: 'Field 2', placeholder: 'I must be a number'},\n        },\n        validationRules: {\n            field1: [{type: 'string', rule: 'not-empty', message: 'The field must not be empty'}],\n            field2: [{type: 'number', rule: 'not-empty', message: 'Field must be a number'}],\n        },\n        buttons: {ok: {position: 'right'}},\n    } satisfies IDFormProps;\n};\n"})})}]})})]});export{b as Page4e659631589c487180eef1c14295837e,b as default};
