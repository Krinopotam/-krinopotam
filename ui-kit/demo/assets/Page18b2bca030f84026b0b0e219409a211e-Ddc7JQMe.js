const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-CYtcEg42.js","assets/default-highlight-DmLVT0MV.js","assets/index-7nZFAa1C.js"])))=>i.map(i=>d[i]);
import{j as e,D as a,r as t,_ as r}from"./index-7nZFAa1C.js";import{T as o}from"./tabulatorGrid-7ZT71B5r.js";import{g as n,D as s,a as l}from"./tabulatorData-CNl3ryUI.js";import{P as i,C as m}from"./pageLayout-CvD8cTj-.js";import{d as u,c}from"./darcula-BqMdvqtY.js";import"./buttonsRow-CbJpBlrJ.js";import"./isArray-Dr27fI6O.js";import"./messageBox-DbI9dXeH.js";import"./index-B4aTtR1L.js";import"./dFormModal-C9vmBgI4.js";import"./modal-VvTCZt36.js";import"./defaultButtonsProps-SW37Xp2d.js";import"./PlusOutlined-DEuRVQuc.js";import"./index-D3HaYG9t.js";const d={id:"TabulatorGridTreeCellFormat",columnDefaults:l,columns:[{title:"ФИО",field:"fio",formatter:e=>{const a=e.getRow().getData();return`<span>${a.surname} ${a.name} ${a.patronymic}</span><br/><small style="color:#808080;">${a.email}</small>`},headerFilterFunc:(e,a,t)=>`${t.surname} ${t.name} ${t.patronymic} (${t.email})`.toLowerCase().indexOf(e.toLowerCase())>=0,sorter:(e,a,t,r)=>{const o=t.getData(),n=r.getData(),s=`${o.surname} ${o.name} ${o.patronymic} (${o.email})`,l=`${n.surname} ${n.name} ${n.patronymic} (${n.email})`;return s===l?0:s>l?1:-1}},{title:"День рождения",field:"birthday",sorter:s}],dataSet:n,dataTree:!0,height:500,layout:"fitColumns"},f=()=>e.jsxs(e.Fragment,{children:[e.jsx("h1",{children:"Example of a hierarchical Tabulator grid with customizable cell display"}),e.jsx("p",{children:"In this example, the cell in the full name column displays data from the fields surname, name, patronymic and email"}),e.jsx("p",{children:"Filter and sort are calculated for each of these fields"}),e.jsx(o,{...d})]}),h=t.lazy((()=>r((()=>import("./index-CYtcEg42.js").then((e=>e.dw))),__vite__mapDeps([0,1,2])).then((e=>({default:e.Prism}))))),p=r=>e.jsxs(i,{children:[e.jsx(f,{}),e.jsx(a,{}),e.jsx("div",{children:e.jsx(m,{items:[{key:1,label:"Show source",children:e.jsx(t.Suspense,{fallback:e.jsx("div",{children:"Loading source..."}),children:e.jsx(h,{language:"tsx",style:r.darkMode?u:c,showLineNumbers:!0,children:"\nimport React from 'react';\nimport {ColumnDefinition} from 'tabulator-tables';\nimport {IGridProps, ITabulatorProps, TabulatorGrid} from @krinopotam/ui-kit/tabulatorGrid';\nimport {DateTimeSorter} from @krinopotam/ui-kit/tabulatorBase/sorters/dateTime';\nimport {TabulatorBaseColumnsDef, TabulatorNamesTreeData} from '../../data/tabulatorData';\nconst fioFormatter: ColumnDefinition['formatter'] = cell => {\n    //cell - the cell component\n    //formatterParams - parameters set for the column\n    //onRendered - function to call when the formatter has been rendered\n    const row = cell.getRow();\n    const rowData = row.getData();\n    return `<span>${rowData['surname']} ${rowData['name']} ${rowData['patronymic']}</span><br/><small style=\"color:#808080;\">${rowData['email']}</small>`; //return the contents of the cell;\n};\nconst fioFilter: ColumnDefinition['headerFilterFunc'] = (headerValue, _rowValue, rowData) => {\n    //headerValue - the value of the header filter element\n    //rowValue - the value of the column in this row\n    //rowData - the data for the row being filtered\n    //filterParams - params object passed to the headerFilterFuncParams property\n    //must return a boolean, true if it passes the filter.\n    const rowString = `${rowData['surname']} ${rowData['name']} ${rowData['patronymic']} (${rowData['email']})`.toLowerCase();\n    return rowString.indexOf(headerValue.toLowerCase()) >= 0;\n};\nconst fioSorter: ColumnDefinition['sorter'] = (_a, _b, aRow, bRow): number => {\n    //a, b - the two values being compared\n    //aRow, bRow - the row components for the values being compared (useful if you need to access additional fields in the row data for the sort)\n    //column - the column component for the column being sorted\n    //dir - the direction of the sort (\"asc\" or \"desc\")\n    //sorterParams - sorterParams object from column definition array\n    const rowDataA = aRow.getData();\n    const rowDataB = bRow.getData();\n    const valA = `${rowDataA['surname']} ${rowDataA['name']} ${rowDataA['patronymic']} (${rowDataA['email']})`;\n    const valB = `${rowDataB['surname']} ${rowDataB['name']} ${rowDataB['patronymic']} (${rowDataB['email']})`;\n    if (valA === valB) return 0;\n    return valA > valB ? 1 : -1; //you must return the difference between the two values\n};\nconst columns: ITabulatorProps['columns'] = [\n    {\n        title: 'ФИО',\n        field: 'fio',\n        formatter: fioFormatter,\n        headerFilterFunc: fioFilter,\n        sorter: fioSorter,\n    },\n    {\n        title: 'День рождения',\n        field: 'birthday',\n        sorter: DateTimeSorter,\n    },\n];\nconst props: IGridProps = {\n    id: 'TabulatorGridTreeCellFormat',\n    columnDefaults: TabulatorBaseColumnsDef,\n    columns: columns,\n    dataSet: TabulatorNamesTreeData,\n    dataTree: true,\n    height: 500,\n    layout: 'fitColumns',\n};\nexport const TreeCellFormat = (): React.JSX.Element => {\n    return (\n        <>\n            <TabulatorGrid {...props} />\n        </>\n    );\n};\n"})})}]})})]});export{p as Page18b2bca030f84026b0b0e219409a211e,p as default};
