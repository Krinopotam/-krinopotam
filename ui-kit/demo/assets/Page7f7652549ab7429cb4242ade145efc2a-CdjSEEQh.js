const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-CYtcEg42.js","assets/default-highlight-DmLVT0MV.js","assets/index-7nZFAa1C.js"])))=>i.map(i=>d[i]);
import{r as o,j as e,D as t,_ as n}from"./index-7nZFAa1C.js";import{b as r}from"./buttonsRow-CbJpBlrJ.js";import{d as a,D as i}from"./dFormModal-C9vmBgI4.js";import{T as s}from"./tabulatorGridField-BBxhQgmX.js";import{I as l}from"./inputField-iqxGYRDe.js";import{F as m}from"./buttonsProps-Cy-SoziJ.js";import{b as d,T as p,a as u}from"./tabulatorData-CNl3ryUI.js";import{T as c}from"./tabsField-B1DIgbNY.js";import{P as b,C as f}from"./pageLayout-CvD8cTj-.js";import{d as h,c as F}from"./darcula-BqMdvqtY.js";import"./isArray-Dr27fI6O.js";import"./messageBox-DbI9dXeH.js";import"./index-B4aTtR1L.js";import"./modal-VvTCZt36.js";import"./baseField-DesneoB5.js";import"./tabulatorGrid-7ZT71B5r.js";import"./defaultButtonsProps-SW37Xp2d.js";import"./PlusOutlined-DEuRVQuc.js";import"./index-D3HaYG9t.js";import"./index-C9mENHWZ.js";import"./SearchOutlined-C8H1r-H8.js";import"./index-De60lx6p.js";const j={},D={},P={},C={apiRef:D,formId:"formWithGrid",fieldsProps:{name:{component:l,label:"Name"},age:{component:l,label:"Age"},col:{component:l,label:"Favourite Color"},dob:{component:l,label:"Day of Birth"}},confirmChanges:!0,buttons:m(D)},g={apiRef:P,formId:"formWithGrid",fieldsProps:{name:{component:l,label:"Name"},age:{component:l,label:"Age"},col:{component:l,label:"Favourite Color"},dob:{component:l,label:"Day of Birth"}},confirmChanges:!0,buttons:m(P)},I={formId:"Test form",apiRef:j,confirmChanges:!0,height:300,fieldsProps:{tabs:{component:c,autoHeightResize:!0,tabs:{tab1:{users1:{id:"users1",component:s,headerLabel:"Пользователи 1",columnDefaults:a(u),columns:a(p),layout:"fitColumns",height:300,editFormProps:C,confirmDelete:!0,onDelete:()=>{},autoHeightResize:!0}},tab2:{users2:{id:"users2",component:s,headerLabel:"Пользователи 2",columnDefaults:a(u),columns:a(p),layout:"fitColumns",height:300,editFormProps:g,confirmDelete:!0,onDelete:()=>{},autoHeightResize:!0}}}}},width:900,buttons:m(j)},T=()=>{const t=o.useCallback((()=>{j.open("update",{dataSet:{users1:a(d),users2:a(d)}})}),[]);return e.jsxs(e.Fragment,{children:[e.jsx("h1",{children:"Example of a modal form with a several TabulatorGrid fields in tabs"}),e.jsxs("div",{style:{maxWidth:500},children:[e.jsx(r,{onClick:t,children:"Open form"}),e.jsx(i,{...I})]})]})},x=o.lazy((()=>n((()=>import("./index-CYtcEg42.js").then((o=>o.dw))),__vite__mapDeps([0,1,2])).then((o=>({default:o.Prism}))))),k=n=>e.jsxs(b,{children:[e.jsx(T,{}),e.jsx(t,{}),e.jsx("div",{children:e.jsx(f,{items:[{key:1,label:"Show source",children:e.jsx(o.Suspense,{fallback:e.jsx("div",{children:"Loading source..."}),children:e.jsx(x,{language:"tsx",style:n.darkMode?h:F,showLineNumbers:!0,children:"\nimport React, {useCallback} from 'react';\nimport {Button} from @krinopotam/ui-kit/button';\nimport {DFormModal, IDFormModalApi, IDFormModalProps} from @krinopotam/ui-kit/dFormModal';\nimport {ITabulatorGridFieldProps, TabulatorGridField} from @krinopotam/ui-kit/dForm/fields/tabulatorGrid/tabulatorGridField';\nimport {InputField} from @krinopotam/ui-kit/dForm/fields/input/inputField';\nimport {FormLayoutSwitch} from '../../common/buttonsProps';\nimport {TabulatorBaseColumns, TabulatorBaseColumnsDef, TabulatorPlainData} from '../../data/tabulatorData';\nimport {ITabsFieldProps, TabsField} from @krinopotam/ui-kit/dForm/fields/tabs';\nimport {CloneObject} from \"@krinopotam/js-helpers/helpersObjects/cloneObject\";\nconst formApi = {} as IDFormModalApi;\nconst editFormApi = {} as IDFormModalApi;\nconst editFormApi2 = {} as IDFormModalApi;\n/** Tabulator edit form props */\nconst editFormProps: IDFormModalProps = {\n    apiRef: editFormApi,\n    formId: 'formWithGrid',\n    fieldsProps: {\n        name: {component: InputField, label: 'Name'},\n        age: {component: InputField, label: 'Age'},\n        col: {component: InputField, label: 'Favourite Color'},\n        dob: {component: InputField, label: 'Day of Birth'},\n    },\n    confirmChanges: true,\n    buttons: FormLayoutSwitch(editFormApi),\n};\nconst editFormProps2: IDFormModalProps = {\n    apiRef: editFormApi2,\n    formId: 'formWithGrid',\n    fieldsProps: {\n        name: {component: InputField, label: 'Name'},\n        age: {component: InputField, label: 'Age'},\n        col: {component: InputField, label: 'Favourite Color'},\n        dob: {component: InputField, label: 'Day of Birth'},\n    },\n    confirmChanges: true,\n    buttons: FormLayoutSwitch(editFormApi2),\n};\n/** main modal form props */\nconst formProps: IDFormModalProps = {\n    formId: 'Test form',\n    apiRef: formApi,\n    confirmChanges: true,\n    height:300,\n    fieldsProps: {\n        tabs: {\n            component: TabsField,\n            autoHeightResize:true,\n            tabs: {\n                tab1: {\n                    users1: {\n                        id:'users1',\n                        component: TabulatorGridField,\n                        headerLabel: 'Пользователи 1',\n                        columnDefaults:CloneObject(TabulatorBaseColumnsDef),\n                        columns: CloneObject(TabulatorBaseColumns),\n                        layout: 'fitColumns',\n                        height: 300,\n                        editFormProps: editFormProps,\n                        confirmDelete: true,\n                        onDelete: () => {},\n                        autoHeightResize:true,\n                    } as ITabulatorGridFieldProps,\n                },\n                tab2: {\n                    users2: {\n                        id:'users2',\n                        component: TabulatorGridField,\n                        headerLabel: 'Пользователи 2',\n                        columnDefaults:CloneObject(TabulatorBaseColumnsDef),\n                        columns: CloneObject(TabulatorBaseColumns),\n                        layout: 'fitColumns',\n                        height: 300,\n                        editFormProps: editFormProps2,\n                        confirmDelete: true,\n                        onDelete: () => {},\n                        autoHeightResize:true,\n                    } as ITabulatorGridFieldProps,\n                },\n            },\n        } as ITabsFieldProps,\n    },\n    width: 900,\n    buttons: FormLayoutSwitch(formApi),\n};\nexport const FormWithGridInTabs = (): React.JSX.Element => {\n    const onClick = useCallback(() => {\n        formApi.open('update', {dataSet: {users1: CloneObject(TabulatorPlainData), users2: CloneObject(TabulatorPlainData)}});\n    }, []);\n    return (\n        <>\n            <div style={{maxWidth: 500}}>\n                <Button onClick={onClick}>Open form</Button>\n                <DFormModal {...formProps} />\n            </div>\n        </>\n    );\n};\n"})})}]})})]});export{k as Page7f7652549ab7429cb4242ade145efc2a,k as default};
