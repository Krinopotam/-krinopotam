const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-CYtcEg42.js","assets/default-highlight-DmLVT0MV.js","assets/index-7nZFAa1C.js"])))=>i.map(i=>d[i]);
import{r as o,j as r,D as t,_ as n}from"./index-7nZFAa1C.js";import{b as e}from"./buttonsRow-CbJpBlrJ.js";import{D as a}from"./dFormModal-C9vmBgI4.js";import{I as i}from"./inputField-iqxGYRDe.js";import{N as m}from"./numberField-Cost4tnx.js";import{T as s}from"./tabulatorGridField-BBxhQgmX.js";import{T as l,b as d}from"./tabulatorData-CNl3ryUI.js";import{F as p}from"./buttonsProps-Cy-SoziJ.js";import{P as u,C as c}from"./pageLayout-CvD8cTj-.js";import{d as f,c as b}from"./darcula-BqMdvqtY.js";import"./isArray-Dr27fI6O.js";import"./messageBox-DbI9dXeH.js";import"./index-B4aTtR1L.js";import"./modal-VvTCZt36.js";import"./baseField-DesneoB5.js";import"./index-C9mENHWZ.js";import"./SearchOutlined-C8H1r-H8.js";import"./tabulatorGrid-7ZT71B5r.js";import"./defaultButtonsProps-SW37Xp2d.js";import"./PlusOutlined-DEuRVQuc.js";import"./index-D3HaYG9t.js";const F={},h={},j={apiRef:h,formId:"formWithGrid",layout:"horizontal",fieldsProps:{name:{component:i,label:"Name"},age:{component:m,label:"Age"},col:{component:i,label:"Favourite Color"},dob:{component:i,label:"Day of Birth"}},confirmChanges:!0,buttons:p(h)},P={formId:"Test form",apiRef:F,confirmChanges:!0,fieldsProps:{users:{component:s,label:"Пользователи",columns:l,layout:"fitColumns",height:300,editFormProps:j,confirmDelete:!0,onDelete:()=>{},onDataFetch:()=>new Promise(((o,r)=>{setTimeout((()=>{Math.random()<.3?r({message:"Random loading data error",code:400}):o({data:d})}),500)}))}},width:900,buttons:p(F)},x=()=>{const t=o.useCallback((()=>{F.open("update")}),[]);return r.jsxs(r.Fragment,{children:[r.jsx("h1",{children:"Example of a modal form with a async Tabulator grid"}),r.jsxs("div",{style:{maxWidth:500},children:[r.jsx(e,{onClick:t,children:"Open form"}),r.jsx(a,{...P})]})]})},D=o.lazy((()=>n((()=>import("./index-CYtcEg42.js").then((o=>o.dw))),__vite__mapDeps([0,1,2])).then((o=>({default:o.Prism}))))),k=n=>r.jsxs(u,{children:[r.jsx(x,{}),r.jsx(t,{}),r.jsx("div",{children:r.jsx(c,{items:[{key:1,label:"Show source",children:r.jsx(o.Suspense,{fallback:r.jsx("div",{children:"Loading source..."}),children:r.jsx(D,{language:"tsx",style:n.darkMode?f:b,showLineNumbers:!0,children:"\nimport React, {useCallback} from 'react';\nimport {Button} from @krinopotam/ui-kit/button';\nimport {DFormModal, IDFormModalApi, IDFormModalProps} from @krinopotam/ui-kit/dFormModal';\nimport {IGridDataSourcePromise} from @krinopotam/ui-kit/tabulatorGrid';\nimport {InputField} from @krinopotam/ui-kit/dForm/fields/input/inputField\";\nimport {NumberField} from @krinopotam/ui-kit/dForm/fields/number/numberField\";\nimport {ITabulatorGridFieldProps, TabulatorGridField} from @krinopotam/ui-kit/dForm/fields/tabulatorGrid/tabulatorGridField\";\nimport {TabulatorBaseColumns, TabulatorPlainData} from \"../../../data/tabulatorData\";\nimport {FormLayoutSwitch} from \"../../../common/buttonsProps\";\nconst formApi = {} as IDFormModalApi;\nconst editFormApi = {} as IDFormModalApi;\n/** Tabulator edit form props */\nconst editFormProps: IDFormModalProps = {\n    apiRef:editFormApi,\n    formId: 'formWithGrid',\n    layout: 'horizontal',\n    fieldsProps: {\n        name: {component: InputField, label: 'Name'},\n        age: {component: NumberField, label: 'Age'},\n        col: {component: InputField, label: 'Favourite Color'},\n        dob: {component: InputField, label: 'Day of Birth'},\n    },\n    confirmChanges: true,\n    buttons: FormLayoutSwitch(editFormApi),\n};\n/** main modal form props */\nconst formProps: IDFormModalProps = {\n    formId: 'Test form',\n    apiRef: formApi,\n    confirmChanges: true,\n    fieldsProps: {\n        users: {\n            component: TabulatorGridField,\n            label: 'Пользователи',\n            columns: TabulatorBaseColumns,\n            layout: 'fitColumns',\n            height: 300,\n            editFormProps: editFormProps,\n            confirmDelete: true,\n            onDelete: () => {},\n            onDataFetch: () => {\n                return new Promise((resolve, reject) => {\n                    setTimeout(() => {\n                        if (Math.random() < 0.3) reject({message: 'Random loading data error', code: 400});\n                        else resolve({data: TabulatorPlainData}) ;\n                    }, 500);\n                }) as IGridDataSourcePromise;\n            } ,\n        } satisfies ITabulatorGridFieldProps,\n    },\n    width: 900,\n    buttons: FormLayoutSwitch(formApi),\n};\nexport const FormWithAsyncTabulatorGrid = (): React.JSX.Element => {\n    const onClick = useCallback(() => {\n        formApi.open('update');\n    }, []);\n    return (\n        <>\n            <div style={{maxWidth: 500}}>\n                <Button onClick={onClick}>Open form</Button>\n                <DFormModal {...formProps} />\n            </div>\n        </>\n    );\n};\n"})})}]})})]});export{k as Paged25c26c6722a40e685341d99aec092ff,k as default};
