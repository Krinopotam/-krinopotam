import{j as c}from"./extends-CKwpSh1k.js";import{B as y,e as v,D as g}from"./tabulatorGrid-Bh2ozf2p.js";import"./index-DGqZ_Opy.js";import"./dayjs.min-BljPK31Q.js";import{I as n}from"./inputField-D3h6NrDS.js";import"./index-CTjT7uj6.js";import"./helpersObjects-NFjaQN06.js";import"./helpersString-BLksZHLM.js";import"./v4-CQkTLCs1.js";import"./updateModalTheme-ft5i8WYC.js";import"./draggableRender-pz472epS.js";import"./index-BC6X-wEl.js";import"./useToken-DpCeTUe_.js";import"./InfoCircleOutlined-CU1G_igP.js";import"./compact-item-ayXXrr5p.js";import"./index-Boe84S0F.js";import"./assertThisInitialized-C7eLZ5Vw.js";import"./button-LFZW5K-D.js";import"./button-Crg2y5WX.js";import"./index-DEvyy-28.js";import"./ExclamationCircleFilled-DJhyVcaJ.js";import"./context-DoEgZWg9.js";import"./wrapNativeSuper-CxOa5OEc.js";import"./motion-Gs4finkr.js";import"./motion-4S5rSXvC.js";import"./CloseOutlined-CjEpmO_q.js";import"./KeyCode-DNlgD2sM.js";import"./useClosable-ezpuUIzh.js";import"./zoom-uZCgAuxp.js";import"./DownOutlined-D2B1m1ns.js";import"./index-CwWsuzc7.js";import"./buttonsRow-D6o4mJn6.js";import"./Sider-D04GUbHb.js";import"./row-DM0mVdYK.js";import"./roundedArrow-ChNxh3ai.js";import"./colors-Chrt_s-B.js";import"./index-BRV0Se7Z.js";import"./QuestionCircleOutlined-C5RUC8Xy.js";import"./index-CiVP2nX_.js";import"./tabulatorBase-DvC2R1aE.js";import"./client-B7rfcIiV.js";import"./styled-components.browser.esm-p4xx1i8F.js";import"./index-CrjOAKF0.js";import"./index-V5iYYoh6.js";import"./SearchOutlined-BNG-1YbV.js";import"./useIcons-BnJzZTBK.js";import"./datePicker-BSwhcMkG.js";import"./quillEditor-DG2ePWI2.js";import"./_baseIsEqual-C2lxlfj2.js";import"./select-Btc5TWyW.js";import"./iframe-BpeTrK61.js";import"../sb-preview/runtime.js";import"./MenuOutlined-ld3ZYX5f.js";import"./_commonjs-dynamic-modules-TDtrdbi3.js";class b extends y{render(){return c.jsx(v,{field:this})}renderField(){return this.render()}}const t=e=>c.jsx(g,{buttons:null,fieldsProps:{field1:{label:"Field 1",component:n},divider:{...e,component:b},field2:{label:"Field 2",component:n}}}),V=t;try{t.displayName="DividerComponent",t.__docgenInfo={description:"DForm Divider field",displayName:"DividerComponent",props:{value:{defaultValue:null,description:"Divider title",name:"value",required:!1,type:{name:"ReactNode"}},plain:{defaultValue:null,description:"Divider text show as plain style",name:"plain",required:!1,type:{name:"boolean"}},dashed:{defaultValue:null,description:"Whether line is dashed",name:"dashed",required:!1,type:{name:"boolean"}},orientation:{defaultValue:null,description:"The position of a title inside divider",name:"orientation",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"center"'},{value:'"right"'}]}},orientationMargin:{defaultValue:null,description:"The margin-left/right between the title and its closest border, while the orientation must be left or right",name:"orientationMargin",required:!1,type:{name:"string | number"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => DividerField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},inlineGroup:{defaultValue:null,description:"inline group name",name:"inlineGroup",required:!1,type:{name:"string"}},hidden:{defaultValue:null,description:"Whether the field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"Whether the field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"Whether the field default state is readonly",name:"readOnly",required:!1,type:{name:"boolean"}},nonEditable:{defaultValue:null,description:"Whether the field can not be edited (the field will have readOnly state if formMode is 'update')",name:"nonEditable",required:!1,type:{name:"boolean"}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: unknown, prevValue: unknown, field: DividerField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: DividerField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: DividerField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: unknown, error: string, isSubmit: boolean, field: DividerField) => void)"}}}}}catch{}try{dividerComponent.displayName="dividerComponent",dividerComponent.__docgenInfo={description:"DForm Divider field",displayName:"dividerComponent",props:{value:{defaultValue:null,description:"Divider title",name:"value",required:!1,type:{name:"ReactNode"}},plain:{defaultValue:null,description:"Divider text show as plain style",name:"plain",required:!1,type:{name:"boolean"}},dashed:{defaultValue:null,description:"Whether line is dashed",name:"dashed",required:!1,type:{name:"boolean"}},orientation:{defaultValue:null,description:"The position of a title inside divider",name:"orientation",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"center"'},{value:'"right"'}]}},orientationMargin:{defaultValue:null,description:"The margin-left/right between the title and its closest border, while the orientation must be left or right",name:"orientationMargin",required:!1,type:{name:"string | number"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => DividerField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},inlineGroup:{defaultValue:null,description:"inline group name",name:"inlineGroup",required:!1,type:{name:"string"}},hidden:{defaultValue:null,description:"Whether the field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"Whether the field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"Whether the field default state is readonly",name:"readOnly",required:!1,type:{name:"boolean"}},nonEditable:{defaultValue:null,description:"Whether the field can not be edited (the field will have readOnly state if formMode is 'update')",name:"nonEditable",required:!1,type:{name:"boolean"}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: unknown, prevValue: unknown, field: DividerField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: DividerField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: DividerField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: unknown, error: string, isSubmit: boolean, field: DividerField) => void)"}}}}}catch{}const Fe={title:"DForm/Fields/Divider",component:V,tags:["autodocs"],parameters:{docs:{source:{language:"tsx",format:!0,code:`
                    import React from "react";
                    import {DForm} from @krinopotam/ui-kit/dForm";
                    import {InputField} from @krinopotam/ui-kit/dForm/fields/input/inputField";
                    import {DividerField, IDividerFieldProps} from @krinopotam/ui-kit/dForm/fields/divider/dividerField";
                    type IComponent = IDividerFieldProps;
                    /** DForm Divider field */
                    export const DividerComponent = (props: IComponent): React.JSX.Element => <DForm
                        buttons={null}
                        fieldsProps={
                            {
                                field1: {label: 'Field 1', component: InputField},
                                divider: {...props, component: DividerField},
                                field2: {label: 'Field 2', component: InputField} ,
                            }
                        }
                    />
                    export default DividerComponent
                `}}}},i={args:{value:"Divider",plain:!0}},a={args:{value:"Divider",orientation:"left",plain:!0}},l={args:{value:"Divider",orientation:"right",plain:!0}};var d,r,o;i.parameters={...i.parameters,docs:{...(d=i.parameters)==null?void 0:d.docs,source:{originalSource:`{
  args: {
    value: 'Divider',
    plain: true
  }
}`,...(o=(r=i.parameters)==null?void 0:r.docs)==null?void 0:o.source}}};var s,u,p;a.parameters={...a.parameters,docs:{...(s=a.parameters)==null?void 0:s.docs,source:{originalSource:`{
  args: {
    value: 'Divider',
    orientation: 'left',
    plain: true
  }
}`,...(p=(u=a.parameters)==null?void 0:u.docs)==null?void 0:p.source}}};var f,m,h;l.parameters={...l.parameters,docs:{...(f=l.parameters)==null?void 0:f.docs,source:{originalSource:`{
  args: {
    value: 'Divider',
    orientation: 'right',
    plain: true
  }
}`,...(h=(m=l.parameters)==null?void 0:m.docs)==null?void 0:h.source}}};const qe=["WithTitle","TitleLeft","TitleRight"];export{a as TitleLeft,l as TitleRight,i as WithTitle,qe as __namedExportsOrder,Fe as default};
