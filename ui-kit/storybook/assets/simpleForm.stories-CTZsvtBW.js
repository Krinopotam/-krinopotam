import{j as e}from"./extends-BRD_ACZV.js";import{S as g,B as r}from"./button-Iix8LbRU.js";import{I as b}from"./inputField-_pj4E9Sf.js";import{P as y}from"./passwordField-BoeRgRZe.js";import{D as C}from"./dFormModal-BL1iNji6.js";import{r as n}from"./index-uubelm5h.js";import"./compact-item-IaHZmqF4.js";import"./useToken--rxRg63T.js";import"./index-DaxZXI7c.js";import"./assertThisInitialized-C7eLZ5Vw.js";import"./button-DvzT6zDE.js";import"./index-CB3XXCqd.js";import"./dForm-MbnOLRa1.js";import"./dayjs.min-C_f_bfvq.js";import"./isArray-Cl7xn3Rc.js";import"./index-RRW4sUgR.js";import"./index-C9GPWzHg.js";import"./context-CrsU2UZX.js";import"./wrapNativeSuper-CxOa5OEc.js";import"./pickAttrs-Ceb8JkZg.js";import"./useVariants-BCbWTJhT.js";import"./ContextIsolator-DTA0rjn8.js";import"./index-CSZa4169.js";import"./motion-WmxowxVV.js";import"./row-R-nZpFec.js";import"./roundedArrow-Cy_VYcsu.js";import"./zoom-CqB_wpkX.js";import"./colors-g_WWN96I.js";import"./QuestionCircleOutlined-BwsbN9TT.js";import"./ExclamationCircleFilled-rOw3n2gg.js";import"./buttonsRow-B0FOr-SK.js";import"./Sider-CY9JNDYe.js";import"./KeyCode-DNlgD2sM.js";import"./DownOutlined-J6zIsiwY.js";import"./getNanoId-DD8laUaD.js";import"./updateModalTheme-iOjsqUQ8.js";import"./headerRender-ClL5xlLQ.js";import"./index-WZmxnzc0.js";import"./CloseOutlined-xuSWusRf.js";import"./useClosable-DmZ-8Q3E.js";import"./index-D3eZ-H7s.js";import"./InfoCircleOutlined-rgXyzvM4.js";import"./index-0axGYSbf.js";import"./CheckOutlined-ih17Bwkf.js";import"./modal-BqajnxR4.js";import"./useIsDebugMode-_qV3LLe4.js";import"./index-BW1QLlIf.js";import"./EyeOutlined-BMhVa8fk.js";import"./SearchOutlined-D2kGcJ7L.js";import"./splitObject-C6hVKqbV.js";const l=t=>{const[u,i]=n.useState(!1),[p,f]=n.useState(void 0),c={...{fieldsProps:{field1:{component:b,label:"login",tooltip:"Login input"},field2:{component:y,label:"password",tooltip:"Password input"}},colorType:p},...t},a=n.useCallback(h=>{i(!0),f(h)},[]);return e.jsxs(e.Fragment,{children:[e.jsxs(g,{children:[e.jsx(r,{onClick:()=>a(),children:"Open form"}),e.jsx(r,{color:"info",variant:"solid",onClick:()=>a("info"),children:"Open form"}),e.jsx(r,{color:"success",variant:"solid",onClick:()=>a("success"),children:"Open form"}),e.jsx(r,{color:"warning",variant:"solid",onClick:()=>a("warning"),children:"Open form"}),e.jsx(r,{color:"danger",variant:"solid",onClick:()=>a("danger"),children:"Open form"})]}),e.jsx(C,{...c,open:u,onClosed:()=>{i(!1)}})]})},F=l;try{l.displayName="SimpleForm",l.__docgenInfo={description:"Simple Dynamic form example",displayName:"SimpleForm",props:{open:{defaultValue:null,description:"Form open state",name:"open",required:!1,type:{name:"boolean"}},title:{defaultValue:null,description:"Modal title",name:"title",required:!1,type:{name:"ReactNode"}},height:{defaultValue:null,description:"Modal height",name:"height",required:!1,type:{name:"string | number"}},maxHeight:{defaultValue:null,description:"Modal max height",name:"maxHeight",required:!1,type:{name:"string | number"}},minHeight:{defaultValue:null,description:"Modal min height",name:"minHeight",required:!1,type:{name:"string | number"}},width:{defaultValue:null,description:"Modal width",name:"width",required:!1,type:{name:"string | number"}},maxWidth:{defaultValue:null,description:"Modal max width",name:"maxWidth",required:!1,type:{name:"string | number"}},minWidth:{defaultValue:null,description:"Modal min width",name:"minWidth",required:!1,type:{name:"string | number"}},closeFormConfirmMessage:{defaultValue:null,description:"Confirm message before the form closing, if form is dirty",name:"closeFormConfirmMessage",required:!1,type:{name:"ReactNode"}},language:{defaultValue:null,description:"Language",name:"language",required:!1,type:{name:"enum",value:[{value:'"ru"'},{value:'"en"'},{value:'"cn"'}]}},translation:{defaultValue:null,description:"Custom translation",name:"translation",required:!1,type:{name:"(Partial<{ cancelChangesQn: string; viewing: string; creating: string; editing: string; cloning: string; ok: string; cancel: string; yes: string; no: string; confirm: string; fixError: string; confirmChangesQs: string; tryAgainQt: string; error: string; }> & Partial<...>)"}},modalProps:{defaultValue:null,description:"Modal component properties",name:"modalProps",required:!1,type:{name:"IExtendedModalProps"}},onOpen:{defaultValue:null,description:`Fires when the form is opening.
Don't use formApi.getFormProps() because by the time the form is opened, they have not yet had time to update.`,name:"onOpen",required:!1,type:{name:"((formApi: IDFormModalApi, dataSet: IDFormDataSet, formProps: IDFormModalProps<Record<string, any>>, cbControl: CallbackControl) => boolean | void)"}},onOpened:{defaultValue:null,description:"Fires when the form is opened",name:"onOpened",required:!1,type:{name:"((formApi: IDFormModalApi, dataSet: IDFormDataSet, cbControl: CallbackControl) => void)"}},onClosing:{defaultValue:null,description:"Fires when the form is closing",name:"onClosing",required:!1,type:{name:"((formApi: IDFormModalApi, cbControl: CallbackControl) => boolean | void)"}},onClosed:{defaultValue:null,description:"Fires when the form is closed",name:"onClosed",required:!1,type:{name:"((formApi: IDFormModalApi, cbControl: CallbackControl) => void)"}},onCancel:{defaultValue:null,description:"Fires when the form is canceled",name:"onCancel",required:!1,type:{name:"((formApi: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFirstRender:{defaultValue:null,description:"On first render callback",name:"onFirstRender",required:!1,type:{name:"((props: IDFormModalProps<Record<string, any>>) => void | IDFormProps<Record<string, any>>)"}},onFormDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of the form changed",name:"onFormDirtyStateChanged",required:!1,type:{name:"((state: boolean, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormReadOnlyStateChanged:{defaultValue:null,description:"fires when the read only state of the form changed",name:"onFormReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormDisabledStateChanged:{defaultValue:null,description:"fires when the disabled state of the form changed",name:"onFormDisabledStateChanged",required:!1,type:{name:"((state: boolean, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormInit:{defaultValue:null,description:"fires when the form began initialization (renders for the first time)",name:"onFormInit",required:!1,type:{name:"((api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormModelInitialized:{defaultValue:null,description:"fires when the form model has been initialized",name:"onFormModelInitialized",required:!1,type:{name:"((api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormReadyChanged:{defaultValue:null,description:"fires when the form ready status changed (form ready means form is rendered, initialized and all fields data are loaded)",name:"onFormReadyChanged",required:!1,type:{name:"((state: boolean, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormValuesChanged:{defaultValue:null,description:"fires when the form values changed",name:"onFormValuesChanged",required:!1,type:{name:"((fieldName: string, values: Record<string, any>, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormValidated:{defaultValue:null,description:`fires when the form validated
@param values form only values
@param dataSet form dataSet merged with form values
@param errors errors
@param isSubmit a sign that the form is validated upon form submission
@param api form api instance`,name:"onFormValidated",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, errors: Record<string, string>, isSubmit: boolean, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormHasErrors:{defaultValue:null,description:`fires when the form has errors
@param values form only values
@param dataSet form dataSet merged with form values
@param errors errors
@param api form api instance`,name:"onFormHasErrors",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, errors: Record<string, any>, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormHasNoErrors:{defaultValue:null,description:`fires when the form has no errors
@param values form only values
@param dataSet form dataSet merged with form values
@param api form api instance`,name:"onFormHasNoErrors",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onDataFetch:{defaultValue:null,description:"fires when the form trying to fetch data",name:"onDataFetch",required:!1,type:{name:"((api: IDFormModalApi, cbControl: CallbackControl) => IDFormDataSourcePromise)"}},onDataFetchSuccess:{defaultValue:null,description:"fires when the form fetch success",name:"onDataFetchSuccess",required:!1,type:{name:"((result: { data: Record<string, any>; }, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onDataFetchError:{defaultValue:null,description:"fires when the form fetch failed",name:"onDataFetchError",required:!1,type:{name:"((error: IError, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onDataFetchComplete:{defaultValue:null,description:"fires after the completion of fetching the data, regardless of the result",name:"onDataFetchComplete",required:!1,type:{name:"((api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onSubmit:{defaultValue:null,description:`Fires on submitting the form. Can returns Promise, Object, Boolean or Void
@param values form only values
@param dataSet form dataSet merged with form values
@param api form api instance`,name:"onSubmit",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, api: IDFormModalApi, cbControl: CallbackControl) => boolean | void | IDFormSubmitResultPromise | IDFormSubmitResultObject)"}},onSubmitValidation:{defaultValue:null,description:`fires on submit validation
@param values form only values
@param dataSet form dataSet merged with form values
@param errors errors
@param api form api instance`,name:"onSubmitValidation",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, errors: Record<string, string>, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onSubmitSuccess:{defaultValue:null,description:`fires on submit failed          *
@param values form only values
@param dataSet form dataSet merged with form values
@param resultData the data returned by the form submission method (for example, fetch). If the method does not return a data, then resultData = dataSet
@param api form api instance`,name:"onSubmitSuccess",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, resultData: Record<string, any>, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onSubmitError:{defaultValue:null,description:`fires on submit error
@param values form only values
@param dataSet form dataSet merged with form values
@param error error
@param api form api instance`,name:"onSubmitError",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, error: IError, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onSubmitComplete:{defaultValue:null,description:`fires, when the submitting finishes, whether in failure or success.
@param values form only values
@param dataSet form dataSet merged with form values
@param errors errors
@param api form api instance`,name:"onSubmitComplete",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, errors: Record<string, string>, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onDataSetChange:{defaultValue:null,description:"fires, when the form dataSet changed. Unlike onFormValuesChanged, it is triggered only when a new dataSet is set via setFormValues and is not called when the user changes the field values",name:"onDataSetChange",required:!1,type:{name:"((dataSet: IDFormDataSet, api: IDFormModalApi, cbControl: CallbackControl) => IDFormDataSet) | undefined"}},apiRef:{defaultValue:null,description:"A mutable object to merge with these controls api",name:"apiRef",required:!1,type:{name:"unknown"}},formId:{defaultValue:null,description:"Form formId",name:"formId",required:!1,type:{name:"string"}},buttons:{defaultValue:null,description:"Buttons properties",name:"buttons",required:!1,type:{name:"IFormButtons | null"}},className:{defaultValue:null,description:"Form CSS class",name:"className",required:!1,type:{name:"string"}},formStyle:{defaultValue:null,description:"Form style",name:"formStyle",required:!1,type:{name:"CSSProperties"}},containerClassName:{defaultValue:null,description:"Form container class name",name:"containerClassName",required:!1,type:{name:"string"}},containerStyle:{defaultValue:null,description:"Form container style",name:"containerStyle",required:!1,type:{name:"CSSProperties"}},contentIndent:{defaultValue:null,description:"Indent from the beginning of the controls (default 12)",name:"contentIndent",required:!1,type:{name:"number"}},defaultValues:{defaultValue:null,description:`Form default values. Unlike dataSet, defaultValues sets field values in Create form mode.
Has a priority lower than the field's set value`,name:"defaultValues",required:!1,type:{name:"Record<string, any>"}},dataSet:{defaultValue:null,description:"Form data (are not set in Create form mode)",name:"dataSet",required:!1,type:{name:"IDFormDataSet"}},parentDataSet:{defaultValue:null,description:"Parent form data",name:"parentDataSet",required:!1,type:{name:"IDFormDataSet"}},fieldsProps:{defaultValue:null,description:"Fields properties",name:"fieldsProps",required:!1,type:{name:"IDFormFieldsProps<Record<string, any>>"}},colorType:{defaultValue:null,description:"Form color type",name:"colorType",required:!1,type:{name:"enum",value:[{value:'"danger"'},{value:'"default"'},{value:'"primary"'},{value:'"info"'},{value:'"success"'},{value:'"warning"'}]}},labelCol:{defaultValue:null,description:"label column parameters, for example span:'8'",name:"labelCol",required:!1,type:{name:"ColProps"}},wrapperCol:{defaultValue:null,description:"wrapper column parameters, for example span:'16'",name:"wrapperCol",required:!1,type:{name:"ColProps"}},labelAlign:{defaultValue:null,description:"text align of label of all items",name:"labelAlign",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"right"'}]}},layout:{defaultValue:null,description:"Form layout (horizontal or vertical). Vertical is default",name:"layout",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},formMode:{defaultValue:null,description:"Form mode",name:"formMode",required:!1,type:{name:"enum",value:[{value:'"view"'},{value:'"create"'},{value:'"update"'},{value:'"clone"'},{value:'"delete"'}]}},readOnly:{defaultValue:null,description:"The form is read only",name:"readOnly",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"The form is disabled",name:"disabled",required:!1,type:{name:"boolean"}},disableDepended:{defaultValue:null,description:"Automatically disable fields if they depend on fields whose value is not set. Otherwise, such fields will be automatically hidden",name:"disableDepended",required:!1,type:{name:"boolean"}},tabsHeight:{defaultValue:null,description:"Tabs panes height (default 40)",name:"tabsHeight",required:!1,type:{name:"number"}},unfilledForm:{defaultValue:null,description:"No use controls data",name:"unfilledForm",required:!1,type:{name:"boolean"}},validationRules:{defaultValue:null,description:"Validation rules",name:"validationRules",required:!1,type:{name:"IDFormValidationRules"}},confirmChanges:{defaultValue:null,description:"Should the form request confirmation before the form submitting or cancel, if the form data was changed by the user",name:"confirmChanges",required:!1,type:{name:"boolean"}},submitConfirmMessage:{defaultValue:null,description:"Confirm message before the form submitting",name:"submitConfirmMessage",required:!1,type:{name:"ReactNode"}},requiredMark:{defaultValue:null,description:"Required mark style. Can use required mark or optional mark. You can not config to single Form.Item since this is a Form level config",name:"requiredMark",required:!1,type:{name:"RequiredMark"}},arrowsButtonsSelection:{defaultValue:null,description:"allow select buttons using arrows keys",name:"arrowsButtonsSelection",required:!1,type:{name:"boolean"}},assignExtraValues:{defaultValue:null,description:`If specified, additional values will be added to the resulting form data depending on the form mode
@example {create:'isNew', clone?:'clonedFrom', update?:'isUpdating'}`,name:"assignExtraValues",required:!1,type:{name:"{ create?: string; clone?: string; update?: string | undefined; } | undefined"}},fetchOnCreate:{defaultValue:null,description:"If true, the form will fetch data in any form mode, including 'create'",name:"fetchOnCreate",required:!1,type:{name:"boolean"}},_overriddenApi:{defaultValue:null,description:"@private A service property meaning that the form is used in another component that overrides the api part (for example DModalForm)",name:"_overriddenApi",required:!1,type:{name:"{ t?: boolean; model?: boolean; getButtonsApi?: boolean | undefined; validateForm?: boolean | undefined; submitForm?: boolean | undefined; getId?: boolean | undefined; getProps?: boolean | undefined; setProps?: boolean | undefined; updateProps?: boolean | undefined; getIsMounted?: boolean | u..."}}}}}catch{}try{simpleForm.displayName="simpleForm",simpleForm.__docgenInfo={description:"Simple Dynamic form example",displayName:"simpleForm",props:{open:{defaultValue:null,description:"Form open state",name:"open",required:!1,type:{name:"boolean"}},title:{defaultValue:null,description:"Modal title",name:"title",required:!1,type:{name:"ReactNode"}},height:{defaultValue:null,description:"Modal height",name:"height",required:!1,type:{name:"string | number"}},maxHeight:{defaultValue:null,description:"Modal max height",name:"maxHeight",required:!1,type:{name:"string | number"}},minHeight:{defaultValue:null,description:"Modal min height",name:"minHeight",required:!1,type:{name:"string | number"}},width:{defaultValue:null,description:"Modal width",name:"width",required:!1,type:{name:"string | number"}},maxWidth:{defaultValue:null,description:"Modal max width",name:"maxWidth",required:!1,type:{name:"string | number"}},minWidth:{defaultValue:null,description:"Modal min width",name:"minWidth",required:!1,type:{name:"string | number"}},closeFormConfirmMessage:{defaultValue:null,description:"Confirm message before the form closing, if form is dirty",name:"closeFormConfirmMessage",required:!1,type:{name:"ReactNode"}},language:{defaultValue:null,description:"Language",name:"language",required:!1,type:{name:"enum",value:[{value:'"ru"'},{value:'"en"'},{value:'"cn"'}]}},translation:{defaultValue:null,description:"Custom translation",name:"translation",required:!1,type:{name:"(Partial<{ cancelChangesQn: string; viewing: string; creating: string; editing: string; cloning: string; ok: string; cancel: string; yes: string; no: string; confirm: string; fixError: string; confirmChangesQs: string; tryAgainQt: string; error: string; }> & Partial<...>)"}},modalProps:{defaultValue:null,description:"Modal component properties",name:"modalProps",required:!1,type:{name:"IExtendedModalProps"}},onOpen:{defaultValue:null,description:`Fires when the form is opening.
Don't use formApi.getFormProps() because by the time the form is opened, they have not yet had time to update.`,name:"onOpen",required:!1,type:{name:"((formApi: IDFormModalApi, dataSet: IDFormDataSet, formProps: IDFormModalProps<Record<string, any>>, cbControl: CallbackControl) => boolean | void)"}},onOpened:{defaultValue:null,description:"Fires when the form is opened",name:"onOpened",required:!1,type:{name:"((formApi: IDFormModalApi, dataSet: IDFormDataSet, cbControl: CallbackControl) => void)"}},onClosing:{defaultValue:null,description:"Fires when the form is closing",name:"onClosing",required:!1,type:{name:"((formApi: IDFormModalApi, cbControl: CallbackControl) => boolean | void)"}},onClosed:{defaultValue:null,description:"Fires when the form is closed",name:"onClosed",required:!1,type:{name:"((formApi: IDFormModalApi, cbControl: CallbackControl) => void)"}},onCancel:{defaultValue:null,description:"Fires when the form is canceled",name:"onCancel",required:!1,type:{name:"((formApi: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFirstRender:{defaultValue:null,description:"On first render callback",name:"onFirstRender",required:!1,type:{name:"((props: IDFormModalProps<Record<string, any>>) => void | IDFormProps<Record<string, any>>)"}},onFormDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of the form changed",name:"onFormDirtyStateChanged",required:!1,type:{name:"((state: boolean, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormReadOnlyStateChanged:{defaultValue:null,description:"fires when the read only state of the form changed",name:"onFormReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormDisabledStateChanged:{defaultValue:null,description:"fires when the disabled state of the form changed",name:"onFormDisabledStateChanged",required:!1,type:{name:"((state: boolean, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormInit:{defaultValue:null,description:"fires when the form began initialization (renders for the first time)",name:"onFormInit",required:!1,type:{name:"((api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormModelInitialized:{defaultValue:null,description:"fires when the form model has been initialized",name:"onFormModelInitialized",required:!1,type:{name:"((api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormReadyChanged:{defaultValue:null,description:"fires when the form ready status changed (form ready means form is rendered, initialized and all fields data are loaded)",name:"onFormReadyChanged",required:!1,type:{name:"((state: boolean, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormValuesChanged:{defaultValue:null,description:"fires when the form values changed",name:"onFormValuesChanged",required:!1,type:{name:"((fieldName: string, values: Record<string, any>, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormValidated:{defaultValue:null,description:`fires when the form validated
@param values form only values
@param dataSet form dataSet merged with form values
@param errors errors
@param isSubmit a sign that the form is validated upon form submission
@param api form api instance`,name:"onFormValidated",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, errors: Record<string, string>, isSubmit: boolean, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormHasErrors:{defaultValue:null,description:`fires when the form has errors
@param values form only values
@param dataSet form dataSet merged with form values
@param errors errors
@param api form api instance`,name:"onFormHasErrors",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, errors: Record<string, any>, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormHasNoErrors:{defaultValue:null,description:`fires when the form has no errors
@param values form only values
@param dataSet form dataSet merged with form values
@param api form api instance`,name:"onFormHasNoErrors",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onDataFetch:{defaultValue:null,description:"fires when the form trying to fetch data",name:"onDataFetch",required:!1,type:{name:"((api: IDFormModalApi, cbControl: CallbackControl) => IDFormDataSourcePromise)"}},onDataFetchSuccess:{defaultValue:null,description:"fires when the form fetch success",name:"onDataFetchSuccess",required:!1,type:{name:"((result: { data: Record<string, any>; }, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onDataFetchError:{defaultValue:null,description:"fires when the form fetch failed",name:"onDataFetchError",required:!1,type:{name:"((error: IError, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onDataFetchComplete:{defaultValue:null,description:"fires after the completion of fetching the data, regardless of the result",name:"onDataFetchComplete",required:!1,type:{name:"((api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onSubmit:{defaultValue:null,description:`Fires on submitting the form. Can returns Promise, Object, Boolean or Void
@param values form only values
@param dataSet form dataSet merged with form values
@param api form api instance`,name:"onSubmit",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, api: IDFormModalApi, cbControl: CallbackControl) => boolean | void | IDFormSubmitResultPromise | IDFormSubmitResultObject)"}},onSubmitValidation:{defaultValue:null,description:`fires on submit validation
@param values form only values
@param dataSet form dataSet merged with form values
@param errors errors
@param api form api instance`,name:"onSubmitValidation",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, errors: Record<string, string>, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onSubmitSuccess:{defaultValue:null,description:`fires on submit failed          *
@param values form only values
@param dataSet form dataSet merged with form values
@param resultData the data returned by the form submission method (for example, fetch). If the method does not return a data, then resultData = dataSet
@param api form api instance`,name:"onSubmitSuccess",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, resultData: Record<string, any>, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onSubmitError:{defaultValue:null,description:`fires on submit error
@param values form only values
@param dataSet form dataSet merged with form values
@param error error
@param api form api instance`,name:"onSubmitError",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, error: IError, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onSubmitComplete:{defaultValue:null,description:`fires, when the submitting finishes, whether in failure or success.
@param values form only values
@param dataSet form dataSet merged with form values
@param errors errors
@param api form api instance`,name:"onSubmitComplete",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, errors: Record<string, string>, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onDataSetChange:{defaultValue:null,description:"fires, when the form dataSet changed. Unlike onFormValuesChanged, it is triggered only when a new dataSet is set via setFormValues and is not called when the user changes the field values",name:"onDataSetChange",required:!1,type:{name:"((dataSet: IDFormDataSet, api: IDFormModalApi, cbControl: CallbackControl) => IDFormDataSet) | undefined"}},apiRef:{defaultValue:null,description:"A mutable object to merge with these controls api",name:"apiRef",required:!1,type:{name:"unknown"}},formId:{defaultValue:null,description:"Form formId",name:"formId",required:!1,type:{name:"string"}},buttons:{defaultValue:null,description:"Buttons properties",name:"buttons",required:!1,type:{name:"IFormButtons | null"}},className:{defaultValue:null,description:"Form CSS class",name:"className",required:!1,type:{name:"string"}},formStyle:{defaultValue:null,description:"Form style",name:"formStyle",required:!1,type:{name:"CSSProperties"}},containerClassName:{defaultValue:null,description:"Form container class name",name:"containerClassName",required:!1,type:{name:"string"}},containerStyle:{defaultValue:null,description:"Form container style",name:"containerStyle",required:!1,type:{name:"CSSProperties"}},contentIndent:{defaultValue:null,description:"Indent from the beginning of the controls (default 12)",name:"contentIndent",required:!1,type:{name:"number"}},defaultValues:{defaultValue:null,description:`Form default values. Unlike dataSet, defaultValues sets field values in Create form mode.
Has a priority lower than the field's set value`,name:"defaultValues",required:!1,type:{name:"Record<string, any>"}},dataSet:{defaultValue:null,description:"Form data (are not set in Create form mode)",name:"dataSet",required:!1,type:{name:"IDFormDataSet"}},parentDataSet:{defaultValue:null,description:"Parent form data",name:"parentDataSet",required:!1,type:{name:"IDFormDataSet"}},fieldsProps:{defaultValue:null,description:"Fields properties",name:"fieldsProps",required:!1,type:{name:"IDFormFieldsProps<Record<string, any>>"}},colorType:{defaultValue:null,description:"Form color type",name:"colorType",required:!1,type:{name:"enum",value:[{value:'"danger"'},{value:'"default"'},{value:'"primary"'},{value:'"info"'},{value:'"success"'},{value:'"warning"'}]}},labelCol:{defaultValue:null,description:"label column parameters, for example span:'8'",name:"labelCol",required:!1,type:{name:"ColProps"}},wrapperCol:{defaultValue:null,description:"wrapper column parameters, for example span:'16'",name:"wrapperCol",required:!1,type:{name:"ColProps"}},labelAlign:{defaultValue:null,description:"text align of label of all items",name:"labelAlign",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"right"'}]}},layout:{defaultValue:null,description:"Form layout (horizontal or vertical). Vertical is default",name:"layout",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},formMode:{defaultValue:null,description:"Form mode",name:"formMode",required:!1,type:{name:"enum",value:[{value:'"view"'},{value:'"create"'},{value:'"update"'},{value:'"clone"'},{value:'"delete"'}]}},readOnly:{defaultValue:null,description:"The form is read only",name:"readOnly",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"The form is disabled",name:"disabled",required:!1,type:{name:"boolean"}},disableDepended:{defaultValue:null,description:"Automatically disable fields if they depend on fields whose value is not set. Otherwise, such fields will be automatically hidden",name:"disableDepended",required:!1,type:{name:"boolean"}},tabsHeight:{defaultValue:null,description:"Tabs panes height (default 40)",name:"tabsHeight",required:!1,type:{name:"number"}},unfilledForm:{defaultValue:null,description:"No use controls data",name:"unfilledForm",required:!1,type:{name:"boolean"}},validationRules:{defaultValue:null,description:"Validation rules",name:"validationRules",required:!1,type:{name:"IDFormValidationRules"}},confirmChanges:{defaultValue:null,description:"Should the form request confirmation before the form submitting or cancel, if the form data was changed by the user",name:"confirmChanges",required:!1,type:{name:"boolean"}},submitConfirmMessage:{defaultValue:null,description:"Confirm message before the form submitting",name:"submitConfirmMessage",required:!1,type:{name:"ReactNode"}},requiredMark:{defaultValue:null,description:"Required mark style. Can use required mark or optional mark. You can not config to single Form.Item since this is a Form level config",name:"requiredMark",required:!1,type:{name:"RequiredMark"}},arrowsButtonsSelection:{defaultValue:null,description:"allow select buttons using arrows keys",name:"arrowsButtonsSelection",required:!1,type:{name:"boolean"}},assignExtraValues:{defaultValue:null,description:`If specified, additional values will be added to the resulting form data depending on the form mode
@example {create:'isNew', clone?:'clonedFrom', update?:'isUpdating'}`,name:"assignExtraValues",required:!1,type:{name:"{ create?: string; clone?: string; update?: string | undefined; } | undefined"}},fetchOnCreate:{defaultValue:null,description:"If true, the form will fetch data in any form mode, including 'create'",name:"fetchOnCreate",required:!1,type:{name:"boolean"}},_overriddenApi:{defaultValue:null,description:"@private A service property meaning that the form is used in another component that overrides the api part (for example DModalForm)",name:"_overriddenApi",required:!1,type:{name:"{ t?: boolean; model?: boolean; getButtonsApi?: boolean | undefined; validateForm?: boolean | undefined; submitForm?: boolean | undefined; getId?: boolean | undefined; getProps?: boolean | undefined; setProps?: boolean | undefined; updateProps?: boolean | undefined; getIsMounted?: boolean | u..."}}}}}catch{}const ye={title:"DFormModal/Examples/SimpleForm",component:F,tags:["autodocs"],parameters:{docs:{source:{language:"tsx",format:!0,code:`
                    import {Button, IButtonProps} from @krinopotam/ui-kit/button';
                    import {InputField} from @krinopotam/ui-kit/dForm/fields/input/inputField';
                    import {PasswordField} from @krinopotam/ui-kit/dForm/fields/password/passwordField';
                    import {DFormModal, IDFormModalProps} from @krinopotam/ui-kit/dFormModal';
                    import {Space} from 'antd';
                    import React, {useCallback, useState} from 'react';
                    /** Simple Dynamic form example */
                    export const SimpleForm = (props?: IDFormModalProps): React.JSX.Element => {
                        const [open, setOpen] = useState(false);
                        const [colorType, setColorType] = useState<IButtonProps['color'] | undefined>(undefined);
                        const formProps: IDFormModalProps = {
                            fieldsProps: {
                                field1: {component: InputField, label: 'login', tooltip: 'Login input'},
                                field2: {component: PasswordField, label: 'password', tooltip: 'Password input'},
                            },
                            colorType: colorType,
                        };
                        const compProps = {...formProps, ...props};
                        const onClick = useCallback((colorType?: IButtonProps['color']) => {
                            setOpen(true);
                            setColorType(colorType);
                        }, []);
                        return (
                            <>
                                <Space>
                                    <Button onClick={() => onClick()}>Open form</Button>
                                    <Button color="info" variant="solid" onClick={() => onClick('info')}>
                                        Open form
                                    </Button>
                                    <Button color="success" variant="solid" onClick={() => onClick('success')}>
                                        Open form
                                    </Button>
                                    <Button color="warning" variant="solid" onClick={() => onClick('warning')}>
                                        Open form
                                    </Button>
                                    <Button color="danger" variant="solid" onClick={() => onClick('danger')}>
                                        Open form
                                    </Button>
                                </Space>
                                <DFormModal
                                    {...compProps}
                                    open={open}
                                    onClosed={() => {
                                        setOpen(false);
                                    }}
                                />
                            </>
                        );
                    };
                    export default SimpleForm;
                `}}}},o={args:{layout:"horizontal"}};var s,d,m;o.parameters={...o.parameters,docs:{...(s=o.parameters)==null?void 0:s.docs,source:{originalSource:`{
  args: {
    layout: 'horizontal'
  }
}`,...(m=(d=o.parameters)==null?void 0:d.docs)==null?void 0:m.source}}};const Ce=["Playground"];export{o as Playground,Ce as __namedExportsOrder,ye as default};
