import{_ as le,j as G}from"./extends-CKwpSh1k.js";import{B as ne,D as oe}from"./dForm-Bdlc5lHb.js";import"./index-DGqZ_Opy.js";import"./dayjs.min-BljPK31Q.js";import{r as t,R as ie}from"./index-CTjT7uj6.js";import{_ as re,c as E,C as K,D as de,T as se,W as ue,o as ce}from"./compact-item-B2r7eKHn.js";import{F as fe,G as W,H as z,_ as B}from"./useToken-DuQNFAH6.js";import{u as pe}from"./index-56GSrRrr.js";import{u as Q}from"./motion-D1Ok7SUs.js";import{F as me}from"./context-zxaTOXwp.js";import{u as U}from"./index-Dp8He50A.js";import"./helpersObjects-NFjaQN06.js";import"./index-Boe84S0F.js";import"./index-DKKcxpSc.js";import"./useVariants-bMUIY1dl.js";import"./index-BzgAe6ki.js";import"./motion-4S5rSXvC.js";import"./row-Bz4KYDPc.js";import"./roundedArrow-CdZeBiH2.js";import"./zoom-DgLa7ZOz.js";import"./colors-DKxxPweQ.js";import"./QuestionCircleOutlined-DItjCDaI.js";import"./ExclamationCircleFilled-BijZsmvo.js";import"./updateModalTheme-NCQuvMl0.js";import"./modalRender-xcPWCFSc.js";import"./index-C1vctpir.js";import"./InfoCircleOutlined-B2Jjl6_Y.js";import"./button-CQp94r4a.js";import"./button-dqH3xn1c.js";import"./buttonsRow-Cg7t5xF1.js";import"./Sider-C8lbNVsG.js";import"./KeyCode-DNlgD2sM.js";import"./DownOutlined-dRo7eB-m.js";import"./helpersString-BLksZHLM.js";import"./v4-CQkTLCs1.js";import"./index-BRV0Se7Z.js";import"./index-DrMe33ah.js";import"./CloseOutlined-RkEA9oNw.js";import"./useClosable-DReJefU5.js";import"./index-4vYY965U.js";import"./CheckOutlined-ChgTJtAc.js";import"./useIsDebugMode-B-VM_G4X.js";import"./_commonjs-dynamic-modules-TDtrdbi3.js";import"./assertThisInitialized-C7eLZ5Vw.js";import"./wrapNativeSuper-CxOa5OEc.js";var he=["prefixCls","className","style","checked","disabled","defaultChecked","type","title","onChange"],be=t.forwardRef(function(e,c){var i=e.prefixCls,a=i===void 0?"rc-checkbox":i,o=e.className,y=e.style,b=e.checked,p=e.disabled,S=e.defaultChecked,v=S===void 0?!1:S,u=e.type,x=u===void 0?"checkbox":u,O=e.title,r=e.onChange,F=re(e,he),C=t.useRef(null),f=t.useRef(null),l=pe(v,{value:b}),q=fe(l,2),w=q[0],k=q[1];t.useImperativeHandle(c,function(){return{focus:function(s){var h;(h=C.current)===null||h===void 0||h.focus(s)},blur:function(){var s;(s=C.current)===null||s===void 0||s.blur()},input:C.current,nativeElement:f.current}});var m=E(a,o,W(W({},"".concat(a,"-checked"),w),"".concat(a,"-disabled"),p)),d=function(s){p||("checked"in e||k(s.target.checked),r==null||r({target:z(z({},e),{},{type:x,checked:s.target.checked}),stopPropagation:function(){s.stopPropagation()},preventDefault:function(){s.preventDefault()},nativeEvent:s.nativeEvent}))};return t.createElement("span",{className:m,title:O,style:y,ref:f},t.createElement("input",le({},F,{className:"".concat(a,"-input"),ref:C,onChange:d,disabled:p,checked:!!w,type:x})),t.createElement("span",{className:"".concat(a,"-inner")}))});const Y=ie.createContext(null);var ye=function(e,c){var i={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&c.indexOf(a)<0&&(i[a]=e[a]);if(e!=null&&typeof Object.getOwnPropertySymbols=="function")for(var o=0,a=Object.getOwnPropertySymbols(e);o<a.length;o++)c.indexOf(a[o])<0&&Object.prototype.propertyIsEnumerable.call(e,a[o])&&(i[a[o]]=e[a[o]]);return i};const Ce=(e,c)=>{var i;const{prefixCls:a,className:o,rootClassName:y,children:b,indeterminate:p=!1,style:S,onMouseEnter:v,onMouseLeave:u,skipGroup:x=!1,disabled:O}=e,r=ye(e,["prefixCls","className","rootClassName","children","indeterminate","style","onMouseEnter","onMouseLeave","skipGroup","disabled"]),{getPrefixCls:F,direction:C,checkbox:f}=t.useContext(K),l=t.useContext(Y),{isFormItemInput:q}=t.useContext(me),w=t.useContext(de),k=(i=(l==null?void 0:l.disabled)||O)!==null&&i!==void 0?i:w,m=t.useRef(r.value);t.useEffect(()=>{l==null||l.registerValue(r.value)},[]),t.useEffect(()=>{if(!x)return r.value!==m.current&&(l==null||l.cancelValue(m.current),l==null||l.registerValue(r.value),m.current=r.value),()=>l==null?void 0:l.cancelValue(r.value)},[r.value]);const d=F("checkbox",a),g=Q(d),[s,h,P]=U(d,g),V=Object.assign({},r);l&&!x&&(V.onChange=function(){r.onChange&&r.onChange.apply(r,arguments),l.toggleOption&&l.toggleOption({label:b,value:r.value})},V.name=l.name,V.checked=l.value.includes(r.value));const D=E(`${d}-wrapper`,{[`${d}-rtl`]:C==="rtl",[`${d}-wrapper-checked`]:V.checked,[`${d}-wrapper-disabled`]:k,[`${d}-wrapper-in-form-item`]:q},f==null?void 0:f.className,o,y,P,g,h),I=E({[`${d}-indeterminate`]:p},se,h),j=p?"mixed":void 0;return s(t.createElement(ue,{component:"Checkbox",disabled:k},t.createElement("label",{className:D,style:Object.assign(Object.assign({},f==null?void 0:f.style),S),onMouseEnter:v,onMouseLeave:u},t.createElement(be,Object.assign({"aria-checked":j},V,{prefixCls:d,className:I,disabled:k,ref:c})),b!==void 0&&t.createElement("span",null,b))))},Z=t.forwardRef(Ce);var ge=function(e,c){var i={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&c.indexOf(a)<0&&(i[a]=e[a]);if(e!=null&&typeof Object.getOwnPropertySymbols=="function")for(var o=0,a=Object.getOwnPropertySymbols(e);o<a.length;o++)c.indexOf(a[o])<0&&Object.prototype.propertyIsEnumerable.call(e,a[o])&&(i[a[o]]=e[a[o]]);return i};const ve=t.forwardRef((e,c)=>{const{defaultValue:i,children:a,options:o=[],prefixCls:y,className:b,rootClassName:p,style:S,onChange:v}=e,u=ge(e,["defaultValue","children","options","prefixCls","className","rootClassName","style","onChange"]),{getPrefixCls:x,direction:O}=t.useContext(K),[r,F]=t.useState(u.value||i||[]),[C,f]=t.useState([]);t.useEffect(()=>{"value"in u&&F(u.value||[])},[u.value]);const l=t.useMemo(()=>o.map(n=>typeof n=="string"||typeof n=="number"?{label:n,value:n}:n),[o]),q=n=>{f(_=>_.filter(R=>R!==n))},w=n=>{f(_=>[].concat(B(_),[n]))},k=n=>{const _=r.indexOf(n.value),R=B(r);_===-1?R.push(n.value):R.splice(_,1),"value"in u||F(R),v==null||v(R.filter(M=>C.includes(M)).sort((M,ee)=>{const ae=l.findIndex(T=>T.value===M),te=l.findIndex(T=>T.value===ee);return ae-te}))},m=x("checkbox",y),d=`${m}-group`,g=Q(m),[s,h,P]=U(m,g),V=ce(u,["value","disabled"]),D=o.length?l.map(n=>t.createElement(Z,{prefixCls:m,key:n.value.toString(),disabled:"disabled"in n?n.disabled:u.disabled,value:n.value,checked:r.includes(n.value),onChange:n.onChange,className:`${d}-item`,style:n.style,title:n.title,id:n.id,required:n.required},n.label)):a,I={toggleOption:k,value:r,disabled:u.disabled,name:u.name,registerValue:w,cancelValue:q},j=E(d,{[`${d}-rtl`]:O==="rtl"},b,p,P,g,h);return s(t.createElement("div",Object.assign({className:j,style:S},V,{ref:c}),t.createElement(Y.Provider,{value:I},D)))}),H=Z;H.Group=ve;H.__ANT_CHECKBOX=!0;const $=({field:e})=>{t.useSyncExternalStore(e.subscribe.bind(e),e.getSnapshot.bind(e));const c=e.getName(),i=e.getProps(),a=e.getValue(),o=t.useCallback(p=>{e.isReady()&&(e.setValue(p.target.checked||!1),e.setTouched(!0),e.setDirty(!0))},[e]);t.useEffect(()=>{e.setReady(!0)},[e,c]);let y={};i.width&&(y={width:i.width});const b={...y,...i.style};return G.jsx(H,{checked:a,disabled:e.isDisabled()||e.isReadOnly(),onChange:o,autoFocus:i.autoFocus,indeterminate:i.indeterminate,style:b})};try{$.displayName="CheckboxFieldRender",$.__docgenInfo={description:"",displayName:"CheckboxFieldRender",props:{field:{defaultValue:null,description:"",name:"field",required:!0,type:{name:"CheckboxField"}}}}}catch{}class xe extends ne{render(){return G.jsx($,{field:this})}}const L=e=>G.jsx(oe,{buttons:null,fieldsProps:{field1:{...e,component:xe}}}),ke=L;try{L.displayName="CheckboxComponent",L.__docgenInfo={description:"DForm Checkbox component",displayName:"CheckboxComponent",props:{value:{defaultValue:null,description:"default value",name:"value",required:!1,type:{name:"boolean"}},indeterminate:{defaultValue:null,description:"The indeterminate checked state of checkbox",name:"indeterminate",required:!1,type:{name:"boolean"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => CheckboxField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},inlineGroup:{defaultValue:null,description:"inline group name",name:"inlineGroup",required:!1,type:{name:"string"}},hidden:{defaultValue:null,description:"Whether the field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"Whether the field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"Whether the field default state is readonly",name:"readOnly",required:!1,type:{name:"boolean"}},nonEditable:{defaultValue:null,description:"Whether the field can not be edited (the field will have readOnly state if formMode is 'update')",name:"nonEditable",required:!1,type:{name:"boolean"}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: unknown, prevValue: unknown, field: CheckboxField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: CheckboxField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: CheckboxField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: unknown, error: string, isSubmit: boolean, field: CheckboxField) => void)"}}}}}catch{}try{checkboxComponent.displayName="checkboxComponent",checkboxComponent.__docgenInfo={description:"DForm Checkbox component",displayName:"checkboxComponent",props:{value:{defaultValue:null,description:"default value",name:"value",required:!1,type:{name:"boolean"}},indeterminate:{defaultValue:null,description:"The indeterminate checked state of checkbox",name:"indeterminate",required:!1,type:{name:"boolean"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => CheckboxField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},inlineGroup:{defaultValue:null,description:"inline group name",name:"inlineGroup",required:!1,type:{name:"string"}},hidden:{defaultValue:null,description:"Whether the field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"Whether the field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"Whether the field default state is readonly",name:"readOnly",required:!1,type:{name:"boolean"}},nonEditable:{defaultValue:null,description:"Whether the field can not be edited (the field will have readOnly state if formMode is 'update')",name:"nonEditable",required:!1,type:{name:"boolean"}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: unknown, prevValue: unknown, field: CheckboxField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: CheckboxField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: CheckboxField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: unknown, error: string, isSubmit: boolean, field: CheckboxField) => void)"}}}}}catch{}const ma={title:"DForm/Fields/Checkbox",component:ke,tags:["autodocs"],parameters:{docs:{source:{language:"tsx",format:!0,code:`
                    import React from 'react';
                    import {DForm} from @krinopotam/ui-kit/dForm';
                    import {CheckboxField, ICheckboxFieldProps} from @krinopotam/ui-kit/dForm/fields/checkbox/checkboxField';
                    type IComponent = ICheckboxFieldProps;
                    /** DForm Checkbox component */
                    export const CheckboxComponent = (props: IComponent): React.JSX.Element => (
                        <DForm buttons={null} fieldsProps={{field1: {...props, component: CheckboxField}}} />
                    );
                    export default CheckboxComponent;
                `}}}},N={args:{label:"Checkbox field"}};var A,X,J;N.parameters={...N.parameters,docs:{...(A=N.parameters)==null?void 0:A.docs,source:{originalSource:`{
  args: {
    label: 'Checkbox field'
  }
}`,...(J=(X=N.parameters)==null?void 0:X.docs)==null?void 0:J.source}}};const ha=["Playground"];export{N as Playground,ha as __namedExportsOrder,ma as default};
