import{j as f}from"./jsx-runtime-D_zvdyIk.js";import{D as R}from"./dForm-CMvaOAK6.js";import"./dayjs.min-B6ICIYLQ.js";import{B as F}from"./baseField-B3FsiVff.js";import{r}from"./index-iW-139IE.js";import{s as T}from"./splitObject-C6hVKqbV.js";import{T as D,a as I}from"./treeSelect-Csl8TqtZ.js";import{f as o}from"./index-cNkFZXRj.js";import"./buttonsRow-B2Gh6Nyq.js";import"./button-x73pZwip.js";import"./compact-item-Cxv0YLF9.js";import"./useToken-C9qwXZKU.js";import"./index-mQZ8i_rL.js";import"./index-D_2t0AaZ.js";import"./index-CMYZVoVF.js";import"./button-D87aS1YS.js";import"./Sider-zAVKy6og.js";import"./index-H-U0Qhl4.js";import"./context-u9dygr8g.js";import"./KeyCode-lh1qUinJ.js";import"./row-Bq2vx5ix.js";import"./ContextIsolator-BX2WkAUK.js";import"./motion-HGHEQR47.js";import"./roundedArrow-CIJYWJcZ.js";import"./index-Bi_XhfGV.js";import"./colors-B0jgcrR7.js";import"./DownOutlined-CSg1yAI9.js";import"./getNanoId-CghKzzgc.js";import"./updateModalTheme-CEAYlwgO.js";import"./headerRender-BlJExsug.js";import"./index-CvIgV7lr.js";import"./ExclamationCircleFilled-DO6fsheT.js";import"./pickAttrs-DOtYDQG6.js";import"./CloseOutlined-C5nLa7GN.js";import"./useClosable-DLVmVXm2.js";import"./InfoCircleOutlined-DgVG6Ryw.js";import"./QuestionCircleOutlined-BUGNUdLn.js";import"./index-DSj8ZEWj.js";import"./TextArea-Bx-nz3Fu.js";import"./useVariants-Cpy17TlJ.js";import"./index-CHrs_Nvn.js";import"./CheckOutlined-DXdfq3FB.js";import"./isDebugMode-B-VM_G4X.js";import"./isArray-Cl7xn3Rc.js";import"./dFormModal-Cn6hBzR0.js";import"./modal-jRXrbnSK.js";import"./defaultButtonsProps-DhEwEG06.js";import"./List-mPb_Fs88.js";import"./index-BspaYdSE.js";import"./v4-CtRu48qb.js";import"./EyeOutlined-BdSgb3nL.js";import"./DeleteOutlined-S5uC3Dcu.js";import"./useShowArrow-DKg9nTFS.js";import"./useIcons-jH37no42.js";import"./SearchOutlined-C7GiFsDv.js";import"./index-Q0qtkvBQ.js";const u=e=>()=>{e.setTouched(!0)};try{u.displayName="useOnBlur",u.__docgenInfo={description:"",displayName:"useOnBlur",props:{render:{defaultValue:null,description:"",name:"render",required:!0,type:{name:"() => Element"}},fieldProps:{defaultValue:null,description:"form field props",name:"fieldProps",required:!0,type:{name:"ITreeSelectFieldProps"}},fieldName:{defaultValue:null,description:"field name",name:"fieldName",required:!0,type:{name:"string"}},model:{defaultValue:null,description:"form model",name:"model",required:!0,type:{name:"DModel"}},parent:{defaultValue:null,description:"parent field",name:"parent",required:!1,type:{name:"IBaseField"}},listeners:{defaultValue:null,description:"React component sync(re-render) listener",name:"listeners",required:!0,type:{name:"(() => void)[]"}},renderSnapshot:{defaultValue:null,description:"react component sync(re-render) snapshot",name:"renderSnapshot",required:!0,type:{name:"Record<never, never>"}},fieldsMap:{defaultValue:null,description:"field collection (plain list of all fields in all component tabs, including child fields)",name:"fieldsMap",required:!0,type:{name:"Record<string, IBaseField>"}},rootFields:{defaultValue:null,description:"root fields collection (only root fields, without children)",name:"rootFields",required:!0,type:{name:"Record<string, IBaseField>"}},initChildrenFields:{defaultValue:null,description:"",name:"initChildrenFields",required:!0,type:{name:"() => [Record<string, IBaseField>, Record<string, IBaseField>]"}},getProps:{defaultValue:null,description:"@returns get current field properties",name:"getProps",required:!0,type:{name:"() => ITreeSelectFieldProps"}},setProps:{defaultValue:null,description:`Set current field properties
@param fieldProps - field new properties
@param noRerender - do not emit re-rendering`,name:"setProps",required:!0,type:{name:"(fieldProps: ITreeSelectFieldProps, noRerender?: boolean | undefined) => void"}},noGrowWidth:{defaultValue:null,description:"A sign that the component should not grow in width if free space is available. Relevant for narrow components such as CheckBox or Switch",name:"noGrowWidth",required:!0,type:{name:"() => boolean"}},managesChildWidth:{defaultValue:null,description:"A sign that this component itself controls the width of its child components, and they should not have their own width parameters (for example, inlineGroupField)",name:"managesChildWidth",required:!0,type:{name:"() => boolean"}},getWidth:{defaultValue:null,description:"Get field width property",name:"getWidth",required:!0,type:{name:"() => string | number | undefined"}},updateProps:{defaultValue:null,description:`Set current field properties
@param updatedProps - partial field properties to update
@param noRerender - do not emit re-rendering`,name:"updateProps",required:!0,type:{name:"(updatedProps: Partial<ITreeSelectFieldProps>, noRerender?: boolean | undefined) => void"}},getName:{defaultValue:null,description:"@returns field name",name:"getName",required:!0,type:{name:"() => string"}},getFormProps:{defaultValue:null,description:"Get form properties",name:"getFormProps",required:!0,type:{name:"() => IDFormProps"}},getModel:{defaultValue:null,description:"@returns form model",name:"getModel",required:!0,type:{name:"() => DModel"}},getParent:{defaultValue:null,description:"Return field parent container",name:"getParent",required:!0,type:{name:"() => IBaseField | undefined"}},getLabel:{defaultValue:null,description:"@returns field label",name:"getLabel",required:!0,type:{name:"() => ReactNode"}},setLabel:{defaultValue:null,description:`Sets the field label
@param value - new label value
@param noEvents - do not emit onLabelChanged callback
@param noRerender - do not emit re-rendering`,name:"setLabel",required:!0,type:{name:"(value: ReactNode, noEvents?: boolean | undefined, noRerender?: boolean | undefined) => void"}},getValue:{defaultValue:null,description:"@return field value",name:"getValue",required:!0,type:{name:"() => ITreeSelectValue | undefined"}},setValue:{defaultValue:null,description:`Sets a new field value, cause the field to rerender
*this function doesn't change the field touch and dirty statuses. You should handle it in the field component!
@param value - new value
@param noEvents - do not emit onValueChanged callback
@param noRerender - do not emit re-rendering`,name:"setValue",required:!0,type:{name:"(value: ITreeSelectValue | undefined, noEvents?: boolean | undefined, noRerender?: boolean | undefined) => void"}},isEmptyValue:{defaultValue:null,description:"@return true if field value is empty array, object, string, undefined or null (if value=0 it is not empty)",name:"isEmptyValue",required:!0,type:{name:"() => boolean"}},isTouched:{defaultValue:null,description:"@returns the field touched status (a user has set focus to the field)",name:"isTouched",required:!0,type:{name:"() => boolean"}},setTouched:{defaultValue:null,description:`Sets a touched status to the field (a user has set focus to the field)
@param value - touched status
@param noEvents - do not emit onTouchedStateChanged callback`,name:"setTouched",required:!0,type:{name:"(value: boolean, noEvents?: boolean | undefined) => void"}},isDirty:{defaultValue:null,description:"@returns field dirty status",name:"isDirty",required:!0,type:{name:"() => boolean"}},setDirty:{defaultValue:null,description:`Sets a dirty status to the field (a user has changed field value)
@param value - dirty status
@param noEvents - do not emit onDirtyStateChanged and onFormDirtyStateChanged callbacks`,name:"setDirty",required:!0,type:{name:"(value: boolean, noEvents?: boolean | undefined) => void"}},isDisabled:{defaultValue:null,description:"@returns field disable status",name:"isDisabled",required:!0,type:{name:"() => boolean"}},setDisabled:{defaultValue:null,description:`Sets a disabled status to the field
@param value - disabled status
@param noEvents - do not emit onDisabledStateChanged callback
@param noRerender - do not emit re-rendering`,name:"setDisabled",required:!0,type:{name:"(value: boolean, noEvents?: boolean | undefined, noRerender?: boolean | undefined) => void"}},isReadOnly:{defaultValue:null,description:"@returns field read only status",name:"isReadOnly",required:!0,type:{name:"() => boolean"}},setReadOnly:{defaultValue:null,description:`Sets a read only status to the field
@param value - read only status
@param noEvents - do not emit onReadOnlyStateChanged callback
@param noRerender - do not emit re-rendering`,name:"setReadOnly",required:!0,type:{name:"(value: boolean, noEvents?: boolean | undefined, noRerender?: boolean | undefined) => void"}},isHidden:{defaultValue:null,description:"@returns field hidden status",name:"isHidden",required:!0,type:{name:"() => boolean"}},setHidden:{defaultValue:null,description:`Sets a hidden status to the field
@param value - hidden status
@param noEvents - do not emit onHiddenStateChanged callback
@param noRerender - do not emit re-rendering`,name:"setHidden",required:!0,type:{name:"(value: boolean, noEvents?: boolean | undefined, noRerender?: boolean | undefined) => void"}},isReady:{defaultValue:null,description:"@returns field ready status",name:"isReady",required:!0,type:{name:"() => boolean"}},setReady:{defaultValue:null,description:`Sets a ready status to the field (the field is completely initialized, its data is loaded)
@param value - ready status
@param noEvents - do not emit onReady callback`,name:"setReady",required:!0,type:{name:"(value: boolean, noEvents?: boolean | undefined) => void"}},getError:{defaultValue:null,description:"@returns the error text of the field",name:"getError",required:!0,type:{name:"() => string"}},setError:{defaultValue:null,description:`Sets an error to the field
@param value - error text
@param noEvents - do not emit onErrorChanged & onFormHasErrors callbacks
@param noRerender - do not emit re-rendering`,name:"setError",required:!0,type:{name:"(value: string, noEvents?: boolean | undefined, noRerender?: boolean | undefined) => void"}},validate:{defaultValue:null,description:`Validate field
@param noEvents - do not emit onValidated callback
@param noRerender - do not emit re-rendering
@returns error text`,name:"validate",required:!0,type:{name:"(noEvents?: boolean | undefined, noRerender?: boolean | undefined) => string"}},onInitialFetch:{defaultValue:null,description:"Will called on form initialization data fetch",name:"onInitialFetch",required:!0,type:{name:"() => void"}},isFetching:{defaultValue:null,description:"@returns field fetching status",name:"isFetching",required:!0,type:{name:"() => boolean"}},isFetchingFailed:{defaultValue:null,description:"@returns field fetching failed status",name:"isFetchingFailed",required:!0,type:{name:"() => boolean"}},fetchData:{defaultValue:null,description:"",name:"fetchData",required:!0,type:{name:"() => void"}},getFieldsMap:{defaultValue:null,description:"return@ field collection (plain list of all fields in all component tabs, including child fields)",name:"getFieldsMap",required:!0,type:{name:"() => Record<string, IBaseField>"}},getRootFields:{defaultValue:null,description:"@return root fields collection (only root fields, without children)",name:"getRootFields",required:!0,type:{name:"() => Record<string, IBaseField>"}},isContainer:{defaultValue:null,description:"@return true if field contains another fields",name:"isContainer",required:!0,type:{name:"() => boolean"}},hasVisibleChildren:{defaultValue:null,description:"@return true if field contains visible fields",name:"hasVisibleChildren",required:!0,type:{name:"() => boolean"}},renderField:{defaultValue:null,description:"",name:"renderField",required:!0,type:{name:"({ altLabel, fieldContainerStyle, }?: { altLabel?: ReactNode; fieldContainerStyle?: CSSProperties | undefined; }) => ReactNode"}},renderFieldWrapper:{defaultValue:null,description:"",name:"renderFieldWrapper",required:!0,type:{name:"({ field, altLabel, fieldContainerStyle, }: { field: ReactNode; altLabel?: ReactNode; fieldContainerStyle?: CSSProperties | undefined; }) => Element"}},canHaveValue:{defaultValue:null,description:"Is field can have value",name:"canHaveValue",required:!0,type:{name:"() => boolean"}},subscribe:{defaultValue:null,description:"returns React component sync(re-render) listener",name:"subscribe",required:!0,type:{name:"(listener: () => void) => () => void"}},getSnapshot:{defaultValue:null,description:"return React component sync(re-render) snapshot",name:"getSnapshot",required:!0,type:{name:"() => Record<never, never>"}},emitRender:{defaultValue:null,description:"Emit field React component re-render",name:"emitRender",required:!0,type:{name:"() => void"}}}}}catch{}const N=(e,a)=>(t,n,l)=>{var d;if(e.isReady()){switch(a.valueType){case void 0:case"node":a.multiple?e.setValue(l??null):e.setValue(l!=null&&l.length?l[0]:null);break;case"labeledValue":e.setValue(t??null);break;case"key":a.multiple?e.setValue(n??null):e.setValue(n!=null&&n.length?n[0]:null);break}e.setDirty(!0)}(d=a.onChange)==null||d.call(a,t,n,l,e)},s=e=>()=>{var t;e.setDirty(!0),e.setTouched(!0);const a=e.getProps();(t=a.onClear)==null||t.call(a)};try{s.displayName="useOnClear",s.__docgenInfo={description:"",displayName:"useOnClear",props:{render:{defaultValue:null,description:"",name:"render",required:!0,type:{name:"() => Element"}},fieldProps:{defaultValue:null,description:"form field props",name:"fieldProps",required:!0,type:{name:"ITreeSelectFieldProps"}},fieldName:{defaultValue:null,description:"field name",name:"fieldName",required:!0,type:{name:"string"}},model:{defaultValue:null,description:"form model",name:"model",required:!0,type:{name:"DModel"}},parent:{defaultValue:null,description:"parent field",name:"parent",required:!1,type:{name:"IBaseField"}},listeners:{defaultValue:null,description:"React component sync(re-render) listener",name:"listeners",required:!0,type:{name:"(() => void)[]"}},renderSnapshot:{defaultValue:null,description:"react component sync(re-render) snapshot",name:"renderSnapshot",required:!0,type:{name:"Record<never, never>"}},fieldsMap:{defaultValue:null,description:"field collection (plain list of all fields in all component tabs, including child fields)",name:"fieldsMap",required:!0,type:{name:"Record<string, IBaseField>"}},rootFields:{defaultValue:null,description:"root fields collection (only root fields, without children)",name:"rootFields",required:!0,type:{name:"Record<string, IBaseField>"}},initChildrenFields:{defaultValue:null,description:"",name:"initChildrenFields",required:!0,type:{name:"() => [Record<string, IBaseField>, Record<string, IBaseField>]"}},getProps:{defaultValue:null,description:"@returns get current field properties",name:"getProps",required:!0,type:{name:"() => ITreeSelectFieldProps"}},setProps:{defaultValue:null,description:`Set current field properties
@param fieldProps - field new properties
@param noRerender - do not emit re-rendering`,name:"setProps",required:!0,type:{name:"(fieldProps: ITreeSelectFieldProps, noRerender?: boolean | undefined) => void"}},noGrowWidth:{defaultValue:null,description:"A sign that the component should not grow in width if free space is available. Relevant for narrow components such as CheckBox or Switch",name:"noGrowWidth",required:!0,type:{name:"() => boolean"}},managesChildWidth:{defaultValue:null,description:"A sign that this component itself controls the width of its child components, and they should not have their own width parameters (for example, inlineGroupField)",name:"managesChildWidth",required:!0,type:{name:"() => boolean"}},getWidth:{defaultValue:null,description:"Get field width property",name:"getWidth",required:!0,type:{name:"() => string | number | undefined"}},updateProps:{defaultValue:null,description:`Set current field properties
@param updatedProps - partial field properties to update
@param noRerender - do not emit re-rendering`,name:"updateProps",required:!0,type:{name:"(updatedProps: Partial<ITreeSelectFieldProps>, noRerender?: boolean | undefined) => void"}},getName:{defaultValue:null,description:"@returns field name",name:"getName",required:!0,type:{name:"() => string"}},getFormProps:{defaultValue:null,description:"Get form properties",name:"getFormProps",required:!0,type:{name:"() => IDFormProps"}},getModel:{defaultValue:null,description:"@returns form model",name:"getModel",required:!0,type:{name:"() => DModel"}},getParent:{defaultValue:null,description:"Return field parent container",name:"getParent",required:!0,type:{name:"() => IBaseField | undefined"}},getLabel:{defaultValue:null,description:"@returns field label",name:"getLabel",required:!0,type:{name:"() => ReactNode"}},setLabel:{defaultValue:null,description:`Sets the field label
@param value - new label value
@param noEvents - do not emit onLabelChanged callback
@param noRerender - do not emit re-rendering`,name:"setLabel",required:!0,type:{name:"(value: ReactNode, noEvents?: boolean | undefined, noRerender?: boolean | undefined) => void"}},getValue:{defaultValue:null,description:"@return field value",name:"getValue",required:!0,type:{name:"() => ITreeSelectValue | undefined"}},setValue:{defaultValue:null,description:`Sets a new field value, cause the field to rerender
*this function doesn't change the field touch and dirty statuses. You should handle it in the field component!
@param value - new value
@param noEvents - do not emit onValueChanged callback
@param noRerender - do not emit re-rendering`,name:"setValue",required:!0,type:{name:"(value: ITreeSelectValue | undefined, noEvents?: boolean | undefined, noRerender?: boolean | undefined) => void"}},isEmptyValue:{defaultValue:null,description:"@return true if field value is empty array, object, string, undefined or null (if value=0 it is not empty)",name:"isEmptyValue",required:!0,type:{name:"() => boolean"}},isTouched:{defaultValue:null,description:"@returns the field touched status (a user has set focus to the field)",name:"isTouched",required:!0,type:{name:"() => boolean"}},setTouched:{defaultValue:null,description:`Sets a touched status to the field (a user has set focus to the field)
@param value - touched status
@param noEvents - do not emit onTouchedStateChanged callback`,name:"setTouched",required:!0,type:{name:"(value: boolean, noEvents?: boolean | undefined) => void"}},isDirty:{defaultValue:null,description:"@returns field dirty status",name:"isDirty",required:!0,type:{name:"() => boolean"}},setDirty:{defaultValue:null,description:`Sets a dirty status to the field (a user has changed field value)
@param value - dirty status
@param noEvents - do not emit onDirtyStateChanged and onFormDirtyStateChanged callbacks`,name:"setDirty",required:!0,type:{name:"(value: boolean, noEvents?: boolean | undefined) => void"}},isDisabled:{defaultValue:null,description:"@returns field disable status",name:"isDisabled",required:!0,type:{name:"() => boolean"}},setDisabled:{defaultValue:null,description:`Sets a disabled status to the field
@param value - disabled status
@param noEvents - do not emit onDisabledStateChanged callback
@param noRerender - do not emit re-rendering`,name:"setDisabled",required:!0,type:{name:"(value: boolean, noEvents?: boolean | undefined, noRerender?: boolean | undefined) => void"}},isReadOnly:{defaultValue:null,description:"@returns field read only status",name:"isReadOnly",required:!0,type:{name:"() => boolean"}},setReadOnly:{defaultValue:null,description:`Sets a read only status to the field
@param value - read only status
@param noEvents - do not emit onReadOnlyStateChanged callback
@param noRerender - do not emit re-rendering`,name:"setReadOnly",required:!0,type:{name:"(value: boolean, noEvents?: boolean | undefined, noRerender?: boolean | undefined) => void"}},isHidden:{defaultValue:null,description:"@returns field hidden status",name:"isHidden",required:!0,type:{name:"() => boolean"}},setHidden:{defaultValue:null,description:`Sets a hidden status to the field
@param value - hidden status
@param noEvents - do not emit onHiddenStateChanged callback
@param noRerender - do not emit re-rendering`,name:"setHidden",required:!0,type:{name:"(value: boolean, noEvents?: boolean | undefined, noRerender?: boolean | undefined) => void"}},isReady:{defaultValue:null,description:"@returns field ready status",name:"isReady",required:!0,type:{name:"() => boolean"}},setReady:{defaultValue:null,description:`Sets a ready status to the field (the field is completely initialized, its data is loaded)
@param value - ready status
@param noEvents - do not emit onReady callback`,name:"setReady",required:!0,type:{name:"(value: boolean, noEvents?: boolean | undefined) => void"}},getError:{defaultValue:null,description:"@returns the error text of the field",name:"getError",required:!0,type:{name:"() => string"}},setError:{defaultValue:null,description:`Sets an error to the field
@param value - error text
@param noEvents - do not emit onErrorChanged & onFormHasErrors callbacks
@param noRerender - do not emit re-rendering`,name:"setError",required:!0,type:{name:"(value: string, noEvents?: boolean | undefined, noRerender?: boolean | undefined) => void"}},validate:{defaultValue:null,description:`Validate field
@param noEvents - do not emit onValidated callback
@param noRerender - do not emit re-rendering
@returns error text`,name:"validate",required:!0,type:{name:"(noEvents?: boolean | undefined, noRerender?: boolean | undefined) => string"}},onInitialFetch:{defaultValue:null,description:"Will called on form initialization data fetch",name:"onInitialFetch",required:!0,type:{name:"() => void"}},isFetching:{defaultValue:null,description:"@returns field fetching status",name:"isFetching",required:!0,type:{name:"() => boolean"}},isFetchingFailed:{defaultValue:null,description:"@returns field fetching failed status",name:"isFetchingFailed",required:!0,type:{name:"() => boolean"}},fetchData:{defaultValue:null,description:"",name:"fetchData",required:!0,type:{name:"() => void"}},getFieldsMap:{defaultValue:null,description:"return@ field collection (plain list of all fields in all component tabs, including child fields)",name:"getFieldsMap",required:!0,type:{name:"() => Record<string, IBaseField>"}},getRootFields:{defaultValue:null,description:"@return root fields collection (only root fields, without children)",name:"getRootFields",required:!0,type:{name:"() => Record<string, IBaseField>"}},isContainer:{defaultValue:null,description:"@return true if field contains another fields",name:"isContainer",required:!0,type:{name:"() => boolean"}},hasVisibleChildren:{defaultValue:null,description:"@return true if field contains visible fields",name:"hasVisibleChildren",required:!0,type:{name:"() => boolean"}},renderField:{defaultValue:null,description:"",name:"renderField",required:!0,type:{name:"({ altLabel, fieldContainerStyle, }?: { altLabel?: ReactNode; fieldContainerStyle?: CSSProperties | undefined; }) => ReactNode"}},renderFieldWrapper:{defaultValue:null,description:"",name:"renderFieldWrapper",required:!0,type:{name:"({ field, altLabel, fieldContainerStyle, }: { field: ReactNode; altLabel?: ReactNode; fieldContainerStyle?: CSSProperties | undefined; }) => Element"}},canHaveValue:{defaultValue:null,description:"Is field can have value",name:"canHaveValue",required:!0,type:{name:"() => boolean"}},subscribe:{defaultValue:null,description:"returns React component sync(re-render) listener",name:"subscribe",required:!0,type:{name:"(listener: () => void) => () => void"}},getSnapshot:{defaultValue:null,description:"return React component sync(re-render) snapshot",name:"getSnapshot",required:!0,type:{name:"() => Record<never, never>"}},emitRender:{defaultValue:null,description:"Emit field React component re-render",name:"emitRender",required:!0,type:{name:"() => void"}}}}}catch{}const E=(e,a)=>t=>{var n;return(n=a.onDataSetChanged)==null?void 0:n.call(a,t,e)},p=e=>r.useMemo(()=>T(e,{autoFocus:!0,autoHeightResize:!0,component:!0,dependsOn:!0,disabled:!0,helpClass:!0,hidden:!0,label:!0,nonEditable:!0,onDirtyStateChanged:!0,onDisabledStateChanged:!0,onErrorChanged:!0,onHiddenStateChanged:!0,onLabelChanged:!0,onReadOnlyStateChanged:!0,onReady:!0,onReadyStateChanged:!0,onTouchedStateChanged:!0,onValidated:!0,onValueChanged:!0,placeholder:!0,readOnly:!0,requiredMark:!0,rowStyle:!0,rules:!0,style:!0,tab:!0,tooltip:!0,defaultValue:!0,width:!0,valueType:!0,onDataSetChanged:!0,onChange:!0,dataSet:!0,onDataFetch:!0,onFieldDataFetch:!0,onFieldDataFetchError:!0,onFieldDataFetchSuccess:!0,className:!0,itemClassName:!0})[1],[e]);try{p.displayName="useSplitTreeSelectProps",p.__docgenInfo={description:"",displayName:"useSplitTreeSelectProps",props:{component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => any"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},itemClassName:{defaultValue:null,description:"Field item class name (unlike className, this is the name of the class of the field item container)",name:"itemClassName",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"Field class name (directly the field itself, not the container)",name:"className",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"Field default value",name:"defaultValue",required:!1,type:{name:"any"}},hidden:{defaultValue:null,description:"Whether the field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"Whether the field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"Whether the field default state is readonly",name:"readOnly",required:!1,type:{name:"boolean"}},nonEditable:{defaultValue:null,description:"Whether the field can not be edited (the field will have readOnly or disabled state if formMode is 'update')",name:"nonEditable",required:!1,type:{name:'boolean | "disabled" | "readOnly"'}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: any, prevValue: any, field: any) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: any) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: any) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: any) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: any) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: any) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: any) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: any) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: any) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: any, error: string, isSubmit: boolean, field: any) => void)"}},onFieldDataFetch:{defaultValue:null,description:"fires when the field trying to fetch data",name:"onFieldDataFetch",required:!1,type:{name:"((field: any) => IDFormDataSourcePromise)"}},onFieldDataFetchSuccess:{defaultValue:null,description:"fires when the field fetch success",name:"onFieldDataFetchSuccess",required:!1,type:{name:"((result: { data: Record<string, any>; }, field: any) => void)"}},onFieldDataFetchError:{defaultValue:null,description:"fires when the field fetch failed",name:"onFieldDataFetchError",required:!1,type:{name:"((error: IError, field: any) => void)"}}}}}catch{}const c=({field:e})=>{r.useSyncExternalStore(e.subscribe.bind(e),e.getSnapshot.bind(e));const[a]=r.useState({}),t=e.getProps(),n=e.getValue()??null,l=u(e),d=s(e),b=k(e,t.dataSet),V=N(e,t),S=E(e,t),q=L(e,t),v=P(e,t);r.useEffect(()=>{e.setReady(!0)},[e]);const w={...{width:e.getWidth()??"100%"},...t.style},C=p(t);return f.jsx(D,{className:t.className,apiRef:a,style:w,...C,dataSet:b,autoFocus:t.autoFocus,disabled:e.isDisabled(),readOnly:e.isReadOnly(),value:n,placeholder:t.placeholder??"Choose",onChange:V,onDataSetChanged:S,onDataFetch:q,onReady:v,onClear:d,onBlur:l})},k=(e,a)=>r.useMemo(()=>typeof a!="function"?a:()=>a(e),[a,e]),L=(e,a)=>(t,n)=>{var l;return(l=a.onDataFetch)==null?void 0:l.call(a,t,n,e)},P=(e,a)=>()=>{var t;return(t=a.onReady)==null?void 0:t.call(a,e)};try{c.displayName="TreeSelectFieldRender",c.__docgenInfo={description:"",displayName:"TreeSelectFieldRender",props:{field:{defaultValue:null,description:"",name:"field",required:!0,type:{name:"TreeSelectField"}}}}}catch{}class M extends F{render(){return f.jsx(c,{field:this})}}const m=e=>f.jsx(R,{buttons:null,fieldsProps:{field1:{...e,dataSet:I,component:M}}});try{m.displayName="TreeSelectComponent",m.__docgenInfo={description:"DForm TreeSelect field",displayName:"TreeSelectComponent",props:{dataSet:{defaultValue:null,description:"Data set for TreeSelect field",name:"dataSet",required:!1,type:{name:"ITreeSelectNode[] | ((field: TreeSelectField) => ITreeSelectNode[])"}},valueType:{defaultValue:null,description:`Value type of TreeSelect field which will be used in form (default: node)
- 'key' - value will react key (string | number | bigint)
- 'labeledValue' - value will TreeSelect labeled value {value: string | number | bigint, label: ReactNode}
- 'node' - value will TreeSelect node, for example {id:string, title:string, ...}`,name:"valueType",required:!1,type:{name:"enum",value:[{value:'"key"'},{value:'"labeledValue"'},{value:'"node"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"((valueType: ILabeledValue | ILabeledValue[] | null, keys: IKey[], nodes: ITreeSelectNode<Record<string, unknown>>[], args_3: TreeSelectField) => void)"}},onDataSetChanged:{defaultValue:null,description:"Fires when the TreeSelect dataSet is changed",name:"onDataSetChanged",required:!1,type:{name:"((dataSet: ITreeSelectNode<Record<string, unknown>>[], args_1: TreeSelectField) => void)"}},onDataFetch:{defaultValue:null,description:"fires when the TreeSelect trying to fetch data",name:"onDataFetch",required:!1,type:{name:"((search: string, api: ITreeSelectApi, args_2: TreeSelectField) => ITreeSelectSourcePromise)"}},onReady:{defaultValue:null,description:"Fires when the component is ready for use (when it fully downloaded all the data, if necessary)",name:"onReady",required:!1,type:{name:"((args_0: TreeSelectField) => void)"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => TreeSelectField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},itemClassName:{defaultValue:null,description:"Field item class name (unlike className, this is the name of the class of the field item container)",name:"itemClassName",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"Field class name (directly the field itself, not the container)",name:"className",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"Field default value",name:"defaultValue",required:!1,type:{name:"ITreeSelectValue"}},hidden:{defaultValue:null,description:"Whether the field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"Whether the field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:`Whether the field default state is readonly
Is TreeSelect read only`,name:"readOnly",required:!1,type:{name:"boolean"}},nonEditable:{defaultValue:null,description:"Whether the field can not be edited (the field will have readOnly or disabled state if formMode is 'update')",name:"nonEditable",required:!1,type:{name:'boolean | "disabled" | "readOnly"'}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: ITreeSelectValue, prevValue: ITreeSelectValue, field: TreeSelectField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: TreeSelectField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: TreeSelectField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: ITreeSelectValue, error: string, isSubmit: boolean, field: TreeSelectField) => void)"}},onFieldDataFetch:{defaultValue:null,description:"fires when the field trying to fetch data",name:"onFieldDataFetch",required:!1,type:{name:"((field: TreeSelectField) => IDFormDataSourcePromise)"}},onFieldDataFetchSuccess:{defaultValue:null,description:"fires when the field fetch success",name:"onFieldDataFetchSuccess",required:!1,type:{name:"((result: { data: Record<string, any>; }, field: TreeSelectField) => void)"}},onFieldDataFetchError:{defaultValue:null,description:"fires when the field fetch failed",name:"onFieldDataFetchError",required:!1,type:{name:"((error: IError, field: TreeSelectField) => void)"}},prefix:{defaultValue:null,description:"",name:"prefix",required:!1,type:{name:"ReactNode"}},size:{defaultValue:null,description:"",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"middle"'},{value:'"large"'}]}},maxLength:{defaultValue:null,description:"",name:"maxLength",required:!1,type:{name:"number"}},multiple:{defaultValue:null,description:"",name:"multiple",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"",name:"id",required:!1,type:{name:"string"}},tabIndex:{defaultValue:null,description:"",name:"tabIndex",required:!1,type:{name:"number"}},title:{defaultValue:null,description:"",name:"title",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLElement>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLElement>"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLDivElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLDivElement>"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLDivElement>"}},onMouseDown:{defaultValue:null,description:"",name:"onMouseDown",required:!1,type:{name:"MouseEventHandler<HTMLDivElement>"}},onMouseEnter:{defaultValue:null,description:"",name:"onMouseEnter",required:!1,type:{name:"MouseEventHandler<HTMLDivElement>"}},onMouseLeave:{defaultValue:null,description:"",name:"onMouseLeave",required:!1,type:{name:"MouseEventHandler<HTMLDivElement>"}},onSelect:{defaultValue:null,description:"",name:"onSelect",required:!1,type:{name:"((value: unknown, option: DataNode) => void)"}},prefixCls:{defaultValue:null,description:"",name:"prefixCls",required:!1,type:{name:"string"}},builtinPlacements:{defaultValue:null,description:"",name:"builtinPlacements",required:!1,type:{name:"BuildInPlacements"}},placement:{defaultValue:null,description:"",name:"placement",required:!1,type:{name:"enum",value:[{value:'"bottomLeft"'},{value:'"bottomRight"'},{value:'"topLeft"'},{value:'"topRight"'}]}},transitionName:{defaultValue:null,description:"",name:"transitionName",required:!1,type:{name:"string"}},animation:{defaultValue:null,description:"",name:"animation",required:!1,type:{name:"string"}},showArrow:{defaultValue:null,description:"@deprecated `showArrow` is deprecated which will be removed in next major version. It will be a\ndefault behavior, you can hide it by setting `suffixIcon` to null.",name:"showArrow",required:!1,type:{name:"boolean"}},buttons:{defaultValue:null,description:"Header editor buttons",name:"buttons",required:!1,type:{name:'Record<"view" | "create" | "update" | "clone" | "delete" | "createGroup" | "arrowUp" | "arrowDown", ITreeSelectButton | null> | ITreeSelectButtons'}},language:{defaultValue:null,description:"Language",name:"language",required:!1,type:{name:"enum",value:[{value:'"en_US"'},{value:'"ru_RU"'},{value:'"zh_CN"'}]}},translation:{defaultValue:null,description:"Custom translation",name:"translation",required:!1,type:{name:"Partial<{ view: string; viewGroup: string; viewRecord: string; viewRecordsGroup: string; create: string; createRecord: string; createGroup: string; createRecordsGroup: string; edit: string; editGroup: string; ... 19 more ...; dataNotFound: string; }>"}},status:{defaultValue:null,description:"",name:"status",required:!1,type:{name:"enum",value:[{value:'""'},{value:'"warning"'},{value:'"error"'}]}},variant:{defaultValue:{value:'"outlined"'},description:"@since 5.13.0",name:"variant",required:!1,type:{name:"enum",value:[{value:'"outlined"'},{value:'"borderless"'},{value:'"filled"'},{value:'"underlined"'}]}},loading:{defaultValue:null,description:"",name:"loading",required:!1,type:{name:"boolean"}},rootClassName:{defaultValue:null,description:"",name:"rootClassName",required:!1,type:{name:"string"}},getRawInputElement:{defaultValue:null,description:"@private Internal usage. Do not use in your production.",name:"getRawInputElement",required:!1,type:{name:"(() => JSX.Element)"}},searchValue:{defaultValue:null,description:"",name:"searchValue",required:!1,type:{name:"string"}},autoClearSearchValue:{defaultValue:null,description:"",name:"autoClearSearchValue",required:!1,type:{name:"boolean"}},onSearch:{defaultValue:null,description:"",name:"onSearch",required:!1,type:{name:"((value: string) => void)"}},showSearch:{defaultValue:null,description:"",name:"showSearch",required:!1,type:{name:"boolean"}},tagRender:{defaultValue:null,description:"",name:"tagRender",required:!1,type:{name:"((props: CustomTagProps) => ReactElement<unknown, string | JSXElementConstructor<any>>)"}},direction:{defaultValue:null,description:"",name:"direction",required:!1,type:{name:"enum",value:[{value:'"ltr"'},{value:'"rtl"'}]}},notFoundContent:{defaultValue:null,description:"",name:"notFoundContent",required:!1,type:{name:"ReactNode"}},onClear:{defaultValue:null,description:"",name:"onClear",required:!1,type:{name:"(() => void)"}},choiceTransitionName:{defaultValue:null,description:"",name:"choiceTransitionName",required:!1,type:{name:"string"}},open:{defaultValue:null,description:"",name:"open",required:!1,type:{name:"boolean"}},defaultOpen:{defaultValue:null,description:"",name:"defaultOpen",required:!1,type:{name:"boolean"}},onDropdownVisibleChange:{defaultValue:null,description:"",name:"onDropdownVisibleChange",required:!1,type:{name:"((open: boolean) => void)"}},maxTagTextLength:{defaultValue:null,description:"",name:"maxTagTextLength",required:!1,type:{name:"number"}},maxTagCount:{defaultValue:null,description:"",name:"maxTagCount",required:!1,type:{name:'number | "responsive"'}},maxTagPlaceholder:{defaultValue:null,description:"",name:"maxTagPlaceholder",required:!1,type:{name:"ReactNode | ((omittedValues: DisplayValueType[]) => ReactNode)"}},tokenSeparators:{defaultValue:null,description:"",name:"tokenSeparators",required:!1,type:{name:"string[]"}},allowClear:{defaultValue:null,description:"",name:"allowClear",required:!1,type:{name:"boolean | { clearIcon?: RenderNode; }"}},suffixIcon:{defaultValue:null,description:"",name:"suffixIcon",required:!1,type:{name:"ReactNode"}},clearIcon:{defaultValue:null,description:"Clear all icon\n@deprecated Please use `allowClear` instead",name:"clearIcon",required:!1,type:{name:"RenderNode"}},removeIcon:{defaultValue:null,description:"Selector remove icon",name:"removeIcon",required:!1,type:{name:"RenderNode"}},dropdownStyle:{defaultValue:null,description:"",name:"dropdownStyle",required:!1,type:{name:"CSSProperties"}},dropdownClassName:{defaultValue:null,description:"@deprecated Please use `popupClassName` instead",name:"dropdownClassName",required:!1,type:{name:"string"}},dropdownMatchSelectWidth:{defaultValue:null,description:"@deprecated Please use `popupMatchSelectWidth` instead",name:"dropdownMatchSelectWidth",required:!1,type:{name:"number | boolean"}},dropdownRender:{defaultValue:null,description:"",name:"dropdownRender",required:!1,type:{name:"((menu: ReactElement<unknown, string | JSXElementConstructor<any>>) => ReactElement<unknown, string | JSXElementConstructor<any>>)"}},dropdownAlign:{defaultValue:null,description:"",name:"dropdownAlign",required:!1,type:{name:"AlignType"}},getPopupContainer:{defaultValue:null,description:"",name:"getPopupContainer",required:!1,type:{name:"RenderDOMFunc"}},showAction:{defaultValue:null,description:"",name:"showAction",required:!1,type:{name:'("focus" | "click")[]'}},onPopupScroll:{defaultValue:null,description:"",name:"onPopupScroll",required:!1,type:{name:"UIEventHandler<HTMLDivElement>"}},onInputKeyDown:{defaultValue:null,description:"",name:"onInputKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},fieldNames:{defaultValue:null,description:`TreeSelect field names
There is confusion in the Antd treeSelect props between label and title.
For clarity, we mean title is the name of the node, and label is a display of the selected node`,name:"fieldNames",required:!1,type:{name:"Partial<IFieldNames>"}},inputValue:{defaultValue:null,description:"@deprecated Use `searchValue` instead",name:"inputValue",required:!1,type:{name:"string"}},onDeselect:{defaultValue:null,description:"",name:"onDeselect",required:!1,type:{name:"((value: unknown, option: DataNode) => void)"}},virtual:{defaultValue:null,description:"",name:"virtual",required:!1,type:{name:"boolean"}},listHeight:{defaultValue:null,description:"",name:"listHeight",required:!1,type:{name:"number"}},listItemHeight:{defaultValue:null,description:"",name:"listItemHeight",required:!1,type:{name:"number"}},maxCount:{defaultValue:null,description:"",name:"maxCount",required:!1,type:{name:"number"}},bordered:{defaultValue:null,description:"@deprecated Use `variant` instead.",name:"bordered",required:!1,type:{name:"boolean"}},popupClassName:{defaultValue:null,description:"",name:"popupClassName",required:!1,type:{name:"string"}},popupMatchSelectWidth:{defaultValue:null,description:"",name:"popupMatchSelectWidth",required:!1,type:{name:"number | boolean"}},ref:{defaultValue:null,description:"Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null`\n(or call the ref with `null` if you passed a callback ref).\n@see {@link https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom React Docs}",name:"ref",required:!1,type:{name:"Ref<BaseSelectRef>"}},apiRef:{defaultValue:null,description:"A mutable object to merge with these controls api",name:"apiRef",required:!1,type:{name:"ITreeSelectApi"}},buttonsRowStyle:{defaultValue:null,description:"Buttons row style",name:"buttonsRowStyle",required:!1,type:{name:"CSSProperties"}},buttonsRowStyles:{defaultValue:null,description:"Buttons row styles for each block (left, center, right)",name:"buttonsRowStyles",required:!1,type:{name:"{ leftBlockStyle?: CSSProperties; centerBlockStyle?: CSSProperties; rightBlockStyle?: CSSProperties | undefined; } | undefined"}},onDataFetchSuccess:{defaultValue:null,description:"fires when the TreeSelect fetch success",name:"onDataFetchSuccess",required:!1,type:{name:"((result: { data: ITreeSelectNode<Record<string, unknown>>[]; }, api: ITreeSelectApi) => boolean | void)"}},onDataFetchError:{defaultValue:null,description:"fires when the TreeSelect fetch failed",name:"onDataFetchError",required:!1,type:{name:"((message: string, code: number, api: ITreeSelectApi) => boolean | void)"}},onDataFetchComplete:{defaultValue:null,description:"fires after the completion of fetching the data, regardless of the result",name:"onDataFetchComplete",required:!1,type:{name:"((api: ITreeSelectApi) => boolean | void)"}},onDelete:{defaultValue:null,description:"Callback executed when selected node delete",name:"onDelete",required:!1,type:{name:"((node: ITreeSelectNode<Record<string, unknown>>, api: ITreeSelectApi) => void | ITreeSelectDeletePromise)"}},headerLabel:{defaultValue:null,description:"Label in header buttons row",name:"headerLabel",required:!1,type:{name:"ReactNode"}},buttonsSize:{defaultValue:null,description:"Header buttons size. Default: 'small'",name:"buttonsSize",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"middle"'},{value:'"large"'}]}},buttonsIconsOnly:{defaultValue:null,description:"If true, only button icons will be displayed, without title (default true)",name:"buttonsIconsOnly",required:!1,type:{name:"boolean"}},buttonsPosition:{defaultValue:null,description:"Header buttons size. Default: 'right'",name:"buttonsPosition",required:!1,type:{name:"enum",value:[{value:'"center"'},{value:'"left"'},{value:'"right"'}]}},editFormProps:{defaultValue:null,description:"Edit item controls props. If not set then component not editable",name:"editFormProps",required:!1,type:{name:"IDFormModalProps"}},confirmDelete:{defaultValue:null,description:"Should confirm before delete",name:"confirmDelete",required:!1,type:{name:"boolean"}},treeLine:{defaultValue:null,description:"",name:"treeLine",required:!1,type:{name:"boolean | { showLeafIcon: TreeLeafIcon; }"}},switcherIcon:{defaultValue:null,description:"",name:"switcherIcon",required:!1,type:{name:"string | number | bigint | boolean | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ... 5 more ..."}},filterTreeNode:{defaultValue:null,description:"Custom filter",name:"filterTreeNode",required:!1,type:{name:"((boolean | ((inputValue: string, treeNode: ITreeSelectNode<Record<string, unknown>>) => boolean)) & (boolean | ((inputValue: string, treeNode: DataNode) => boolean)))"}},treeNodeFilterProp:{defaultValue:null,description:"",name:"treeNodeFilterProp",required:!1,type:{name:"string"}},showCheckedStrategy:{defaultValue:null,description:"",name:"showCheckedStrategy",required:!1,type:{name:"enum",value:[{value:'"SHOW_ALL"'},{value:'"SHOW_PARENT"'},{value:'"SHOW_CHILD"'}]}},treeNodeLabelProp:{defaultValue:null,description:"",name:"treeNodeLabelProp",required:!1,type:{name:"string"}},treeCheckable:{defaultValue:null,description:"",name:"treeCheckable",required:!1,type:{name:"ReactNode"}},treeCheckStrictly:{defaultValue:null,description:"",name:"treeCheckStrictly",required:!1,type:{name:"boolean"}},treeDataSimpleMode:{defaultValue:null,description:"",name:"treeDataSimpleMode",required:!1,type:{name:"boolean | SimpleModeConfig"}},loadData:{defaultValue:null,description:"",name:"loadData",required:!1,type:{name:"((dataNode: LegacyDataNode) => Promise<unknown>)"}},treeLoadedKeys:{defaultValue:null,description:"",name:"treeLoadedKeys",required:!1,type:{name:"SafeKey[]"}},onTreeLoad:{defaultValue:null,description:"",name:"onTreeLoad",required:!1,type:{name:"((loadedKeys: SafeKey[]) => void)"}},onTreeExpand:{defaultValue:null,description:"",name:"onTreeExpand",required:!1,type:{name:"((expandedKeys: SafeKey[]) => void)"}},treeExpandAction:{defaultValue:null,description:"",name:"treeExpandAction",required:!1,type:{name:"ExpandAction"}},listItemScrollOffset:{defaultValue:null,description:"",name:"listItemScrollOffset",required:!1,type:{name:"number"}},treeIcon:{defaultValue:null,description:"",name:"treeIcon",required:!1,type:{name:"IconType"}},defaultExpandAll:{defaultValue:null,description:"Expand all nodes by default (default true)",name:"defaultExpandAll",required:!1,type:{name:"boolean"}},defaultExpandedKeys:{defaultValue:null,description:"Default expanded keys",name:"defaultExpandedKeys",required:!1,type:{name:"IKey[]"}},expandedKeys:{defaultValue:null,description:"Expanded keys",name:"expandedKeys",required:!1,type:{name:"IKey[]"}},titleRender:{defaultValue:null,description:`Customize tree node title render
You can use the built-in treeNodeLabelProp method, but it has a significant drawback:
- one render used for renders nodes list and selected value together. This behavior cannot be changed
If you want different renders, use labelRender and titleRender`,name:"titleRender",required:!1,type:{name:"((treeNode: ITreeSelectNode<Record<string, unknown>>) => ReactNode)"}},componentId:{defaultValue:null,description:"Tree TreeSelect id",name:"componentId",required:!1,type:{name:"string"}},selectedRender:{defaultValue:null,description:"Customize selected node label render",name:"selectedRender",required:!1,type:{name:"((treeNode: ITreeSelectNode<Record<string, unknown>>) => ReactNode)"}},groupsMode:{defaultValue:null,description:"Groups only has children. Group is node which has no isLeaf:true property",name:"groupsMode",required:!1,type:{name:"boolean"}},selectNewNode:{defaultValue:null,description:"Should select new node after create, clone or delete node",name:"selectNewNode",required:!1,type:{name:"boolean"}},sortOnChange:{defaultValue:null,description:"Sort nodes on change (create new or update)",name:"sortOnChange",required:!1,type:{name:"boolean"}},sortComparator:{defaultValue:null,description:"Sort comparator",name:"sortComparator",required:!1,type:{name:"(keyof ITreeSelectNodeBase)[] | ((a: ITreeSelectNode<Record<string, unknown>>, b: ITreeSelectNode<Record<string, unknown>>) => number)"}},fetchMode:{defaultValue:null,description:"Start fetching remote data on load control or on use control (example, open dropdown). Default OnLoad",name:"fetchMode",required:!1,type:{name:"enum",value:[{value:'"onLoad"'},{value:'"onUse"'},{value:'"onUseForce"'}]}},minSearchLength:{defaultValue:null,description:"Minimum length of search string before fetch data",name:"minSearchLength",required:!1,type:{name:"number"}},debounce:{defaultValue:null,description:"debounce in ms",name:"debounce",required:!1,type:{name:"number"}},dataMutator:{defaultValue:null,description:"Data mutator function (mutates original data)",name:"dataMutator",required:!1,type:{name:"(<T extends object>(node: T) => ITreeSelectNode<Record<string, unknown>>)"}},buttonsRowWrapperStyle:{defaultValue:null,description:"Buttons row wrapper style",name:"buttonsRowWrapperStyle",required:!1,type:{name:"CSSProperties"}},editGroupFormProps:{defaultValue:null,description:"Edit item group controls props. If not set then component not editable",name:"editGroupFormProps",required:!1,type:{name:"IDFormModalProps"}},nodeDeleteMessage:{defaultValue:null,description:"Confirm message before node delete",name:"nodeDeleteMessage",required:!1,type:{name:"ReactNode"}},noCacheFetchedData:{defaultValue:null,description:"Loaded data without parameters (like searchString) will not be cached",name:"noCacheFetchedData",required:!1,type:{name:"boolean"}},onGetLabelCallback:{defaultValue:null,description:"Callback to get the label of the node's set value. Called when the value set in the TreeSelect is changed",name:"onGetLabelCallback",required:!1,type:{name:"((key: IKey, dataSet: ITreeSelectNode<Record<string, unknown>>[]) => ReactNode)"}}}}}catch{}try{treeSelectComponent.displayName="treeSelectComponent",treeSelectComponent.__docgenInfo={description:"DForm TreeSelect field",displayName:"treeSelectComponent",props:{dataSet:{defaultValue:null,description:"Data set for TreeSelect field",name:"dataSet",required:!1,type:{name:"ITreeSelectNode[] | ((field: TreeSelectField) => ITreeSelectNode[])"}},valueType:{defaultValue:null,description:`Value type of TreeSelect field which will be used in form (default: node)
- 'key' - value will react key (string | number | bigint)
- 'labeledValue' - value will TreeSelect labeled value {value: string | number | bigint, label: ReactNode}
- 'node' - value will TreeSelect node, for example {id:string, title:string, ...}`,name:"valueType",required:!1,type:{name:"enum",value:[{value:'"key"'},{value:'"labeledValue"'},{value:'"node"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"((valueType: ILabeledValue | ILabeledValue[] | null, keys: IKey[], nodes: ITreeSelectNode<Record<string, unknown>>[], args_3: TreeSelectField) => void)"}},onDataSetChanged:{defaultValue:null,description:"Fires when the TreeSelect dataSet is changed",name:"onDataSetChanged",required:!1,type:{name:"((dataSet: ITreeSelectNode<Record<string, unknown>>[], args_1: TreeSelectField) => void)"}},onDataFetch:{defaultValue:null,description:"fires when the TreeSelect trying to fetch data",name:"onDataFetch",required:!1,type:{name:"((search: string, api: ITreeSelectApi, args_2: TreeSelectField) => ITreeSelectSourcePromise)"}},onReady:{defaultValue:null,description:"Fires when the component is ready for use (when it fully downloaded all the data, if necessary)",name:"onReady",required:!1,type:{name:"((args_0: TreeSelectField) => void)"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => TreeSelectField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},itemClassName:{defaultValue:null,description:"Field item class name (unlike className, this is the name of the class of the field item container)",name:"itemClassName",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"Field class name (directly the field itself, not the container)",name:"className",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"Field default value",name:"defaultValue",required:!1,type:{name:"ITreeSelectValue"}},hidden:{defaultValue:null,description:"Whether the field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"Whether the field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:`Whether the field default state is readonly
Is TreeSelect read only`,name:"readOnly",required:!1,type:{name:"boolean"}},nonEditable:{defaultValue:null,description:"Whether the field can not be edited (the field will have readOnly or disabled state if formMode is 'update')",name:"nonEditable",required:!1,type:{name:'boolean | "disabled" | "readOnly"'}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: ITreeSelectValue, prevValue: ITreeSelectValue, field: TreeSelectField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: TreeSelectField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: TreeSelectField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: ITreeSelectValue, error: string, isSubmit: boolean, field: TreeSelectField) => void)"}},onFieldDataFetch:{defaultValue:null,description:"fires when the field trying to fetch data",name:"onFieldDataFetch",required:!1,type:{name:"((field: TreeSelectField) => IDFormDataSourcePromise)"}},onFieldDataFetchSuccess:{defaultValue:null,description:"fires when the field fetch success",name:"onFieldDataFetchSuccess",required:!1,type:{name:"((result: { data: Record<string, any>; }, field: TreeSelectField) => void)"}},onFieldDataFetchError:{defaultValue:null,description:"fires when the field fetch failed",name:"onFieldDataFetchError",required:!1,type:{name:"((error: IError, field: TreeSelectField) => void)"}},prefix:{defaultValue:null,description:"",name:"prefix",required:!1,type:{name:"ReactNode"}},size:{defaultValue:null,description:"",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"middle"'},{value:'"large"'}]}},maxLength:{defaultValue:null,description:"",name:"maxLength",required:!1,type:{name:"number"}},multiple:{defaultValue:null,description:"",name:"multiple",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"",name:"id",required:!1,type:{name:"string"}},tabIndex:{defaultValue:null,description:"",name:"tabIndex",required:!1,type:{name:"number"}},title:{defaultValue:null,description:"",name:"title",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLElement>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLElement>"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLDivElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLDivElement>"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLDivElement>"}},onMouseDown:{defaultValue:null,description:"",name:"onMouseDown",required:!1,type:{name:"MouseEventHandler<HTMLDivElement>"}},onMouseEnter:{defaultValue:null,description:"",name:"onMouseEnter",required:!1,type:{name:"MouseEventHandler<HTMLDivElement>"}},onMouseLeave:{defaultValue:null,description:"",name:"onMouseLeave",required:!1,type:{name:"MouseEventHandler<HTMLDivElement>"}},onSelect:{defaultValue:null,description:"",name:"onSelect",required:!1,type:{name:"((value: unknown, option: DataNode) => void)"}},prefixCls:{defaultValue:null,description:"",name:"prefixCls",required:!1,type:{name:"string"}},builtinPlacements:{defaultValue:null,description:"",name:"builtinPlacements",required:!1,type:{name:"BuildInPlacements"}},placement:{defaultValue:null,description:"",name:"placement",required:!1,type:{name:"enum",value:[{value:'"bottomLeft"'},{value:'"bottomRight"'},{value:'"topLeft"'},{value:'"topRight"'}]}},transitionName:{defaultValue:null,description:"",name:"transitionName",required:!1,type:{name:"string"}},animation:{defaultValue:null,description:"",name:"animation",required:!1,type:{name:"string"}},showArrow:{defaultValue:null,description:"@deprecated `showArrow` is deprecated which will be removed in next major version. It will be a\ndefault behavior, you can hide it by setting `suffixIcon` to null.",name:"showArrow",required:!1,type:{name:"boolean"}},buttons:{defaultValue:null,description:"Header editor buttons",name:"buttons",required:!1,type:{name:'Record<"view" | "create" | "update" | "clone" | "delete" | "createGroup" | "arrowUp" | "arrowDown", ITreeSelectButton | null> | ITreeSelectButtons'}},language:{defaultValue:null,description:"Language",name:"language",required:!1,type:{name:"enum",value:[{value:'"en_US"'},{value:'"ru_RU"'},{value:'"zh_CN"'}]}},translation:{defaultValue:null,description:"Custom translation",name:"translation",required:!1,type:{name:"Partial<{ view: string; viewGroup: string; viewRecord: string; viewRecordsGroup: string; create: string; createRecord: string; createGroup: string; createRecordsGroup: string; edit: string; editGroup: string; ... 19 more ...; dataNotFound: string; }>"}},status:{defaultValue:null,description:"",name:"status",required:!1,type:{name:"enum",value:[{value:'""'},{value:'"warning"'},{value:'"error"'}]}},variant:{defaultValue:{value:'"outlined"'},description:"@since 5.13.0",name:"variant",required:!1,type:{name:"enum",value:[{value:'"outlined"'},{value:'"borderless"'},{value:'"filled"'},{value:'"underlined"'}]}},loading:{defaultValue:null,description:"",name:"loading",required:!1,type:{name:"boolean"}},rootClassName:{defaultValue:null,description:"",name:"rootClassName",required:!1,type:{name:"string"}},getRawInputElement:{defaultValue:null,description:"@private Internal usage. Do not use in your production.",name:"getRawInputElement",required:!1,type:{name:"(() => JSX.Element)"}},searchValue:{defaultValue:null,description:"",name:"searchValue",required:!1,type:{name:"string"}},autoClearSearchValue:{defaultValue:null,description:"",name:"autoClearSearchValue",required:!1,type:{name:"boolean"}},onSearch:{defaultValue:null,description:"",name:"onSearch",required:!1,type:{name:"((value: string) => void)"}},showSearch:{defaultValue:null,description:"",name:"showSearch",required:!1,type:{name:"boolean"}},tagRender:{defaultValue:null,description:"",name:"tagRender",required:!1,type:{name:"((props: CustomTagProps) => ReactElement<unknown, string | JSXElementConstructor<any>>)"}},direction:{defaultValue:null,description:"",name:"direction",required:!1,type:{name:"enum",value:[{value:'"ltr"'},{value:'"rtl"'}]}},notFoundContent:{defaultValue:null,description:"",name:"notFoundContent",required:!1,type:{name:"ReactNode"}},onClear:{defaultValue:null,description:"",name:"onClear",required:!1,type:{name:"(() => void)"}},choiceTransitionName:{defaultValue:null,description:"",name:"choiceTransitionName",required:!1,type:{name:"string"}},open:{defaultValue:null,description:"",name:"open",required:!1,type:{name:"boolean"}},defaultOpen:{defaultValue:null,description:"",name:"defaultOpen",required:!1,type:{name:"boolean"}},onDropdownVisibleChange:{defaultValue:null,description:"",name:"onDropdownVisibleChange",required:!1,type:{name:"((open: boolean) => void)"}},maxTagTextLength:{defaultValue:null,description:"",name:"maxTagTextLength",required:!1,type:{name:"number"}},maxTagCount:{defaultValue:null,description:"",name:"maxTagCount",required:!1,type:{name:'number | "responsive"'}},maxTagPlaceholder:{defaultValue:null,description:"",name:"maxTagPlaceholder",required:!1,type:{name:"ReactNode | ((omittedValues: DisplayValueType[]) => ReactNode)"}},tokenSeparators:{defaultValue:null,description:"",name:"tokenSeparators",required:!1,type:{name:"string[]"}},allowClear:{defaultValue:null,description:"",name:"allowClear",required:!1,type:{name:"boolean | { clearIcon?: RenderNode; }"}},suffixIcon:{defaultValue:null,description:"",name:"suffixIcon",required:!1,type:{name:"ReactNode"}},clearIcon:{defaultValue:null,description:"Clear all icon\n@deprecated Please use `allowClear` instead",name:"clearIcon",required:!1,type:{name:"RenderNode"}},removeIcon:{defaultValue:null,description:"Selector remove icon",name:"removeIcon",required:!1,type:{name:"RenderNode"}},dropdownStyle:{defaultValue:null,description:"",name:"dropdownStyle",required:!1,type:{name:"CSSProperties"}},dropdownClassName:{defaultValue:null,description:"@deprecated Please use `popupClassName` instead",name:"dropdownClassName",required:!1,type:{name:"string"}},dropdownMatchSelectWidth:{defaultValue:null,description:"@deprecated Please use `popupMatchSelectWidth` instead",name:"dropdownMatchSelectWidth",required:!1,type:{name:"number | boolean"}},dropdownRender:{defaultValue:null,description:"",name:"dropdownRender",required:!1,type:{name:"((menu: ReactElement<unknown, string | JSXElementConstructor<any>>) => ReactElement<unknown, string | JSXElementConstructor<any>>)"}},dropdownAlign:{defaultValue:null,description:"",name:"dropdownAlign",required:!1,type:{name:"AlignType"}},getPopupContainer:{defaultValue:null,description:"",name:"getPopupContainer",required:!1,type:{name:"RenderDOMFunc"}},showAction:{defaultValue:null,description:"",name:"showAction",required:!1,type:{name:'("focus" | "click")[]'}},onPopupScroll:{defaultValue:null,description:"",name:"onPopupScroll",required:!1,type:{name:"UIEventHandler<HTMLDivElement>"}},onInputKeyDown:{defaultValue:null,description:"",name:"onInputKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},fieldNames:{defaultValue:null,description:`TreeSelect field names
There is confusion in the Antd treeSelect props between label and title.
For clarity, we mean title is the name of the node, and label is a display of the selected node`,name:"fieldNames",required:!1,type:{name:"Partial<IFieldNames>"}},inputValue:{defaultValue:null,description:"@deprecated Use `searchValue` instead",name:"inputValue",required:!1,type:{name:"string"}},onDeselect:{defaultValue:null,description:"",name:"onDeselect",required:!1,type:{name:"((value: unknown, option: DataNode) => void)"}},virtual:{defaultValue:null,description:"",name:"virtual",required:!1,type:{name:"boolean"}},listHeight:{defaultValue:null,description:"",name:"listHeight",required:!1,type:{name:"number"}},listItemHeight:{defaultValue:null,description:"",name:"listItemHeight",required:!1,type:{name:"number"}},maxCount:{defaultValue:null,description:"",name:"maxCount",required:!1,type:{name:"number"}},bordered:{defaultValue:null,description:"@deprecated Use `variant` instead.",name:"bordered",required:!1,type:{name:"boolean"}},popupClassName:{defaultValue:null,description:"",name:"popupClassName",required:!1,type:{name:"string"}},popupMatchSelectWidth:{defaultValue:null,description:"",name:"popupMatchSelectWidth",required:!1,type:{name:"number | boolean"}},ref:{defaultValue:null,description:"Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null`\n(or call the ref with `null` if you passed a callback ref).\n@see {@link https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom React Docs}",name:"ref",required:!1,type:{name:"Ref<BaseSelectRef>"}},apiRef:{defaultValue:null,description:"A mutable object to merge with these controls api",name:"apiRef",required:!1,type:{name:"ITreeSelectApi"}},buttonsRowStyle:{defaultValue:null,description:"Buttons row style",name:"buttonsRowStyle",required:!1,type:{name:"CSSProperties"}},buttonsRowStyles:{defaultValue:null,description:"Buttons row styles for each block (left, center, right)",name:"buttonsRowStyles",required:!1,type:{name:"{ leftBlockStyle?: CSSProperties; centerBlockStyle?: CSSProperties; rightBlockStyle?: CSSProperties | undefined; } | undefined"}},onDataFetchSuccess:{defaultValue:null,description:"fires when the TreeSelect fetch success",name:"onDataFetchSuccess",required:!1,type:{name:"((result: { data: ITreeSelectNode<Record<string, unknown>>[]; }, api: ITreeSelectApi) => boolean | void)"}},onDataFetchError:{defaultValue:null,description:"fires when the TreeSelect fetch failed",name:"onDataFetchError",required:!1,type:{name:"((message: string, code: number, api: ITreeSelectApi) => boolean | void)"}},onDataFetchComplete:{defaultValue:null,description:"fires after the completion of fetching the data, regardless of the result",name:"onDataFetchComplete",required:!1,type:{name:"((api: ITreeSelectApi) => boolean | void)"}},onDelete:{defaultValue:null,description:"Callback executed when selected node delete",name:"onDelete",required:!1,type:{name:"((node: ITreeSelectNode<Record<string, unknown>>, api: ITreeSelectApi) => void | ITreeSelectDeletePromise)"}},headerLabel:{defaultValue:null,description:"Label in header buttons row",name:"headerLabel",required:!1,type:{name:"ReactNode"}},buttonsSize:{defaultValue:null,description:"Header buttons size. Default: 'small'",name:"buttonsSize",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"middle"'},{value:'"large"'}]}},buttonsIconsOnly:{defaultValue:null,description:"If true, only button icons will be displayed, without title (default true)",name:"buttonsIconsOnly",required:!1,type:{name:"boolean"}},buttonsPosition:{defaultValue:null,description:"Header buttons size. Default: 'right'",name:"buttonsPosition",required:!1,type:{name:"enum",value:[{value:'"center"'},{value:'"left"'},{value:'"right"'}]}},editFormProps:{defaultValue:null,description:"Edit item controls props. If not set then component not editable",name:"editFormProps",required:!1,type:{name:"IDFormModalProps"}},confirmDelete:{defaultValue:null,description:"Should confirm before delete",name:"confirmDelete",required:!1,type:{name:"boolean"}},treeLine:{defaultValue:null,description:"",name:"treeLine",required:!1,type:{name:"boolean | { showLeafIcon: TreeLeafIcon; }"}},switcherIcon:{defaultValue:null,description:"",name:"switcherIcon",required:!1,type:{name:"string | number | bigint | boolean | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ... 5 more ..."}},filterTreeNode:{defaultValue:null,description:"Custom filter",name:"filterTreeNode",required:!1,type:{name:"((boolean | ((inputValue: string, treeNode: ITreeSelectNode<Record<string, unknown>>) => boolean)) & (boolean | ((inputValue: string, treeNode: DataNode) => boolean)))"}},treeNodeFilterProp:{defaultValue:null,description:"",name:"treeNodeFilterProp",required:!1,type:{name:"string"}},showCheckedStrategy:{defaultValue:null,description:"",name:"showCheckedStrategy",required:!1,type:{name:"enum",value:[{value:'"SHOW_ALL"'},{value:'"SHOW_PARENT"'},{value:'"SHOW_CHILD"'}]}},treeNodeLabelProp:{defaultValue:null,description:"",name:"treeNodeLabelProp",required:!1,type:{name:"string"}},treeCheckable:{defaultValue:null,description:"",name:"treeCheckable",required:!1,type:{name:"ReactNode"}},treeCheckStrictly:{defaultValue:null,description:"",name:"treeCheckStrictly",required:!1,type:{name:"boolean"}},treeDataSimpleMode:{defaultValue:null,description:"",name:"treeDataSimpleMode",required:!1,type:{name:"boolean | SimpleModeConfig"}},loadData:{defaultValue:null,description:"",name:"loadData",required:!1,type:{name:"((dataNode: LegacyDataNode) => Promise<unknown>)"}},treeLoadedKeys:{defaultValue:null,description:"",name:"treeLoadedKeys",required:!1,type:{name:"SafeKey[]"}},onTreeLoad:{defaultValue:null,description:"",name:"onTreeLoad",required:!1,type:{name:"((loadedKeys: SafeKey[]) => void)"}},onTreeExpand:{defaultValue:null,description:"",name:"onTreeExpand",required:!1,type:{name:"((expandedKeys: SafeKey[]) => void)"}},treeExpandAction:{defaultValue:null,description:"",name:"treeExpandAction",required:!1,type:{name:"ExpandAction"}},listItemScrollOffset:{defaultValue:null,description:"",name:"listItemScrollOffset",required:!1,type:{name:"number"}},treeIcon:{defaultValue:null,description:"",name:"treeIcon",required:!1,type:{name:"IconType"}},defaultExpandAll:{defaultValue:null,description:"Expand all nodes by default (default true)",name:"defaultExpandAll",required:!1,type:{name:"boolean"}},defaultExpandedKeys:{defaultValue:null,description:"Default expanded keys",name:"defaultExpandedKeys",required:!1,type:{name:"IKey[]"}},expandedKeys:{defaultValue:null,description:"Expanded keys",name:"expandedKeys",required:!1,type:{name:"IKey[]"}},titleRender:{defaultValue:null,description:`Customize tree node title render
You can use the built-in treeNodeLabelProp method, but it has a significant drawback:
- one render used for renders nodes list and selected value together. This behavior cannot be changed
If you want different renders, use labelRender and titleRender`,name:"titleRender",required:!1,type:{name:"((treeNode: ITreeSelectNode<Record<string, unknown>>) => ReactNode)"}},componentId:{defaultValue:null,description:"Tree TreeSelect id",name:"componentId",required:!1,type:{name:"string"}},selectedRender:{defaultValue:null,description:"Customize selected node label render",name:"selectedRender",required:!1,type:{name:"((treeNode: ITreeSelectNode<Record<string, unknown>>) => ReactNode)"}},groupsMode:{defaultValue:null,description:"Groups only has children. Group is node which has no isLeaf:true property",name:"groupsMode",required:!1,type:{name:"boolean"}},selectNewNode:{defaultValue:null,description:"Should select new node after create, clone or delete node",name:"selectNewNode",required:!1,type:{name:"boolean"}},sortOnChange:{defaultValue:null,description:"Sort nodes on change (create new or update)",name:"sortOnChange",required:!1,type:{name:"boolean"}},sortComparator:{defaultValue:null,description:"Sort comparator",name:"sortComparator",required:!1,type:{name:"(keyof ITreeSelectNodeBase)[] | ((a: ITreeSelectNode<Record<string, unknown>>, b: ITreeSelectNode<Record<string, unknown>>) => number)"}},fetchMode:{defaultValue:null,description:"Start fetching remote data on load control or on use control (example, open dropdown). Default OnLoad",name:"fetchMode",required:!1,type:{name:"enum",value:[{value:'"onLoad"'},{value:'"onUse"'},{value:'"onUseForce"'}]}},minSearchLength:{defaultValue:null,description:"Minimum length of search string before fetch data",name:"minSearchLength",required:!1,type:{name:"number"}},debounce:{defaultValue:null,description:"debounce in ms",name:"debounce",required:!1,type:{name:"number"}},dataMutator:{defaultValue:null,description:"Data mutator function (mutates original data)",name:"dataMutator",required:!1,type:{name:"(<T extends object>(node: T) => ITreeSelectNode<Record<string, unknown>>)"}},buttonsRowWrapperStyle:{defaultValue:null,description:"Buttons row wrapper style",name:"buttonsRowWrapperStyle",required:!1,type:{name:"CSSProperties"}},editGroupFormProps:{defaultValue:null,description:"Edit item group controls props. If not set then component not editable",name:"editGroupFormProps",required:!1,type:{name:"IDFormModalProps"}},nodeDeleteMessage:{defaultValue:null,description:"Confirm message before node delete",name:"nodeDeleteMessage",required:!1,type:{name:"ReactNode"}},noCacheFetchedData:{defaultValue:null,description:"Loaded data without parameters (like searchString) will not be cached",name:"noCacheFetchedData",required:!1,type:{name:"boolean"}},onGetLabelCallback:{defaultValue:null,description:"Callback to get the label of the node's set value. Called when the value set in the TreeSelect is changed",name:"onGetLabelCallback",required:!1,type:{name:"((key: IKey, dataSet: ITreeSelectNode<Record<string, unknown>>[]) => ReactNode)"}}}}}catch{}const _e={title:"DForm/Fields/TreeSelect",component:m,tags:["autodocs"],parameters:{docs:{source:{language:"tsx",format:!0,code:`
                    import React from "react";
                    import {DForm} from @krinopotam/ui-kit/dForm";
                    import {ITreeSelectFieldProps, TreeSelectField} from @krinopotam/ui-kit/dForm/fields/treeSelect/treeSelectField";
                    import {TreeSelectDataSet} from "../../../datasets/treeSelect";
                    type IComponent = ITreeSelectFieldProps
                    /** DForm TreeSelect field */
                    export const TreeSelectComponent = (props: IComponent): React.JSX.Element => <DForm
                        buttons={null}
                        fieldsProps={
                            {field1: {...props, dataSet:TreeSelectDataSet, component: TreeSelectField}}
                        }
                    />
                    export default TreeSelectComponent
                `}}}},i={args:{label:"TreeSelect field",onReadyStateChanged:o(),onChange:o(),onDataFetch:o()}};var h,y,g;i.parameters={...i.parameters,docs:{...(h=i.parameters)==null?void 0:h.docs,source:{originalSource:`{
  args: {
    label: 'TreeSelect field',
    onReadyStateChanged: fn(),
    onChange: fn(),
    onDataFetch: fn()
  }
}`,...(g=(y=i.parameters)==null?void 0:y.docs)==null?void 0:g.source}}};const Ae=["Playground"];export{i as Playground,Ae as __namedExportsOrder,_e as default};
