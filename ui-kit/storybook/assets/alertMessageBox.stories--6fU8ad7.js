import{j as e}from"./extends-BRD_ACZV.js";import{S as d,B as a}from"./button-Iix8LbRU.js";import{u as f,m as g}from"./updateModalTheme-CFQLIXxh.js";import{r as i}from"./index-uubelm5h.js";import"./compact-item-IaHZmqF4.js";import"./useToken--rxRg63T.js";import"./index-DaxZXI7c.js";import"./assertThisInitialized-C7eLZ5Vw.js";import"./button-DvzT6zDE.js";import"./index-CB3XXCqd.js";import"./headerRender-Da1RH9v-.js";import"./index-WZmxnzc0.js";import"./ExclamationCircleFilled-rOw3n2gg.js";import"./pickAttrs-Ceb8JkZg.js";import"./context-CrsU2UZX.js";import"./wrapNativeSuper-CxOa5OEc.js";import"./motion-WmxowxVV.js";import"./CloseOutlined-xuSWusRf.js";import"./KeyCode-DNlgD2sM.js";import"./ContextIsolator-DTA0rjn8.js";import"./useClosable-DmZ-8Q3E.js";import"./zoom-CqB_wpkX.js";import"./DownOutlined-J6zIsiwY.js";import"./index-C9GPWzHg.js";import"./index-D3eZ-H7s.js";import"./buttonsRow-C57QUn79.js";import"./Sider-CY9JNDYe.js";import"./row-R-nZpFec.js";import"./roundedArrow-Cy_VYcsu.js";import"./colors-g_WWN96I.js";import"./getNanoId-DD8laUaD.js";import"./InfoCircleOutlined-rgXyzvM4.js";import"./QuestionCircleOutlined-BwsbN9TT.js";import"./index-0axGYSbf.js";const l=o=>{var s;f();const r=i.useRef(null);r.current&&((s=r.current)==null||s.update(o));const t=i.useCallback(m=>{r.current=g.alert({...o,colorType:m})},[o]);return e.jsxs(d,{children:[e.jsx(a,{onClick:()=>t(),children:"Open alert"}),e.jsx(a,{color:"primary",variant:"solid",onClick:()=>t("info"),children:"Open alert"}),e.jsx(a,{color:"warning",variant:"solid",onClick:()=>t("warning"),children:"Open alert"}),e.jsx(a,{color:"success",variant:"solid",onClick:()=>t("success"),children:"Open alert"}),e.jsx(a,{color:"danger",variant:"solid",onClick:()=>t("danger"),children:"Open alert"})]})},x=l;try{l.displayName="AlertMessageBoxComponent",l.__docgenInfo={description:"MessageBox Alert component",displayName:"AlertMessageBoxComponent",props:{okText:{defaultValue:null,description:"",name:"okText",required:!1,type:{name:"string"}},onOk:{defaultValue:null,description:"",name:"onOk",required:!1,type:{name:"((messageBox: MessageBoxApi) => boolean | void)"}},title:{defaultValue:null,description:"Form title",name:"title",required:!1,type:{name:"ReactNode"}},icon:{defaultValue:null,description:"Form icon",name:"icon",required:!1,type:{name:"ReactNode"}},content:{defaultValue:null,description:"Form content",name:"content",required:!1,type:{name:"ReactNode"}},colorType:{defaultValue:null,description:"Form type",name:"colorType",required:!1,type:{name:"enum",value:[{value:'"danger"'},{value:'"default"'},{value:'"primary"'},{value:'"info"'},{value:'"success"'},{value:'"warning"'}]}},buttons:{defaultValue:null,description:"Form buttons",name:"buttons",required:!1,type:{name:"IFormButtons"}},centered:{defaultValue:null,description:"Center modal",name:"centered",required:!1,type:{name:"boolean"}},closable:{defaultValue:null,description:"Whether a close (x) button is visible on top right of the modal dialog or not",name:"closable",required:!1,type:{name:"boolean"}},maskClosable:{defaultValue:null,description:"Whether to close the modal dialog when the mask (area outside the modal) is clicked",name:"maskClosable",required:!1,type:{name:"boolean"}},onAfterClose:{defaultValue:null,description:"After controls close callback",name:"onAfterClose",required:!1,type:{name:"(() => void)"}},onCrossClose:{defaultValue:null,description:"On form close by close cross pressed callback",name:"onCrossClose",required:!1,type:{name:"(() => void)"}},language:{defaultValue:null,description:"Language",name:"language",required:!1,type:{name:"enum",value:[{value:'"ru"'},{value:'"en"'},{value:'"cn"'}]}},translation:{defaultValue:null,description:"Custom translation",name:"translation",required:!1,type:{name:"Partial<{ ok: string; cancel: string; attention: string; processing: string; pleaseWait: string; }>"}}}}}catch{}try{alertMessageBox.displayName="alertMessageBox",alertMessageBox.__docgenInfo={description:"MessageBox Alert component",displayName:"alertMessageBox",props:{okText:{defaultValue:null,description:"",name:"okText",required:!1,type:{name:"string"}},onOk:{defaultValue:null,description:"",name:"onOk",required:!1,type:{name:"((messageBox: MessageBoxApi) => boolean | void)"}},title:{defaultValue:null,description:"Form title",name:"title",required:!1,type:{name:"ReactNode"}},icon:{defaultValue:null,description:"Form icon",name:"icon",required:!1,type:{name:"ReactNode"}},content:{defaultValue:null,description:"Form content",name:"content",required:!1,type:{name:"ReactNode"}},colorType:{defaultValue:null,description:"Form type",name:"colorType",required:!1,type:{name:"enum",value:[{value:'"danger"'},{value:'"default"'},{value:'"primary"'},{value:'"info"'},{value:'"success"'},{value:'"warning"'}]}},buttons:{defaultValue:null,description:"Form buttons",name:"buttons",required:!1,type:{name:"IFormButtons"}},centered:{defaultValue:null,description:"Center modal",name:"centered",required:!1,type:{name:"boolean"}},closable:{defaultValue:null,description:"Whether a close (x) button is visible on top right of the modal dialog or not",name:"closable",required:!1,type:{name:"boolean"}},maskClosable:{defaultValue:null,description:"Whether to close the modal dialog when the mask (area outside the modal) is clicked",name:"maskClosable",required:!1,type:{name:"boolean"}},onAfterClose:{defaultValue:null,description:"After controls close callback",name:"onAfterClose",required:!1,type:{name:"(() => void)"}},onCrossClose:{defaultValue:null,description:"On form close by close cross pressed callback",name:"onCrossClose",required:!1,type:{name:"(() => void)"}},language:{defaultValue:null,description:"Language",name:"language",required:!1,type:{name:"enum",value:[{value:'"ru"'},{value:'"en"'},{value:'"cn"'}]}},translation:{defaultValue:null,description:"Custom translation",name:"translation",required:!1,type:{name:"Partial<{ ok: string; cancel: string; attention: string; processing: string; pleaseWait: string; }>"}}}}}catch{}const Q={title:"Controls/MessageBox/Alert",component:x,tags:["autodocs"],parameters:{docs:{source:{language:"tsx",format:!0,code:`
                    import {Button, IButtonProps} from @krinopotam/ui-kit/button';
                    import {IModalAlertConfig, MessageBox, MessageBoxApi, useUpdateMessageBoxTheme} from @krinopotam/ui-kit/messageBox';
                    import {Space} from 'antd';
                    import React, {useCallback, useRef} from 'react';
                    type IComponent = IModalAlertConfig;
                    /** MessageBox Alert component */
                    export const AlertMessageBoxComponent = (props: IComponent): React.JSX.Element => {
                        useUpdateMessageBoxTheme(); //set current theme to messageBox
                        const curMessageBox = useRef<MessageBoxApi | null>(null);
                        if (curMessageBox.current) curMessageBox.current?.update(props);
                        const onClick = useCallback(
                            (colorType?: IButtonProps['color']) => {
                                curMessageBox.current = MessageBox.alert({...props, colorType: colorType});
                            },
                            [props]
                        );
                        return (
                            <Space>
                                <Button onClick={() => onClick()}>Open alert</Button>
                                <Button color="primary" variant="solid" onClick={() => onClick('info')}>
                                    Open alert
                                </Button>
                                <Button color="warning" variant="solid" onClick={() => onClick('warning')}>
                                    Open alert
                                </Button>
                                <Button color="success" variant="solid" onClick={() => onClick('success')}>
                                    Open alert
                                </Button>
                                <Button color="danger" variant="solid" onClick={() => onClick('danger')}>
                                    Open alert
                                </Button>
                            </Space>
                        );
                    };
                    export default AlertMessageBoxComponent;
                `}}}},n={args:{content:"Info"}};var u,c,p;n.parameters={...n.parameters,docs:{...(u=n.parameters)==null?void 0:u.docs,source:{originalSource:`{
  args: {
    content: 'Info'
  }
}`,...(p=(c=n.parameters)==null?void 0:c.docs)==null?void 0:p.source}}};const Y=["Alert"];export{n as Alert,Y as __namedExportsOrder,Q as default};
