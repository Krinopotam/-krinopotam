import{j as i}from"./extends-CKwpSh1k.js";import{B as g,D as S}from"./dForm-Dpc0z9QH.js";import"./index-DGqZ_Opy.js";import"./dayjs.min-BljPK31Q.js";import{r as l}from"./index-CTjT7uj6.js";import{S as V,a as b}from"./select-BZtvOJM4.js";import{f as w}from"./index-BNzM6CSE.js";import"./helpersObjects-NFjaQN06.js";import"./index-Boe84S0F.js";import"./index-DKKcxpSc.js";import"./compact-item-B2r7eKHn.js";import"./useToken-DuQNFAH6.js";import"./assertThisInitialized-C7eLZ5Vw.js";import"./index-56GSrRrr.js";import"./motion-D1Ok7SUs.js";import"./context-zxaTOXwp.js";import"./wrapNativeSuper-CxOa5OEc.js";import"./useVariants-bMUIY1dl.js";import"./index-BzgAe6ki.js";import"./motion-4S5rSXvC.js";import"./row-Bz4KYDPc.js";import"./roundedArrow-CdZeBiH2.js";import"./zoom-DgLa7ZOz.js";import"./colors-DKxxPweQ.js";import"./QuestionCircleOutlined-DItjCDaI.js";import"./ExclamationCircleFilled-BijZsmvo.js";import"./updateModalTheme-D0G8X0Wn.js";import"./modalRender-DBXPNrZq.js";import"./index-C1vctpir.js";import"./InfoCircleOutlined-B2Jjl6_Y.js";import"./button-C4WVVW6b.js";import"./button-dqH3xn1c.js";import"./buttonsRow-CcXG5Y8f.js";import"./Sider-C8lbNVsG.js";import"./KeyCode-DNlgD2sM.js";import"./DownOutlined-dRo7eB-m.js";import"./helpersString-BLksZHLM.js";import"./v4-CQkTLCs1.js";import"./index-BRV0Se7Z.js";import"./index-DrMe33ah.js";import"./CloseOutlined-RkEA9oNw.js";import"./useClosable-DReJefU5.js";import"./index-4vYY965U.js";import"./CheckOutlined-ChgTJtAc.js";import"./useIsDebugMode-B-VM_G4X.js";import"./_commonjs-dynamic-modules-TDtrdbi3.js";import"./useShowArrow-C_pd0j7x.js";import"./List-BvBwYMs3.js";import"./useIcons-UO6XAPnG.js";import"./SearchOutlined-9InG0_lL.js";import"./index-DuM-I7-B.js";const n=({field:t})=>{l.useSyncExternalStore(t.subscribe.bind(t),t.getSnapshot.bind(t));const e=t.getProps(),p=t.getValue(),m=l.useCallback((h,y)=>{t.isReady()&&(t.setValue(e.fullItemValue?y:h),t.setDirty(!0))},[t,e.fullItemValue]),f=l.useCallback(()=>{t.setTouched(!0)},[t]);l.useEffect(()=>{t.setReady(!0)},[t]);let r={};e.width&&(r={width:e.width});const c={...r,...e.style};return i.jsx(V,{dataSet:e.dataSet,allowClear:e.allowClear!==!1,autoClearSearchValue:e.autoClearSearchValue,autoFocus:e.autoFocus,defaultActiveFirstOption:e.defaultActiveFirstOption,defaultOpen:e.defaultOpen,disabled:t.isDisabled(),readOnly:t.isReadOnly(),fieldNames:e.fieldNames,filterOption:e.filterOption,filterSort:e.filterSort,labelInValue:e.labelInValue,listHeight:e.listHeight,loading:e.loading,maxTagCount:e.maxTagCount,maxTagPlaceholder:e.maxTagPlaceholder,maxTagTextLength:e.maxTagTextLength,menuItemSelectedIcon:e.menuItemSelectedIcon,mode:e.mode,notFoundContent:e.notFoundContent,optionFilterProp:e.optionFilterProp,optionLabelProp:e.optionLabelProp,placeholder:e.placeholder,placement:e.placement,popupClassName:e.popupClassName,removeIcon:e.removeIcon,showSearch:e.showSearch,suffixIcon:e.suffixIcon,tagRender:e.tagRender,tokenSeparators:e.tokenSeparators,value:p,virtual:e.virtual,style:c,onBlur:f,onChange:m,onSelect:e.onSelect,onDeselect:e.onDeselect})};try{n.displayName="SelectFieldRender",n.__docgenInfo={description:"",displayName:"SelectFieldRender",props:{field:{defaultValue:null,description:"",name:"field",required:!0,type:{name:"SelectField"}}}}}catch{}class q extends g{render(){return i.jsx(n,{field:this})}}const o=t=>i.jsx(S,{buttons:null,fieldsProps:{field1:{...t,dataSet:b,component:q}}}),C=o;try{o.displayName="SelectComponent",o.__docgenInfo={description:"DForm Select field",displayName:"SelectComponent",props:{fullItemValue:{defaultValue:null,description:"if true, then the entire elements (full node) will be written into the values",name:"fullItemValue",required:!1,type:{name:"boolean"}},dataSet:{defaultValue:null,description:"Select component options items",name:"dataSet",required:!1,type:{name:"ISelectOptions"}},allowClear:{defaultValue:null,description:"Allow clear and show clear button",name:"allowClear",required:!1,type:{name:"boolean | { clearIcon?: RenderNode; }"}},autoClearSearchValue:{defaultValue:null,description:"Whether the current search will be cleared on selecting an item. Only applies when mode is set to multiple or tags (default true)",name:"autoClearSearchValue",required:!1,type:{name:"boolean"}},defaultActiveFirstOption:{defaultValue:null,description:"Whether active first option by default",name:"defaultActiveFirstOption",required:!1,type:{name:"boolean"}},defaultOpen:{defaultValue:null,description:"Initial open state of dropdown",name:"defaultOpen",required:!1,type:{name:"boolean"}},value:{defaultValue:null,description:"Initial selected option",name:"value",required:!1,type:{name:"ISelectValue"}},popupClassName:{defaultValue:null,description:"The className of dropdown menu",name:"popupClassName",required:!1,type:{name:"string"}},dropdownRender:{defaultValue:null,description:"Customize dropdown content",name:"dropdownRender",required:!1,type:{name:"((menu: ReactElement<any, string | JSXElementConstructor<any>>) => ReactElement<any, string | JSXElementConstructor<any>>)"}},fieldNames:{defaultValue:null,description:"Customize node label, value, options field name",name:"fieldNames",required:!1,type:{name:"FieldNames"}},filterOption:{defaultValue:null,description:"If true, filter options by input, if value is function, filter options against it.",name:"filterOption",required:!1,type:{name:"boolean | FilterFunc<BaseOptionType | DefaultOptionType>"}},filterSort:{defaultValue:null,description:"Sort function for search options sorting, see Array sort compareFunction",name:"filterSort",required:!1,type:{name:"((optionA: BaseOptionType | DefaultOptionType, optionB: BaseOptionType | DefaultOptionType) => number)"}},labelInValue:{defaultValue:null,description:"Whether to embed label in value, turn the format of value from string to ( value: string, label: ReactNode )",name:"labelInValue",required:!1,type:{name:"boolean"}},listHeight:{defaultValue:null,description:"Config popup height (default 256)",name:"listHeight",required:!1,type:{name:"number"}},loading:{defaultValue:null,description:"Indicate loading state",name:"loading",required:!1,type:{name:"boolean"}},maxTagCount:{defaultValue:null,description:"Max tag count to show. responsive will cost render performance",name:"maxTagCount",required:!1,type:{name:'number | "responsive"'}},maxTagPlaceholder:{defaultValue:null,description:"Placeholder for not showing tags",name:"maxTagPlaceholder",required:!1,type:{name:"ReactNode | ((omittedValues: DisplayValueType[]) => ReactNode)"}},maxTagTextLength:{defaultValue:null,description:"Max tag text length to show",name:"maxTagTextLength",required:!1,type:{name:"number"}},menuItemSelectedIcon:{defaultValue:null,description:"The custom menuItemSelected icon with multiple options",name:"menuItemSelectedIcon",required:!1,type:{name:"RenderNode"}},mode:{defaultValue:null,description:"Set mode of Select",name:"mode",required:!1,type:{name:"enum",value:[{value:'"multiple"'},{value:'"tags"'}]}},notFoundContent:{defaultValue:null,description:"Specify content to show when no result matches",name:"notFoundContent",required:!1,type:{name:"ReactNode"}},optionFilterProp:{defaultValue:null,description:"Which prop value of option will be used for filter if filterOption is true. If options is set, it should be set to label",name:"optionFilterProp",required:!1,type:{name:"string"}},optionLabelProp:{defaultValue:null,description:"Which prop value of option will render as content of select.",name:"optionLabelProp",required:!1,type:{name:"string"}},placement:{defaultValue:null,description:"The position where the selection box pops up",name:"placement",required:!1,type:{name:"enum",value:[{value:'"bottomLeft"'},{value:'"bottomRight"'},{value:'"topLeft"'},{value:'"topRight"'}]}},removeIcon:{defaultValue:null,description:"The custom remove icon",name:"removeIcon",required:!1,type:{name:"RenderNode"}},showArrow:{defaultValue:null,description:"Whether to show the drop-down arrow: true(for single select), false(for multiple select)",name:"showArrow",required:!1,type:{name:"boolean"}},showSearch:{defaultValue:null,description:"Whether select is searchable: single: false, multiple: true",name:"showSearch",required:!1,type:{name:"boolean"}},suffixIcon:{defaultValue:null,description:"The custom suffix icon",name:"suffixIcon",required:!1,type:{name:"ReactNode"}},tagRender:{defaultValue:null,description:"Customize tag render, only applies when mode is set to multiple or tags",name:"tagRender",required:!1,type:{name:"((props: CustomTagProps) => ReactElement<any, string | JSXElementConstructor<any>>)"}},tokenSeparators:{defaultValue:null,description:'Separator used to tokenize, only applies when mode="tags"',name:"tokenSeparators",required:!1,type:{name:"string[]"}},virtual:{defaultValue:null,description:"Disable virtual scroll when set to false",name:"virtual",required:!1,type:{name:"boolean"}},onSelect:{defaultValue:null,description:"Fires when item selected",name:"onSelect",required:!1,type:{name:"((value: ISelectValue, option: ISelectNode<Record<string, unknown>> | ISelectNode<Record<string, unknown>>[]) => void)"}},onDeselect:{defaultValue:null,description:"Fires when item deselected",name:"onDeselect",required:!1,type:{name:"((value: ISelectValue, option: ISelectNode<Record<string, unknown>> | ISelectNode<Record<string, unknown>>[]) => void)"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => SelectField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},inlineGroup:{defaultValue:null,description:"inline group name",name:"inlineGroup",required:!1,type:{name:"string"}},hidden:{defaultValue:null,description:"Whether the field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"Whether the field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"Whether the field default state is readonly",name:"readOnly",required:!1,type:{name:"boolean"}},nonEditable:{defaultValue:null,description:"Whether the field can not be edited (the field will have readOnly state if formMode is 'update')",name:"nonEditable",required:!1,type:{name:"boolean"}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: unknown, prevValue: unknown, field: SelectField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: SelectField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: SelectField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: unknown, error: string, isSubmit: boolean, field: SelectField) => void)"}}}}}catch{}try{selectComponent.displayName="selectComponent",selectComponent.__docgenInfo={description:"DForm Select field",displayName:"selectComponent",props:{fullItemValue:{defaultValue:null,description:"if true, then the entire elements (full node) will be written into the values",name:"fullItemValue",required:!1,type:{name:"boolean"}},dataSet:{defaultValue:null,description:"Select component options items",name:"dataSet",required:!1,type:{name:"ISelectOptions"}},allowClear:{defaultValue:null,description:"Allow clear and show clear button",name:"allowClear",required:!1,type:{name:"boolean | { clearIcon?: RenderNode; }"}},autoClearSearchValue:{defaultValue:null,description:"Whether the current search will be cleared on selecting an item. Only applies when mode is set to multiple or tags (default true)",name:"autoClearSearchValue",required:!1,type:{name:"boolean"}},defaultActiveFirstOption:{defaultValue:null,description:"Whether active first option by default",name:"defaultActiveFirstOption",required:!1,type:{name:"boolean"}},defaultOpen:{defaultValue:null,description:"Initial open state of dropdown",name:"defaultOpen",required:!1,type:{name:"boolean"}},value:{defaultValue:null,description:"Initial selected option",name:"value",required:!1,type:{name:"ISelectValue"}},popupClassName:{defaultValue:null,description:"The className of dropdown menu",name:"popupClassName",required:!1,type:{name:"string"}},dropdownRender:{defaultValue:null,description:"Customize dropdown content",name:"dropdownRender",required:!1,type:{name:"((menu: ReactElement<any, string | JSXElementConstructor<any>>) => ReactElement<any, string | JSXElementConstructor<any>>)"}},fieldNames:{defaultValue:null,description:"Customize node label, value, options field name",name:"fieldNames",required:!1,type:{name:"FieldNames"}},filterOption:{defaultValue:null,description:"If true, filter options by input, if value is function, filter options against it.",name:"filterOption",required:!1,type:{name:"boolean | FilterFunc<BaseOptionType | DefaultOptionType>"}},filterSort:{defaultValue:null,description:"Sort function for search options sorting, see Array sort compareFunction",name:"filterSort",required:!1,type:{name:"((optionA: BaseOptionType | DefaultOptionType, optionB: BaseOptionType | DefaultOptionType) => number)"}},labelInValue:{defaultValue:null,description:"Whether to embed label in value, turn the format of value from string to ( value: string, label: ReactNode )",name:"labelInValue",required:!1,type:{name:"boolean"}},listHeight:{defaultValue:null,description:"Config popup height (default 256)",name:"listHeight",required:!1,type:{name:"number"}},loading:{defaultValue:null,description:"Indicate loading state",name:"loading",required:!1,type:{name:"boolean"}},maxTagCount:{defaultValue:null,description:"Max tag count to show. responsive will cost render performance",name:"maxTagCount",required:!1,type:{name:'number | "responsive"'}},maxTagPlaceholder:{defaultValue:null,description:"Placeholder for not showing tags",name:"maxTagPlaceholder",required:!1,type:{name:"ReactNode | ((omittedValues: DisplayValueType[]) => ReactNode)"}},maxTagTextLength:{defaultValue:null,description:"Max tag text length to show",name:"maxTagTextLength",required:!1,type:{name:"number"}},menuItemSelectedIcon:{defaultValue:null,description:"The custom menuItemSelected icon with multiple options",name:"menuItemSelectedIcon",required:!1,type:{name:"RenderNode"}},mode:{defaultValue:null,description:"Set mode of Select",name:"mode",required:!1,type:{name:"enum",value:[{value:'"multiple"'},{value:'"tags"'}]}},notFoundContent:{defaultValue:null,description:"Specify content to show when no result matches",name:"notFoundContent",required:!1,type:{name:"ReactNode"}},optionFilterProp:{defaultValue:null,description:"Which prop value of option will be used for filter if filterOption is true. If options is set, it should be set to label",name:"optionFilterProp",required:!1,type:{name:"string"}},optionLabelProp:{defaultValue:null,description:"Which prop value of option will render as content of select.",name:"optionLabelProp",required:!1,type:{name:"string"}},placement:{defaultValue:null,description:"The position where the selection box pops up",name:"placement",required:!1,type:{name:"enum",value:[{value:'"bottomLeft"'},{value:'"bottomRight"'},{value:'"topLeft"'},{value:'"topRight"'}]}},removeIcon:{defaultValue:null,description:"The custom remove icon",name:"removeIcon",required:!1,type:{name:"RenderNode"}},showArrow:{defaultValue:null,description:"Whether to show the drop-down arrow: true(for single select), false(for multiple select)",name:"showArrow",required:!1,type:{name:"boolean"}},showSearch:{defaultValue:null,description:"Whether select is searchable: single: false, multiple: true",name:"showSearch",required:!1,type:{name:"boolean"}},suffixIcon:{defaultValue:null,description:"The custom suffix icon",name:"suffixIcon",required:!1,type:{name:"ReactNode"}},tagRender:{defaultValue:null,description:"Customize tag render, only applies when mode is set to multiple or tags",name:"tagRender",required:!1,type:{name:"((props: CustomTagProps) => ReactElement<any, string | JSXElementConstructor<any>>)"}},tokenSeparators:{defaultValue:null,description:'Separator used to tokenize, only applies when mode="tags"',name:"tokenSeparators",required:!1,type:{name:"string[]"}},virtual:{defaultValue:null,description:"Disable virtual scroll when set to false",name:"virtual",required:!1,type:{name:"boolean"}},onSelect:{defaultValue:null,description:"Fires when item selected",name:"onSelect",required:!1,type:{name:"((value: ISelectValue, option: ISelectNode<Record<string, unknown>> | ISelectNode<Record<string, unknown>>[]) => void)"}},onDeselect:{defaultValue:null,description:"Fires when item deselected",name:"onDeselect",required:!1,type:{name:"((value: ISelectValue, option: ISelectNode<Record<string, unknown>> | ISelectNode<Record<string, unknown>>[]) => void)"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => SelectField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},inlineGroup:{defaultValue:null,description:"inline group name",name:"inlineGroup",required:!1,type:{name:"string"}},hidden:{defaultValue:null,description:"Whether the field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"Whether the field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"Whether the field default state is readonly",name:"readOnly",required:!1,type:{name:"boolean"}},nonEditable:{defaultValue:null,description:"Whether the field can not be edited (the field will have readOnly state if formMode is 'update')",name:"nonEditable",required:!1,type:{name:"boolean"}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: unknown, prevValue: unknown, field: SelectField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: SelectField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: SelectField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: unknown, error: string, isSubmit: boolean, field: SelectField) => void)"}}}}}catch{}const we={title:"DForm/Fields/Select",component:C,tags:["autodocs"],parameters:{docs:{source:{language:"tsx",format:!0,code:`
                    import React from "react";
                    import {DForm} from @krinopotam/ui-kit/dForm";
                    import {ISelectFieldProps, SelectField} from @krinopotam/ui-kit/dForm/fields/select/selectField";
                    import {SelectDataSet} from "../../../datasets/select";
                    type IComponent = ISelectFieldProps
                    /** DForm Select field */
                    export const SelectComponent = (props: IComponent): React.JSX.Element => <DForm
                        buttons={null}
                        fieldsProps={
                            {field1: {...props, dataSet:SelectDataSet, component: SelectField}}
                        }
                    />
                    export default SelectComponent
                `}}}},a={args:{label:"Select field",onReadyStateChanged:w()}};var d,u,s;a.parameters={...a.parameters,docs:{...(d=a.parameters)==null?void 0:d.docs,source:{originalSource:`{
  args: {
    label: 'Select field',
    onReadyStateChanged: fn()
  }
}`,...(s=(u=a.parameters)==null?void 0:u.docs)==null?void 0:s.source}}};const qe=["Playground"];export{a as Playground,qe as __namedExportsOrder,we as default};
