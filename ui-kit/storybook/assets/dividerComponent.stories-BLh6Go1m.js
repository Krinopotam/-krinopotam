import{j as r}from"./extends-BRD_ACZV.js";import{B as F,D as V}from"./dForm-DP5K2xf8.js";import"./dayjs.min-C_f_bfvq.js";import{I as o}from"./inputField-hCdxfbOH.js";import{r as s}from"./index-uubelm5h.js";import{D as q}from"./button-BBGWaBbj.js";import"./index-DaxZXI7c.js";import"./index-ZjhSye4T.js";import"./compact-item-Cc18Jwjb.js";import"./useToken-5hoSZr8q.js";import"./assertThisInitialized-C7eLZ5Vw.js";import"./index-DSOWIBN6.js";import"./context-B9fTWsvw.js";import"./wrapNativeSuper-CxOa5OEc.js";import"./pickAttrs-CgiZ8JxW.js";import"./useVariants-DZ-kQ5YQ.js";import"./ContextIsolator-DOOW9rnJ.js";import"./index-Dc2gpPvf.js";import"./motion-882RPeBL.js";import"./row-B5tJJ9FS.js";import"./roundedArrow-BEYe8rhY.js";import"./zoom-BAlMIi5O.js";import"./colors-C2uSR3nC.js";import"./QuestionCircleOutlined-Bk-29y8U.js";import"./ExclamationCircleFilled-DfdUTXTz.js";import"./isArray-Cl7xn3Rc.js";import"./buttonsRow-BJHxggfH.js";import"./Sider-CC_ePe8H.js";import"./KeyCode-DNlgD2sM.js";import"./DownOutlined-CLv9oSrw.js";import"./button-Cxc_PIz_.js";import"./getNanoId-DD8laUaD.js";import"./updateModalTheme-CewxNxvU.js";import"./headerRender-CfE9hlPU.js";import"./index-B7x7O6v2.js";import"./CloseOutlined-C4rdU_UQ.js";import"./useClosable-B_cjSSA6.js";import"./index-D3eZ-H7s.js";import"./InfoCircleOutlined-DRg6sOvc.js";import"./index-IYDviCHk.js";import"./index-DdcAgIgo.js";import"./CheckOutlined-Brjc5mOT.js";import"./modal-BzYxtx11.js";import"./useIsDebugMode-_qV3LLe4.js";import"./index-DZZC4nas.js";import"./EyeOutlined-BnAIJ_Pe.js";import"./SearchOutlined-CS-uAFUb.js";const n=({field:e})=>{s.useSyncExternalStore(e.subscribe.bind(e),e.getSnapshot.bind(e));const i=e.getProps();s.useEffect(()=>{e.setReady(!0)},[e]);const b={...{width:e.getWidth()??"100%",margin:0},...i.style};return r.jsx(q,{orientation:i.orientation,orientationMargin:i.orientationMargin,plain:i.plain,dashed:i.dashed,style:b,children:i.label})};try{n.displayName="DividerFieldRender",n.__docgenInfo={description:"",displayName:"DividerFieldRender",props:{field:{defaultValue:null,description:"",name:"field",required:!0,type:{name:"DividerField"}}}}}catch{}class D extends F{render(){return r.jsx(n,{field:this})}renderField(){return this.render()}}const d=e=>r.jsx(V,{buttons:null,fieldsProps:{field1:{label:"Field 1",component:o},divider:{...e,component:D},field2:{label:"Field 2",component:o}}}),C=d;try{d.displayName="DividerComponent",d.__docgenInfo={description:"DForm Divider field",displayName:"DividerComponent",props:{plain:{defaultValue:null,description:"Divider text show as plain style",name:"plain",required:!1,type:{name:"boolean"}},dashed:{defaultValue:null,description:"Whether line is dashed",name:"dashed",required:!1,type:{name:"boolean"}},orientation:{defaultValue:null,description:"The position of a title inside divider",name:"orientation",required:!1,type:{name:"enum",value:[{value:'"center"'},{value:'"left"'},{value:'"right"'}]}},orientationMargin:{defaultValue:null,description:"The margin-left/right between the title and its closest border, while the orientation must be left or right",name:"orientationMargin",required:!1,type:{name:"string | number"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => DividerField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},inlineGroup:{defaultValue:null,description:"inline group name",name:"inlineGroup",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"Field default value",name:"value",required:!1,type:{name:"ReactNode"}},hidden:{defaultValue:null,description:"Whether the field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"Whether the field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"Whether the field default state is readonly",name:"readOnly",required:!1,type:{name:"boolean"}},nonEditable:{defaultValue:null,description:"Whether the field can not be edited (the field will have readOnly state if formMode is 'update')",name:"nonEditable",required:!1,type:{name:"boolean"}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: ReactNode, prevValue: ReactNode, field: DividerField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: DividerField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: DividerField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: ReactNode, error: string, isSubmit: boolean, field: DividerField) => void)"}}}}}catch{}try{dividerComponent.displayName="dividerComponent",dividerComponent.__docgenInfo={description:"DForm Divider field",displayName:"dividerComponent",props:{plain:{defaultValue:null,description:"Divider text show as plain style",name:"plain",required:!1,type:{name:"boolean"}},dashed:{defaultValue:null,description:"Whether line is dashed",name:"dashed",required:!1,type:{name:"boolean"}},orientation:{defaultValue:null,description:"The position of a title inside divider",name:"orientation",required:!1,type:{name:"enum",value:[{value:'"center"'},{value:'"left"'},{value:'"right"'}]}},orientationMargin:{defaultValue:null,description:"The margin-left/right between the title and its closest border, while the orientation must be left or right",name:"orientationMargin",required:!1,type:{name:"string | number"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => DividerField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},inlineGroup:{defaultValue:null,description:"inline group name",name:"inlineGroup",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"Field default value",name:"value",required:!1,type:{name:"ReactNode"}},hidden:{defaultValue:null,description:"Whether the field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"Whether the field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"Whether the field default state is readonly",name:"readOnly",required:!1,type:{name:"boolean"}},nonEditable:{defaultValue:null,description:"Whether the field can not be edited (the field will have readOnly state if formMode is 'update')",name:"nonEditable",required:!1,type:{name:"boolean"}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: ReactNode, prevValue: ReactNode, field: DividerField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: DividerField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: DividerField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: ReactNode, error: string, isSubmit: boolean, field: DividerField) => void)"}}}}}catch{}const be={title:"DForm/Fields/Divider",component:C,tags:["autodocs"],parameters:{docs:{source:{language:"tsx",format:!0,code:`
                    import React from "react";
                    import {DForm} from @krinopotam/ui-kit/dForm";
                    import {InputField} from @krinopotam/ui-kit/dForm/fields/input/inputField";
                    import {DividerField, IDividerFieldProps} from @krinopotam/ui-kit/dForm/fields/divider/dividerField";
                    type IComponent = IDividerFieldProps;
                    /** DForm Divider field */
                    export const DividerComponent = (props: IComponent): React.JSX.Element => <DForm
                        buttons={null}
                        fieldsProps={
                            {
                                field1: {label: 'Field 1', component: InputField},
                                divider: {...props, component: DividerField},
                                field2: {label: 'Field 2', component: InputField} ,
                            }
                        }
                    />
                    export default DividerComponent
                `}}}},a={args:{value:"Divider",plain:!0}},t={args:{value:"Divider",orientation:"left",plain:!0}},l={args:{value:"Divider",orientation:"right",plain:!0}};var u,p,f;a.parameters={...a.parameters,docs:{...(u=a.parameters)==null?void 0:u.docs,source:{originalSource:`{
  args: {
    value: 'Divider',
    plain: true
  }
}`,...(f=(p=a.parameters)==null?void 0:p.docs)==null?void 0:f.source}}};var m,c,h;t.parameters={...t.parameters,docs:{...(m=t.parameters)==null?void 0:m.docs,source:{originalSource:`{
  args: {
    value: 'Divider',
    orientation: 'left',
    plain: true
  }
}`,...(h=(c=t.parameters)==null?void 0:c.docs)==null?void 0:h.source}}};var y,g,v;l.parameters={...l.parameters,docs:{...(y=l.parameters)==null?void 0:y.docs,source:{originalSource:`{
  args: {
    value: 'Divider',
    orientation: 'right',
    plain: true
  }
}`,...(v=(g=l.parameters)==null?void 0:g.docs)==null?void 0:v.source}}};const Fe=["WithTitle","TitleLeft","TitleRight"];export{t as TitleLeft,l as TitleRight,a as WithTitle,Fe as __namedExportsOrder,be as default};
