import{j as s}from"./useToken-268f632d.js";import{B as h,U as g,D as y}from"./treeSelectFieldRender-0de2af8b.js";import"./index-092ccb3f.js";import"./dayjs.min-bd65d405.js";import"./index-5819ae2c.js";import"./_commonjsHelpers-de833af9.js";import"./updateModalTheme-3177d112.js";import"./draggableRender-68189bdb.js";import"./index-e0a25a8d.js";import"./InfoCircleOutlined-14b312e0.js";import"./isNativeReflectConstruct-2f1897fe.js";import"./compact-item-e0eb0d02.js";import"./button-11c62e43.js";import"./button-a395f6e7.js";import"./helpersString-59da762c.js";import"./v4-4a60fe23.js";import"./index-ba109c1e.js";import"./ExclamationCircleFilled-8e2dacf4.js";import"./context-acf775e7.js";import"./motion-3729e44c.js";import"./useClosable-7a147c6b.js";import"./useZIndex-9f7c196b.js";import"./KeyCode-6413d982.js";import"./pickAttrs-f49ef707.js";import"./zoom-f1d5320d.js";import"./PurePanel-a66be90d.js";import"./index-53e6b65f.js";import"./buttonsRow-ca0a2aba.js";import"./Sider-f270e7a7.js";import"./row-353874ab.js";import"./roundedArrow-cf08b32b.js";import"./colors-dae18b42.js";import"./DownOutlined-7d62f4d3.js";import"./index-9d475cdf.js";import"./QuestionCircleOutlined-3fb4f056.js";import"./index-15561246.js";import"./index-762b8d87.js";import"./index-47c1009a.js";import"./statusUtils-8e8708fb.js";import"./SearchOutlined-826801c4.js";import"./select-82188730.js";import"./tabulatorBase-50de2949.js";import"./client-36d50ed5.js";import"./styled-components.browser.esm-11e59584.js";import"./datePicker-280e4e43.js";import"./quillEditor-b0c11980.js";import"./_baseIsEqual-93bb5583.js";import"./iframe-57919a18.js";import"../sb-preview/runtime.js";import"./MenuOutlined-207c5478.js";import"./_commonjs-dynamic-modules-302442b1.js";class w extends h{getValue(){return super.getValue()}setValue(m,f,c){super.setValue(m,f,c)}render(){return s.jsx(g,{field:this})}}const n=e=>s.jsx(y,{buttons:null,fieldsProps:{field1:{...e,component:w}}}),b=n;try{n.displayName="UploadDraggerComponent",n.__docgenInfo={description:"DForm Input field",displayName:"UploadDraggerComponent",props:{value:{defaultValue:null,description:"Default list of files that have been uploaded",name:"value",required:!1,type:{name:"UploadFile<unknown>[]"}},accept:{defaultValue:null,description:'File types that can be accepted (See html input "accept" Attribute)',name:"accept",required:!1,type:{name:"string"}},action:{defaultValue:null,description:"Uploading URL/promise",name:"action",required:!1,type:{name:"string | ((file: RcFile) => string) | ((file: RcFile) => Promise<string>)"}},customRequest:{defaultValue:null,description:"Override for the default xhr behavior allowing for additional customization and the ability to implement your own XMLHttpRequest",name:"customRequest",required:!0,type:{name:"(options: UploadRequestOption<any>) => void"}},uploadText:{defaultValue:null,description:"Upload text",name:"uploadText",required:!1,type:{name:"ReactNode"}},uploadHint:{defaultValue:null,description:"Upload text hint",name:"uploadHint",required:!1,type:{name:"ReactNode"}},uploadIcon:{defaultValue:null,description:"Upload section icon",name:"uploadIcon",required:!1,type:{name:"ReactNode"}},data:{defaultValue:null,description:"Uploading extra params or function which can return uploading extra params",name:"data",required:!1,type:{name:"Record<string, unknown> | ((file: UploadFile<unknown>) => Record<string, unknown> | Promise<Record<string, unknown>>)"}},directory:{defaultValue:null,description:"Support upload whole directory",name:"directory",required:!1,type:{name:"boolean"}},fileList:{defaultValue:null,description:"List of files that have been uploaded (controlled)",name:"fileList",required:!1,type:{name:"UploadFile<unknown>[]"}},headers:{defaultValue:null,description:"Request headers",name:"headers",required:!1,type:{name:"HttpRequestHeader"}},iconRender:{defaultValue:null,description:"Custom show icon",name:"iconRender",required:!1,type:{name:"((file: UploadFile<unknown>, listType?: UploadListType) => ReactNode)"}},isImageUrl:{defaultValue:null,description:"Customize if render <img /> in thumbnail",name:"isImageUrl",required:!1,type:{name:"((file: UploadFile<any>) => boolean)"}},itemRender:{defaultValue:null,description:"Custom item of uploadList",name:"itemRender",required:!1,type:{name:"ItemRender<unknown>"}},listType:{defaultValue:null,description:"Built-in stylesheets, support for four types: text, picture, picture-card or picture-circle",name:"listType",required:!1,type:{name:"enum",value:[{value:'"text"'},{value:'"picture"'},{value:'"picture-card"'},{value:'"picture-circle"'}]}},maxCount:{defaultValue:null,description:"Limit the number of uploaded files. Will replace current one when maxCount is 1",name:"maxCount",required:!1,type:{name:"number"}},method:{defaultValue:null,description:"The http method of upload request",name:"method",required:!1,type:{name:"enum",value:[{value:'"post"'},{value:'"put"'},{value:'"patch"'}]}},multiple:{defaultValue:null,description:"Whether to support selected multiple files. IE10+ supported. You can select multiple files with CTRL holding down while multiple is set to be true",name:"multiple",required:!1,type:{name:"boolean"}},fileName:{defaultValue:null,description:"The name of uploading file",name:"fileName",required:!1,type:{name:"string"}},openFileDialogOnClick:{defaultValue:null,description:"Click open file dialog",name:"openFileDialogOnClick",required:!1,type:{name:"boolean"}},previewFile:{defaultValue:null,description:"Customize preview file logic",name:"previewFile",required:!1,type:{name:"((file: File | Blob) => Promise<string>)"}},progress:{defaultValue:null,description:"Custom progress bar",name:"progress",required:!1,type:{name:"UploadListProgressProps"}},showUploadList:{defaultValue:null,description:"Whether to show default upload list, could be an object to specify showPreviewIcon, showRemoveIcon, showDownloadIcon, removeIcon and downloadIcon individually",name:"showUploadList",required:!1,type:{name:"boolean | ShowUploadListInterface<any>"}},withCredentials:{defaultValue:null,description:"The ajax upload with cookie sent",name:"withCredentials",required:!1,type:{name:"boolean"}},type:{defaultValue:null,description:"Upload type: drag | select",name:"type",required:!1,type:{name:"enum",value:[{value:'"drag"'},{value:'"select"'}]}},height:{defaultValue:null,description:"Dragger height",name:"height",required:!1,type:{name:"number"}},onBeforeUpload:{defaultValue:null,description:"Hook function which will be executed before uploading. Uploading will be stopped with false or a rejected Promise returned. When returned value is Upload.LIST_IGNORE, the list of files that have been uploaded will ignore it",name:"onBeforeUpload",required:!1,type:{name:"((file: RcFile, fileList: RcFile[]) => boolean | Promise<File>)"}},onChange:{defaultValue:null,description:"A callback function, can be executed when uploading state is changing. It will trigger by every uploading phase",name:"onChange",required:!1,type:{name:"((info: UploadChangeParam<UploadFile<unknown>>) => void)"}},onDrop:{defaultValue:null,description:"A callback function executed when files are dragged and dropped into the upload area",name:"onDrop",required:!1,type:{name:"((event: DragEvent<HTMLDivElement>) => void)"}},onDownload:{defaultValue:null,description:"Click the method to download the file, pass the method to perform the method logic, and do not pass the default jump to the new TAB",name:"onDownload",required:!1,type:{name:"((file: UploadFile<unknown>) => void)"}},onPreview:{defaultValue:null,description:"A callback function, will be executed when the file link or preview icon is clicked",name:"onPreview",required:!1,type:{name:"((file: UploadFile<unknown>) => void)"}},onRemove:{defaultValue:null,description:"A callback function, will be executed when removing file button is clicked, remove event will be prevented when the return value is false or a Promise which resolve(false) or reject",name:"onRemove",required:!1,type:{name:"((file: UploadFile<unknown>) => boolean | void | Promise<boolean | void>)"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => UploadDraggerField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},inlineGroup:{defaultValue:null,description:"inline group name",name:"inlineGroup",required:!1,type:{name:"string"}},hidden:{defaultValue:null,description:"If field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"If field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"If field default state is readonly",name:"readOnly",required:!1,type:{name:"boolean"}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: unknown, prevValue: unknown, field: UploadDraggerField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: UploadDraggerField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: UploadDraggerField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: UploadDraggerField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: UploadDraggerField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: UploadDraggerField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: UploadDraggerField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: UploadDraggerField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: UploadDraggerField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: unknown, error: string, isSubmit: boolean, field: UploadDraggerField) => void)"}}}}}catch{}try{uploadDraggerComponent.displayName="uploadDraggerComponent",uploadDraggerComponent.__docgenInfo={description:"DForm Input field",displayName:"uploadDraggerComponent",props:{value:{defaultValue:null,description:"Default list of files that have been uploaded",name:"value",required:!1,type:{name:"UploadFile<unknown>[]"}},accept:{defaultValue:null,description:'File types that can be accepted (See html input "accept" Attribute)',name:"accept",required:!1,type:{name:"string"}},action:{defaultValue:null,description:"Uploading URL/promise",name:"action",required:!1,type:{name:"string | ((file: RcFile) => string) | ((file: RcFile) => Promise<string>)"}},customRequest:{defaultValue:null,description:"Override for the default xhr behavior allowing for additional customization and the ability to implement your own XMLHttpRequest",name:"customRequest",required:!0,type:{name:"(options: UploadRequestOption<any>) => void"}},uploadText:{defaultValue:null,description:"Upload text",name:"uploadText",required:!1,type:{name:"ReactNode"}},uploadHint:{defaultValue:null,description:"Upload text hint",name:"uploadHint",required:!1,type:{name:"ReactNode"}},uploadIcon:{defaultValue:null,description:"Upload section icon",name:"uploadIcon",required:!1,type:{name:"ReactNode"}},data:{defaultValue:null,description:"Uploading extra params or function which can return uploading extra params",name:"data",required:!1,type:{name:"Record<string, unknown> | ((file: UploadFile<unknown>) => Record<string, unknown> | Promise<Record<string, unknown>>)"}},directory:{defaultValue:null,description:"Support upload whole directory",name:"directory",required:!1,type:{name:"boolean"}},fileList:{defaultValue:null,description:"List of files that have been uploaded (controlled)",name:"fileList",required:!1,type:{name:"UploadFile<unknown>[]"}},headers:{defaultValue:null,description:"Request headers",name:"headers",required:!1,type:{name:"HttpRequestHeader"}},iconRender:{defaultValue:null,description:"Custom show icon",name:"iconRender",required:!1,type:{name:"((file: UploadFile<unknown>, listType?: UploadListType) => ReactNode)"}},isImageUrl:{defaultValue:null,description:"Customize if render <img /> in thumbnail",name:"isImageUrl",required:!1,type:{name:"((file: UploadFile<any>) => boolean)"}},itemRender:{defaultValue:null,description:"Custom item of uploadList",name:"itemRender",required:!1,type:{name:"ItemRender<unknown>"}},listType:{defaultValue:null,description:"Built-in stylesheets, support for four types: text, picture, picture-card or picture-circle",name:"listType",required:!1,type:{name:"enum",value:[{value:'"text"'},{value:'"picture"'},{value:'"picture-card"'},{value:'"picture-circle"'}]}},maxCount:{defaultValue:null,description:"Limit the number of uploaded files. Will replace current one when maxCount is 1",name:"maxCount",required:!1,type:{name:"number"}},method:{defaultValue:null,description:"The http method of upload request",name:"method",required:!1,type:{name:"enum",value:[{value:'"post"'},{value:'"put"'},{value:'"patch"'}]}},multiple:{defaultValue:null,description:"Whether to support selected multiple files. IE10+ supported. You can select multiple files with CTRL holding down while multiple is set to be true",name:"multiple",required:!1,type:{name:"boolean"}},fileName:{defaultValue:null,description:"The name of uploading file",name:"fileName",required:!1,type:{name:"string"}},openFileDialogOnClick:{defaultValue:null,description:"Click open file dialog",name:"openFileDialogOnClick",required:!1,type:{name:"boolean"}},previewFile:{defaultValue:null,description:"Customize preview file logic",name:"previewFile",required:!1,type:{name:"((file: File | Blob) => Promise<string>)"}},progress:{defaultValue:null,description:"Custom progress bar",name:"progress",required:!1,type:{name:"UploadListProgressProps"}},showUploadList:{defaultValue:null,description:"Whether to show default upload list, could be an object to specify showPreviewIcon, showRemoveIcon, showDownloadIcon, removeIcon and downloadIcon individually",name:"showUploadList",required:!1,type:{name:"boolean | ShowUploadListInterface<any>"}},withCredentials:{defaultValue:null,description:"The ajax upload with cookie sent",name:"withCredentials",required:!1,type:{name:"boolean"}},type:{defaultValue:null,description:"Upload type: drag | select",name:"type",required:!1,type:{name:"enum",value:[{value:'"drag"'},{value:'"select"'}]}},height:{defaultValue:null,description:"Dragger height",name:"height",required:!1,type:{name:"number"}},onBeforeUpload:{defaultValue:null,description:"Hook function which will be executed before uploading. Uploading will be stopped with false or a rejected Promise returned. When returned value is Upload.LIST_IGNORE, the list of files that have been uploaded will ignore it",name:"onBeforeUpload",required:!1,type:{name:"((file: RcFile, fileList: RcFile[]) => boolean | Promise<File>)"}},onChange:{defaultValue:null,description:"A callback function, can be executed when uploading state is changing. It will trigger by every uploading phase",name:"onChange",required:!1,type:{name:"((info: UploadChangeParam<UploadFile<unknown>>) => void)"}},onDrop:{defaultValue:null,description:"A callback function executed when files are dragged and dropped into the upload area",name:"onDrop",required:!1,type:{name:"((event: DragEvent<HTMLDivElement>) => void)"}},onDownload:{defaultValue:null,description:"Click the method to download the file, pass the method to perform the method logic, and do not pass the default jump to the new TAB",name:"onDownload",required:!1,type:{name:"((file: UploadFile<unknown>) => void)"}},onPreview:{defaultValue:null,description:"A callback function, will be executed when the file link or preview icon is clicked",name:"onPreview",required:!1,type:{name:"((file: UploadFile<unknown>) => void)"}},onRemove:{defaultValue:null,description:"A callback function, will be executed when removing file button is clicked, remove event will be prevented when the return value is false or a Promise which resolve(false) or reject",name:"onRemove",required:!1,type:{name:"((file: UploadFile<unknown>) => boolean | void | Promise<boolean | void>)"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => UploadDraggerField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},inlineGroup:{defaultValue:null,description:"inline group name",name:"inlineGroup",required:!1,type:{name:"string"}},hidden:{defaultValue:null,description:"If field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"If field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"If field default state is readonly",name:"readOnly",required:!1,type:{name:"boolean"}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: unknown, prevValue: unknown, field: UploadDraggerField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: UploadDraggerField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: UploadDraggerField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: UploadDraggerField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: UploadDraggerField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: UploadDraggerField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: UploadDraggerField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: UploadDraggerField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: UploadDraggerField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: unknown, error: string, isSubmit: boolean, field: UploadDraggerField) => void)"}}}}}catch{}const ye={title:"DForm/Fields/UploadDragger",component:b,tags:["autodocs"],parameters:{docs:{source:{language:"tsx",format:!0,code:`
                    import React from 'react';
                    import {DForm} from @krinopotam/ui-kit/dForm';
                    import {IUploadDraggerFieldProps, UploadDraggerField} from @krinopotam/ui-kit/dForm/fields/fileDrop/uploadDraggerField';
                    type IComponent = IUploadDraggerFieldProps;
                    /** DForm Input field */
                    export const UploadDraggerComponent = (props: IComponent): React.JSX.Element => (
                        <DForm buttons={null} fieldsProps={{field1: {...props, component: UploadDraggerField}}} />
                    );
                    export default UploadDraggerComponent;
                `}}}},p={label:"Upload dragger field"},a={args:{...p}},l={args:{...p,value:[{uid:"1",name:"xxx.png",status:"uploading",url:"http://www.baidu.com/xxx.png",percent:33},{uid:"2",name:"yyy.png",status:"done",url:"http://www.baidu.com/yyy.png"},{uid:"3",name:"zzz.png",status:"error",response:"Server Error 500",url:"http://www.baidu.com/zzz.png"}]}};var t,i,o;a.parameters={...a.parameters,docs:{...(t=a.parameters)==null?void 0:t.docs,source:{originalSource:`{
  args: {
    ...baseArgs
  }
}`,...(o=(i=a.parameters)==null?void 0:i.docs)==null?void 0:o.source}}};var r,d,u;l.parameters={...l.parameters,docs:{...(r=l.parameters)==null?void 0:r.docs,source:{originalSource:`{
  args: {
    ...baseArgs,
    value: [{
      uid: '1',
      name: 'xxx.png',
      status: 'uploading',
      url: 'http://www.baidu.com/xxx.png',
      percent: 33
    }, {
      uid: '2',
      name: 'yyy.png',
      status: 'done',
      url: 'http://www.baidu.com/yyy.png'
    }, {
      uid: '3',
      name: 'zzz.png',
      status: 'error',
      response: 'Server Error 500',
      // custom error message to show
      url: 'http://www.baidu.com/zzz.png'
    }]
  }
}`,...(u=(d=l.parameters)==null?void 0:d.docs)==null?void 0:u.source}}};const we=["Default","DefaultValues"];export{a as Default,l as DefaultValues,we as __namedExportsOrder,ye as default};
//# sourceMappingURL=uploadDraggerComponent.stories-f737e765.js.map
