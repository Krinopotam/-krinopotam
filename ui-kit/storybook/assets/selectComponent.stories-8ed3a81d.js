import{j as i}from"./useToken-b19ab62a.js";import{B as r,S as d,D as u}from"./tabulatorGrid-e0bda04d.js";import"./index-092ccb3f.js";import"./dayjs.min-bd65d405.js";import{S as s}from"./select-f43b16e2.js";import"./index-76fb7be0.js";import"./_commonjsHelpers-de833af9.js";import"./extends-98964cd2.js";import"./helpersObjects-335d2932.js";import"./compact-item-153ccf6f.js";import"./index-a764d3ff.js";import"./assertThisInitialized-8802cfe2.js";import"./index-6ed6bb17.js";import"./motion-a9f81d2c.js";import"./helpersString-59da762c.js";import"./v4-4a60fe23.js";import"./updateModalTheme-425bc3b2.js";import"./draggableRender-817e2d38.js";import"./index-84136495.js";import"./InfoCircleOutlined-b0bd8909.js";import"./button-13ccc7ad.js";import"./button-3e1cd756.js";import"./index-b1d11547.js";import"./ExclamationCircleFilled-cf151277.js";import"./context-5a13208d.js";import"./motion-3729e44c.js";import"./useClosable-bab051fc.js";import"./KeyCode-6413d982.js";import"./pickAttrs-f83e05d3.js";import"./zoom-faeb00d0.js";import"./PurePanel-71bfc635.js";import"./buttonsRow-f20d8f58.js";import"./Sider-ab22ad9d.js";import"./row-1394a33e.js";import"./roundedArrow-d75250bf.js";import"./colors-91786050.js";import"./index-9d475cdf.js";import"./QuestionCircleOutlined-41527efc.js";import"./index-e792aa35.js";import"./tabulatorBase-55a14ce2.js";import"./client-3399ac50.js";import"./styled-components.browser.esm-af1ba35b.js";import"./index-89674408.js";import"./index-26e00ff7.js";import"./statusUtils-fe2ccc25.js";import"./SearchOutlined-2078d1e8.js";import"./select-682fa1e1.js";import"./datePicker-b41297a7.js";import"./quillEditor-7c013428.js";import"./_baseIsEqual-66ace112.js";import"./iframe-b9fc7715.js";import"../sb-preview/runtime.js";import"./MenuOutlined-d7aaaba5.js";import"./_commonjs-dynamic-modules-302442b1.js";class p extends r{render(){return i.jsx(d,{field:this})}}const t=e=>i.jsx(u,{buttons:null,fieldsProps:{field1:{...e,dataSet:s,component:p}}}),m=t;try{t.displayName="SelectComponent",t.__docgenInfo={description:"DForm Select field",displayName:"SelectComponent",props:{fullItemValue:{defaultValue:null,description:"if true, then the entire elements (full node) will be written into the values",name:"fullItemValue",required:!1,type:{name:"boolean"}},dataSet:{defaultValue:null,description:"Select component options items",name:"dataSet",required:!1,type:{name:"ISelectOptions"}},allowClear:{defaultValue:null,description:"Allow clear and show clear button",name:"allowClear",required:!1,type:{name:"boolean | { clearIcon?: RenderNode; }"}},autoClearSearchValue:{defaultValue:null,description:"Whether the current search will be cleared on selecting an item. Only applies when mode is set to multiple or tags (default true)",name:"autoClearSearchValue",required:!1,type:{name:"boolean"}},defaultActiveFirstOption:{defaultValue:null,description:"Whether active first option by default",name:"defaultActiveFirstOption",required:!1,type:{name:"boolean"}},defaultOpen:{defaultValue:null,description:"Initial open state of dropdown",name:"defaultOpen",required:!1,type:{name:"boolean"}},value:{defaultValue:null,description:"Initial selected option",name:"value",required:!1,type:{name:"ISelectValue"}},popupClassName:{defaultValue:null,description:"The className of dropdown menu",name:"popupClassName",required:!1,type:{name:"string"}},dropdownRender:{defaultValue:null,description:"Customize dropdown content",name:"dropdownRender",required:!1,type:{name:"((menu: ReactElement<any, string | JSXElementConstructor<any>>) => ReactElement<any, string | JSXElementConstructor<any>>)"}},fieldNames:{defaultValue:null,description:"Customize node label, value, options field name",name:"fieldNames",required:!1,type:{name:"FieldNames"}},filterOption:{defaultValue:null,description:"If true, filter options by input, if value is function, filter options against it.",name:"filterOption",required:!1,type:{name:"boolean | FilterFunc<BaseOptionType | DefaultOptionType>"}},filterSort:{defaultValue:null,description:"Sort function for search options sorting, see Array sort compareFunction",name:"filterSort",required:!1,type:{name:"((optionA: BaseOptionType | DefaultOptionType, optionB: BaseOptionType | DefaultOptionType) => number)"}},labelInValue:{defaultValue:null,description:"Whether to embed label in value, turn the format of value from string to ( value: string, label: ReactNode )",name:"labelInValue",required:!1,type:{name:"boolean"}},listHeight:{defaultValue:null,description:"Config popup height (default 256)",name:"listHeight",required:!1,type:{name:"number"}},loading:{defaultValue:null,description:"Indicate loading state",name:"loading",required:!1,type:{name:"boolean"}},maxTagCount:{defaultValue:null,description:"Max tag count to show. responsive will cost render performance",name:"maxTagCount",required:!1,type:{name:'number | "responsive"'}},maxTagPlaceholder:{defaultValue:null,description:"Placeholder for not showing tags",name:"maxTagPlaceholder",required:!1,type:{name:"ReactNode | ((omittedValues: DisplayValueType[]) => ReactNode)"}},maxTagTextLength:{defaultValue:null,description:"Max tag text length to show",name:"maxTagTextLength",required:!1,type:{name:"number"}},menuItemSelectedIcon:{defaultValue:null,description:"The custom menuItemSelected icon with multiple options",name:"menuItemSelectedIcon",required:!1,type:{name:"RenderNode"}},mode:{defaultValue:null,description:"Set mode of Select",name:"mode",required:!1,type:{name:"enum",value:[{value:'"multiple"'},{value:'"tags"'}]}},notFoundContent:{defaultValue:null,description:"Specify content to show when no result matches",name:"notFoundContent",required:!1,type:{name:"ReactNode"}},optionFilterProp:{defaultValue:null,description:"Which prop value of option will be used for filter if filterOption is true. If options is set, it should be set to label",name:"optionFilterProp",required:!1,type:{name:"string"}},optionLabelProp:{defaultValue:null,description:"Which prop value of option will render as content of select.",name:"optionLabelProp",required:!1,type:{name:"string"}},placement:{defaultValue:null,description:"The position where the selection box pops up",name:"placement",required:!1,type:{name:"enum",value:[{value:'"bottomLeft"'},{value:'"bottomRight"'},{value:'"topLeft"'},{value:'"topRight"'}]}},removeIcon:{defaultValue:null,description:"The custom remove icon",name:"removeIcon",required:!1,type:{name:"RenderNode"}},showArrow:{defaultValue:null,description:"Whether to show the drop-down arrow: true(for single select), false(for multiple select)",name:"showArrow",required:!1,type:{name:"boolean"}},showSearch:{defaultValue:null,description:"Whether select is searchable: single: false, multiple: true",name:"showSearch",required:!1,type:{name:"boolean"}},suffixIcon:{defaultValue:null,description:"The custom suffix icon",name:"suffixIcon",required:!1,type:{name:"ReactNode"}},tagRender:{defaultValue:null,description:"Customize tag render, only applies when mode is set to multiple or tags",name:"tagRender",required:!1,type:{name:"((props: CustomTagProps) => ReactElement<any, string | JSXElementConstructor<any>>)"}},tokenSeparators:{defaultValue:null,description:'Separator used to tokenize, only applies when mode="tags"',name:"tokenSeparators",required:!1,type:{name:"string[]"}},virtual:{defaultValue:null,description:"Disable virtual scroll when set to false",name:"virtual",required:!1,type:{name:"boolean"}},onSelect:{defaultValue:null,description:"Fires when item selected",name:"onSelect",required:!1,type:{name:"((value: ISelectValue, option: ISelectNode<Record<string, unknown>> | ISelectNode<Record<string, unknown>>[]) => void)"}},onDeselect:{defaultValue:null,description:"Fires when item deselected",name:"onDeselect",required:!1,type:{name:"((value: ISelectValue, option: ISelectNode<Record<string, unknown>> | ISelectNode<Record<string, unknown>>[]) => void)"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => SelectField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},inlineGroup:{defaultValue:null,description:"inline group name",name:"inlineGroup",required:!1,type:{name:"string"}},hidden:{defaultValue:null,description:"If field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"If field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"If field default state is readonly",name:"readOnly",required:!1,type:{name:"boolean"}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: unknown, prevValue: unknown, field: SelectField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: SelectField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: SelectField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: unknown, error: string, isSubmit: boolean, field: SelectField) => void)"}}}}}catch{}try{selectComponent.displayName="selectComponent",selectComponent.__docgenInfo={description:"DForm Select field",displayName:"selectComponent",props:{fullItemValue:{defaultValue:null,description:"if true, then the entire elements (full node) will be written into the values",name:"fullItemValue",required:!1,type:{name:"boolean"}},dataSet:{defaultValue:null,description:"Select component options items",name:"dataSet",required:!1,type:{name:"ISelectOptions"}},allowClear:{defaultValue:null,description:"Allow clear and show clear button",name:"allowClear",required:!1,type:{name:"boolean | { clearIcon?: RenderNode; }"}},autoClearSearchValue:{defaultValue:null,description:"Whether the current search will be cleared on selecting an item. Only applies when mode is set to multiple or tags (default true)",name:"autoClearSearchValue",required:!1,type:{name:"boolean"}},defaultActiveFirstOption:{defaultValue:null,description:"Whether active first option by default",name:"defaultActiveFirstOption",required:!1,type:{name:"boolean"}},defaultOpen:{defaultValue:null,description:"Initial open state of dropdown",name:"defaultOpen",required:!1,type:{name:"boolean"}},value:{defaultValue:null,description:"Initial selected option",name:"value",required:!1,type:{name:"ISelectValue"}},popupClassName:{defaultValue:null,description:"The className of dropdown menu",name:"popupClassName",required:!1,type:{name:"string"}},dropdownRender:{defaultValue:null,description:"Customize dropdown content",name:"dropdownRender",required:!1,type:{name:"((menu: ReactElement<any, string | JSXElementConstructor<any>>) => ReactElement<any, string | JSXElementConstructor<any>>)"}},fieldNames:{defaultValue:null,description:"Customize node label, value, options field name",name:"fieldNames",required:!1,type:{name:"FieldNames"}},filterOption:{defaultValue:null,description:"If true, filter options by input, if value is function, filter options against it.",name:"filterOption",required:!1,type:{name:"boolean | FilterFunc<BaseOptionType | DefaultOptionType>"}},filterSort:{defaultValue:null,description:"Sort function for search options sorting, see Array sort compareFunction",name:"filterSort",required:!1,type:{name:"((optionA: BaseOptionType | DefaultOptionType, optionB: BaseOptionType | DefaultOptionType) => number)"}},labelInValue:{defaultValue:null,description:"Whether to embed label in value, turn the format of value from string to ( value: string, label: ReactNode )",name:"labelInValue",required:!1,type:{name:"boolean"}},listHeight:{defaultValue:null,description:"Config popup height (default 256)",name:"listHeight",required:!1,type:{name:"number"}},loading:{defaultValue:null,description:"Indicate loading state",name:"loading",required:!1,type:{name:"boolean"}},maxTagCount:{defaultValue:null,description:"Max tag count to show. responsive will cost render performance",name:"maxTagCount",required:!1,type:{name:'number | "responsive"'}},maxTagPlaceholder:{defaultValue:null,description:"Placeholder for not showing tags",name:"maxTagPlaceholder",required:!1,type:{name:"ReactNode | ((omittedValues: DisplayValueType[]) => ReactNode)"}},maxTagTextLength:{defaultValue:null,description:"Max tag text length to show",name:"maxTagTextLength",required:!1,type:{name:"number"}},menuItemSelectedIcon:{defaultValue:null,description:"The custom menuItemSelected icon with multiple options",name:"menuItemSelectedIcon",required:!1,type:{name:"RenderNode"}},mode:{defaultValue:null,description:"Set mode of Select",name:"mode",required:!1,type:{name:"enum",value:[{value:'"multiple"'},{value:'"tags"'}]}},notFoundContent:{defaultValue:null,description:"Specify content to show when no result matches",name:"notFoundContent",required:!1,type:{name:"ReactNode"}},optionFilterProp:{defaultValue:null,description:"Which prop value of option will be used for filter if filterOption is true. If options is set, it should be set to label",name:"optionFilterProp",required:!1,type:{name:"string"}},optionLabelProp:{defaultValue:null,description:"Which prop value of option will render as content of select.",name:"optionLabelProp",required:!1,type:{name:"string"}},placement:{defaultValue:null,description:"The position where the selection box pops up",name:"placement",required:!1,type:{name:"enum",value:[{value:'"bottomLeft"'},{value:'"bottomRight"'},{value:'"topLeft"'},{value:'"topRight"'}]}},removeIcon:{defaultValue:null,description:"The custom remove icon",name:"removeIcon",required:!1,type:{name:"RenderNode"}},showArrow:{defaultValue:null,description:"Whether to show the drop-down arrow: true(for single select), false(for multiple select)",name:"showArrow",required:!1,type:{name:"boolean"}},showSearch:{defaultValue:null,description:"Whether select is searchable: single: false, multiple: true",name:"showSearch",required:!1,type:{name:"boolean"}},suffixIcon:{defaultValue:null,description:"The custom suffix icon",name:"suffixIcon",required:!1,type:{name:"ReactNode"}},tagRender:{defaultValue:null,description:"Customize tag render, only applies when mode is set to multiple or tags",name:"tagRender",required:!1,type:{name:"((props: CustomTagProps) => ReactElement<any, string | JSXElementConstructor<any>>)"}},tokenSeparators:{defaultValue:null,description:'Separator used to tokenize, only applies when mode="tags"',name:"tokenSeparators",required:!1,type:{name:"string[]"}},virtual:{defaultValue:null,description:"Disable virtual scroll when set to false",name:"virtual",required:!1,type:{name:"boolean"}},onSelect:{defaultValue:null,description:"Fires when item selected",name:"onSelect",required:!1,type:{name:"((value: ISelectValue, option: ISelectNode<Record<string, unknown>> | ISelectNode<Record<string, unknown>>[]) => void)"}},onDeselect:{defaultValue:null,description:"Fires when item deselected",name:"onDeselect",required:!1,type:{name:"((value: ISelectValue, option: ISelectNode<Record<string, unknown>> | ISelectNode<Record<string, unknown>>[]) => void)"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => SelectField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},inlineGroup:{defaultValue:null,description:"inline group name",name:"inlineGroup",required:!1,type:{name:"string"}},hidden:{defaultValue:null,description:"If field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"If field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"If field default state is readonly",name:"readOnly",required:!1,type:{name:"boolean"}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: unknown, prevValue: unknown, field: SelectField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: SelectField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: SelectField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: SelectField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: unknown, error: string, isSubmit: boolean, field: SelectField) => void)"}}}}}catch{}const fe={title:"DForm/Fields/Select",component:m,tags:["autodocs"],parameters:{docs:{source:{language:"tsx",format:!0,code:`
                    import React from "react";
                    import {DForm} from @krinopotam/ui-kit/dForm";
                    import {ISelectFieldProps, SelectField} from @krinopotam/ui-kit/dForm/fields/select/selectField";
                    import {SelectDataSet} from "../../../datasets/select";
                    type IComponent = ISelectFieldProps
                    /** DForm Select field */
                    export const SelectComponent = (props: IComponent): React.JSX.Element => <DForm
                        buttons={null}
                        fieldsProps={
                            {field1: {...props, dataSet:SelectDataSet, component: SelectField}}
                        }
                    />
                    export default SelectComponent
                `}}}},l={args:{label:"Select field"}};var a,n,o;l.parameters={...l.parameters,docs:{...(a=l.parameters)==null?void 0:a.docs,source:{originalSource:`{
  args: {
    label: 'Select field'
  }
}`,...(o=(n=l.parameters)==null?void 0:n.docs)==null?void 0:o.source}}};const ce=["Playground"];export{l as Playground,ce as __namedExportsOrder,fe as default};
