import{j as d}from"./extends-CKwpSh1k.js";import{m as C,u as D}from"./updateModalTheme-BHkz_pm9.js";import{M as I,B as v}from"./modalRender-CScw6VrL.js";import{C as q,M as w,S}from"./helpersObjects-NFjaQN06.js";import{r as u}from"./index-CTjT7uj6.js";import{r as k,e as R,c as M,D as N,u as x}from"./dForm-DvKrqwkg.js";import"./index-DGqZ_Opy.js";import{G as V}from"./helpersString-BLksZHLM.js";import"./dayjs.min-BljPK31Q.js";import{I as O}from"./useIsDebugMode-B-VM_G4X.js";const E={...k,cancelChangesQn:"Отменить сделанные изменения?",viewing:"Просмотр",creating:"Создание",editing:"Редактирование",cloning:"Клонирование"},A={...R,cancelChangesQn:"Cancel the changes made?",viewing:"Viewing",creating:"Creating",editing:"Editing",cloning:"Cloning"},T={...M,cancelChangesQn:"取消已做的更改？",viewing:"查看",creating:"创建",editing:"编辑",cloning:"克隆"},m={ru:E,en:A,cn:T},h=n=>u.useCallback(e=>{const l=n.language??"en",a={...m[l]??m.en,...n.translation};return Object.prototype.hasOwnProperty.call(a,e)?a[e]:Object.prototype.hasOwnProperty.call(m.en,e)?m.en[e]:e},[n.language,n.translation]),_=(n,e,l,t,a)=>{e.getFormId=H(n),e.buttonsApi=t,e.getFormProps=j(l),e.setFormProps=z(l,a),e.open=B(e),e.close=L(e,l),e.forceClose=F(e)},H=n=>u.useCallback(()=>n,[n]),j=n=>u.useCallback(()=>n,[n]),z=(n,e)=>u.useCallback(l=>{e({...n,...l})},[n,e]),B=n=>u.useCallback((e,l)=>{var r,s;if(!e)return;const t=l??n.getFormProps().dataSet,a=t?q(t):void 0,i=n.getFormProps();((r=i.onOpen)==null?void 0:r.call(i,n,a))!==!1&&(n.setFormProps({open:!0,formMode:e,dataSet:a}),(s=i.onOpened)==null||s.call(i,n,a))},[n]),F=n=>u.useCallback(()=>{var l,t;const e=n.getFormProps();if(((l=e.onClosing)==null?void 0:l.call(e,n))===!1)return!1;n.setFormProps({open:!1}),(t=e.onClosed)==null||t.call(e,n)},[n]),L=(n,e)=>{const l=h(e);return u.useCallback(()=>{var t,a;if(((t=e.onClosing)==null?void 0:t.call(e,n))!==!1){if(n.model.isFormDirty()&&e.confirmChanges){C.confirm({language:e.language,content:e.closeFormConfirmMessage??l("cancelChangesQn"),okText:l("yes"),cancelText:l("no"),onOk:()=>{var i;(i=e.onCancel)==null||i.call(e,n),n.forceClose()}});return}(a=e.onCancel)==null||a.call(e,n),n.forceClose()}},[n,e,l])},p=({formId:n,buttons:e,buttonsApi:l,formApi:t,formProps:a,modalProps:i,modalFormProps:r})=>{const[s]=u.useState(n??"dFormModal-"+V()),o=W(r);return d.jsx(I,{...i,modalId:s,style:r.modalStyle,styles:r.modalStyles,onCancel:t.close,centered:typeof i.centered>"u"?!0:i.centered,maskClosable:!1,keyboard:!1,destroyOnClose:!0,footer:d.jsx(v,{buttons:e,colorType:r.colorType,buttonsApi:l,arrowsSelection:r.arrowsButtonsSelection,context:t}),title:o,children:r.open?d.jsx(N,{apiRef:t,...a,formStyle:{height:"100%",width:"100%",...a.formStyle},containerStyle:{height:"100%",...a.containerStyle}}):null})},W=n=>{const e=n.formMode??"create",l=n.title,t=h(n);return l||(e==="view"?t("viewing"):e==="create"?t("creating"):e==="clone"?t("cloning"):e==="update"?t("editing"):"&nbsp;")};try{p.displayName="DFormModalRender",p.__docgenInfo={description:"",displayName:"DFormModalRender",props:{formId:{defaultValue:null,description:"the form ID",name:"formId",required:!1,type:{name:"string"}},buttons:{defaultValue:null,description:"form buttons collection",name:"buttons",required:!1,type:{name:"IFormButtons"}},buttonsApi:{defaultValue:null,description:"Form buttons api",name:"buttonsApi",required:!1,type:{name:"IButtonsRowApi"}},centered:{defaultValue:null,description:"Is the form open centered",name:"centered",required:!1,type:{name:"boolean"}},formApi:{defaultValue:null,description:"form api",name:"formApi",required:!0,type:{name:"IDFormModalApi"}},modalProps:{defaultValue:null,description:"Modal component props",name:"modalProps",required:!0,type:{name:"IExtendedModalOwnProps"}},formProps:{defaultValue:null,description:"Child dynamic form props only",name:"formProps",required:!0,type:{name:"IDFormProps"}},modalFormProps:{defaultValue:null,description:"Full DFormModal props (contains formProps and modalProps values)",name:"modalFormProps",required:!0,type:{name:"IDFormModalProps"}},onOk:{defaultValue:null,description:"On submit button click callback",name:"onOk",required:!1,type:{name:"((e: MouseEvent<HTMLButtonElement, MouseEvent>) => void)"}},onCancel:{defaultValue:null,description:"On cancel button click callback",name:"onCancel",required:!1,type:{name:"((e: MouseEvent<HTMLButtonElement, MouseEvent>) => void)"}}}}}catch{}const y=(n,e)=>{const l=h(e);return u.useMemo(()=>({onFormDirtyStateChanged:t=>{var a;return(a=e==null?void 0:e.onFormDirtyStateChanged)==null?void 0:a.call(e,t,n)},onFormReadOnlyStateChanged:t=>{var a;return(a=e==null?void 0:e.onFormReadOnlyStateChanged)==null?void 0:a.call(e,t,n)},onFormInit:()=>{var t;return(t=e==null?void 0:e.onFormInit)==null?void 0:t.call(e,n)},onFormModelInitialized:()=>{var t;return(t=e==null?void 0:e.onFormModelInitialized)==null?void 0:t.call(e,n)},onFormReadyStateChanged:t=>{var a;return(a=e==null?void 0:e.onFormReadyStateChanged)==null?void 0:a.call(e,t,n)},onFormValuesChanged:(t,a)=>{var i;return(i=e==null?void 0:e.onFormValuesChanged)==null?void 0:i.call(e,t,a,n)},onFormValidated:(t,a,i)=>{var r;return(r=e==null?void 0:e.onFormValidated)==null?void 0:r.call(e,t,a,i,n)},onFormHasErrors:(t,a)=>{var i;return(i=e==null?void 0:e.onFormHasErrors)==null?void 0:i.call(e,t,a,n)},onFormHasNoErrors:t=>{var a;return(a=e==null?void 0:e.onFormHasNoErrors)==null?void 0:a.call(e,t,n)},onDataFetch:()=>{var t;return(t=e==null?void 0:e.onDataFetch)==null?void 0:t.call(e,n)},onDataFetchSuccess:t=>{var a;return(a=e==null?void 0:e.onDataFetchSuccess)==null?void 0:a.call(e,t,n)},onDataFetchError:t=>{var i;if(((i=e==null?void 0:e.onDataFetchError)==null?void 0:i.call(e,t,n))===!1)return!1;const a=C.confirm({language:e.language,content:d.jsxs(d.Fragment,{children:[d.jsx("p",{children:d.jsx("b",{children:t.message})}),t.stack&&O()?d.jsx("p",{children:t.stack}):"",d.jsx("p",{children:l("tryAgainQt")})]}),colorType:"danger",buttons:{ok:{onClick:()=>{a.destroy(),n.model.fetchData()}},cancel:{onClick:()=>{var r;a.destroy(),(r=n.forceClose)==null||r.call(n)}}}});return!1},onDataFetchComplete:()=>{var t;return(t=e==null?void 0:e.onDataFetchComplete)==null?void 0:t.call(e,n)},onSubmitValidation:(t,a)=>{var i;return(i=e==null?void 0:e.onSubmitValidation)==null?void 0:i.call(e,t,a,n)},onSubmit:t=>{var a,i,r,s,o,c,f;return(i=(a=n.buttonsApi).disabled)==null||i.call(a,"ok",!0),(s=(r=n.buttonsApi).disabled)==null||s.call(r,"cancel",!0),e.confirmChanges||(c=(o=n.buttonsApi).loading)==null||c.call(o,"ok",!0),(f=e==null?void 0:e.onSubmit)==null?void 0:f.call(e,t,n)},onSubmitSuccess:(t,a)=>{var i;if(((i=e==null?void 0:e.onSubmitSuccess)==null?void 0:i.call(e,t,a,n))===!1)return!1;n.forceClose()},onSubmitError:(t,a)=>{var i;return(i=e==null?void 0:e.onSubmitError)==null?void 0:i.call(e,t,a,n)},onSubmitComplete:(t,a)=>{var i,r,s,o,c,f,g;if(((i=e==null?void 0:e.onSubmitComplete)==null?void 0:i.call(e,t,a,n))===!1)return!1;(s=(r=n.buttonsApi).disabled)==null||s.call(r,"ok",!1),(c=(o=n.buttonsApi).disabled)==null||c.call(o,"cancel",!1),(g=(f=n.buttonsApi).loading)==null||g.call(f,"ok",!1)},onDataSetChange:t=>{var a;return(a=e==null?void 0:e.onDataSetChange)==null?void 0:a.call(e,t,n)}}),[n,e])};try{y.displayName="useFormCallbacks",y.__docgenInfo={description:"Preparing callbacks for redirection to the form",displayName:"useFormCallbacks",props:{}}}catch{}const Q=(n,e)=>{const l=h(e);return u.useMemo(()=>{const t={ok:{position:"right",active:e.formMode!=="view",hidden:e.formMode==="view",title:l("ok"),hotKeys:[{key:"enter",ctrl:!0},{key:"s",ctrl:!0},{key:"ы",ctrl:!0}],onClick:()=>{n.submitForm()}},cancel:{position:"right",title:l("cancel"),hotKeys:[{key:"escape"}],active:e.formMode==="view",onClick:()=>{n.close()}}};return w(t,e.buttons)},[n,e.buttons,e.formMode,l])},b=n=>{D();const[e]=u.useState(n.formId??"dFormModal-"+V()),[l,t]=x(n),[a,i]=G(l),[r,s]=u.useState(l.apiRef||{}),[o]=u.useState({}),c=Q(r,l);_(e,r,l,o,t);const f=y(r,l),[,g]=K(i,f);return u.useEffect(()=>()=>{s({})},[]),d.jsx(p,{formId:e,formApi:r,modalFormProps:l,modalProps:a,formProps:g,buttons:c,buttonsApi:o})},G=n=>u.useMemo(()=>{const[e,l]=S(n,{afterClose:!0,animation:!0,bodyProps:!0,centered:!0,children:!0,className:!0,classNames:!0,closable:!0,closeIcon:!0,colorType:!0,confirmLoading:!0,focusTriggerAfterClose:!0,forceRender:!0,getContainer:!0,headerIcon:!0,height:!0,isDraggable:!0,loading:!0,mask:!0,maskAnimation:!0,maskProps:!0,maskStyle:!0,maskTransitionName:!0,modalRender:!0,mousePosition:!0,notScrollable:!0,onAfterOpenChange:!0,open:!0,panelRef:!0,prefixCls:!0,resizable:!0,rootClassName:!0,title:!0,transitionName:!0,visible:!0,width:!0,wrapClassName:!0,wrapProps:!0,wrapStyle:!0,zIndex:!0,maxHeight:!0,minHeight:!0,minWidth:!0,maxWidth:!0});return[e,l]},[n]),K=(n,e)=>u.useMemo(()=>{const[l,t]=S(n,{closeFormConfirmMessage:!0,modalStyle:!0,modalStyles:!0,onClosed:!0,onClosing:!0,onDataFetch:!0,onDataFetchComplete:!0,onDataFetchError:!0,onDataFetchSuccess:!0,onDataSetChange:!0,onFormDirtyStateChanged:!0,onFormDisabledStateChanged:!0,onFormHasErrors:!0,onFormHasNoErrors:!0,onFormInit:!0,onFormModelInitialized:!0,onFormReadOnlyStateChanged:!0,onFormReadyStateChanged:!0,onFormValidated:!0,onFormValuesChanged:!0,onOpen:!0,onOpened:!0,onSubmit:!0,onSubmitComplete:!0,onSubmitError:!0,onSubmitSuccess:!0,onSubmitValidation:!0,onCancel:!0,language:!0,translation:!0});return t.buttons=null,[l,{...t,...e,language:n.language,translation:n.translation}]},[e,n]);try{b.displayName="DFormModal",b.__docgenInfo={description:"",displayName:"DFormModal",props:{visible:{defaultValue:null,description:"@deprecated Please use `open` instead.",name:"visible",required:!1,type:{name:"boolean"}},prefixCls:{defaultValue:null,description:"",name:"prefixCls",required:!1,type:{name:"string"}},forceRender:{defaultValue:null,description:"Force render Modal",name:"forceRender",required:!1,type:{name:"boolean"}},transitionName:{defaultValue:null,description:"",name:"transitionName",required:!1,type:{name:"string"}},animation:{defaultValue:null,description:"",name:"animation",required:!1,type:{name:"any"}},zIndex:{defaultValue:null,description:"",name:"zIndex",required:!1,type:{name:"number"}},className:{defaultValue:null,description:"Form CSS class",name:"className",required:!1,type:{name:"string"}},rootClassName:{defaultValue:null,description:"",name:"rootClassName",required:!1,type:{name:"string"}},width:{defaultValue:null,description:"initial form width",name:"width",required:!1,type:{name:"string | number"}},title:{defaultValue:null,description:"The modal dialog's title",name:"title",required:!1,type:{name:"ReactNode"}},loading:{defaultValue:null,description:"@since 5.18.0",name:"loading",required:!1,type:{name:"boolean"}},open:{defaultValue:null,description:"Whether the modal dialog is visible or not",name:"open",required:!1,type:{name:"boolean"}},height:{defaultValue:null,description:"Initial form height",name:"height",required:!1,type:{name:"string | number"}},maxHeight:{defaultValue:null,description:"Maximum form height",name:"maxHeight",required:!1,type:{name:"string | number"}},minHeight:{defaultValue:null,description:"Minimum form height",name:"minHeight",required:!1,type:{name:"string | number"}},minWidth:{defaultValue:null,description:"Minimum form width",name:"minWidth",required:!1,type:{name:"string | number"}},maxWidth:{defaultValue:null,description:"Maximum form width",name:"maxWidth",required:!1,type:{name:"string | number"}},classNames:{defaultValue:null,description:"",name:"classNames",required:!1,type:{name:"ModalClassNames"}},colorType:{defaultValue:null,description:"Form color type",name:"colorType",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"warning"'},{value:'"neutral"'},{value:'"info"'},{value:'"danger"'}]}},centered:{defaultValue:null,description:"Centered Modal",name:"centered",required:!1,type:{name:"boolean"}},closable:{defaultValue:null,description:"Whether a close (x) button is visible on top right of the modal dialog or not. Recommend to use closeIcon instead.",name:"closable",required:!1,type:{name:"ClosableType"}},mask:{defaultValue:null,description:"",name:"mask",required:!1,type:{name:"boolean"}},afterClose:{defaultValue:null,description:"",name:"afterClose",required:!1,type:{name:"(() => void)"}},mousePosition:{defaultValue:null,description:"",name:"mousePosition",required:!1,type:{name:"MousePosition"}},maskTransitionName:{defaultValue:null,description:"",name:"maskTransitionName",required:!1,type:{name:"string"}},maskAnimation:{defaultValue:null,description:"",name:"maskAnimation",required:!1,type:{name:"any"}},wrapStyle:{defaultValue:null,description:"",name:"wrapStyle",required:!1,type:{name:"Record<string, any>"}},maskStyle:{defaultValue:null,description:"@deprecated Please use `styles.mask` instead",name:"maskStyle",required:!1,type:{name:"CSSProperties"}},wrapClassName:{defaultValue:null,description:"",name:"wrapClassName",required:!1,type:{name:"string"}},bodyProps:{defaultValue:null,description:"",name:"bodyProps",required:!1,type:{name:"any"}},maskProps:{defaultValue:null,description:"",name:"maskProps",required:!1,type:{name:"any"}},wrapProps:{defaultValue:null,description:"",name:"wrapProps",required:!1,type:{name:"any"}},getContainer:{defaultValue:null,description:"",name:"getContainer",required:!1,type:{name:"string | false | HTMLElement | getContainerFunc"}},closeIcon:{defaultValue:null,description:"",name:"closeIcon",required:!1,type:{name:"ReactNode"}},modalRender:{defaultValue:null,description:"",name:"modalRender",required:!1,type:{name:"((node: ReactNode) => ReactNode)"}},focusTriggerAfterClose:{defaultValue:null,description:"",name:"focusTriggerAfterClose",required:!1,type:{name:"boolean"}},panelRef:{defaultValue:null,description:"",name:"panelRef",required:!1,type:{name:"Ref<HTMLDivElement>"}},confirmLoading:{defaultValue:null,description:"Whether to apply loading visual effect for OK button or not",name:"confirmLoading",required:!1,type:{name:"boolean"}},notScrollable:{defaultValue:null,description:"Is the form body not scrollable",name:"notScrollable",required:!1,type:{name:"boolean"}},resizable:{defaultValue:null,description:"Is the for can be resized (show the resize handler). Default: true",name:"resizable",required:!1,type:{name:"boolean"}},headerIcon:{defaultValue:null,description:"Form header icon",name:"headerIcon",required:!1,type:{name:"ReactNode"}},isDraggable:{defaultValue:null,description:"Is the form draggable",name:"isDraggable",required:!1,type:{name:"boolean"}},onAfterOpenChange:{defaultValue:null,description:"Callback when the animation ends when Modal is turned on and off",name:"onAfterOpenChange",required:!1,type:{name:"((open: boolean) => void)"}},onOpen:{defaultValue:null,description:"Fires when the form is opening",name:"onOpen",required:!1,type:{name:"((formApi: IDFormModalApi, dataSet: IDFormDataSet) => boolean | void)"}},onOpened:{defaultValue:null,description:"Fires when the form is opened",name:"onOpened",required:!1,type:{name:"((formApi: IDFormModalApi, dataSet: IDFormDataSet) => void)"}},onClosing:{defaultValue:null,description:"Fires when the form is closing",name:"onClosing",required:!1,type:{name:"((formApi: IDFormModalApi) => boolean | void)"}},onClosed:{defaultValue:null,description:"Fires when the form is closed",name:"onClosed",required:!1,type:{name:"((formApi: IDFormModalApi) => void)"}},onCancel:{defaultValue:null,description:"Fires when the form is canceled",name:"onCancel",required:!1,type:{name:"((formApi: IDFormModalApi) => void)"}},onFormDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of the form changed",name:"onFormDirtyStateChanged",required:!1,type:{name:"(((state: boolean, api: IDFormModalApi) => void) & ((state: boolean, api: IDFormApi) => void))"}},onFormReadOnlyStateChanged:{defaultValue:null,description:"fires when the read only state of the form changed",name:"onFormReadOnlyStateChanged",required:!1,type:{name:"(((state: boolean, api: IDFormModalApi) => void) & ((state: boolean, api: IDFormApi) => void))"}},onFormDisabledStateChanged:{defaultValue:null,description:"fires when the disabled state of the form changed",name:"onFormDisabledStateChanged",required:!1,type:{name:"(((state: boolean, api: IDFormModalApi) => void) & ((state: boolean, api: IDFormApi) => void))"}},onFormInit:{defaultValue:null,description:"fires when the form began initialization (renders for the first time)",name:"onFormInit",required:!1,type:{name:"(((api: IDFormModalApi) => void) & ((api: IDFormApi) => void))"}},onFormModelInitialized:{defaultValue:null,description:"fires when the form model has been initialized",name:"onFormModelInitialized",required:!1,type:{name:"(((api: IDFormModalApi) => void) & ((api: IDFormApi) => void))"}},onFormReadyStateChanged:{defaultValue:null,description:"fires when the form ready status changed (form ready means form is rendered, initialized and all fields data are loaded)",name:"onFormReadyStateChanged",required:!1,type:{name:"(((state: boolean, api: IDFormModalApi) => boolean | void) & ((state: boolean, api: IDFormApi) => boolean | void))"}},onFormValuesChanged:{defaultValue:null,description:"fires when the form values changed",name:"onFormValuesChanged",required:!1,type:{name:"(((fieldName: string, values: Record<string, unknown>, api: IDFormModalApi) => void) & ((fieldName: string, values: Record<string, unknown>, api: IDFormApi) => void))"}},onFormValidated:{defaultValue:null,description:"fires when the form validated",name:"onFormValidated",required:!1,type:{name:"(((values: Record<string, unknown>, errors: Record<string, string>, isSubmit: boolean, api: IDFormModalApi) => void) & ((values: Record<string, unknown>, errors: Record<...>, isSubmit: boolean, api: IDFormApi) => void))"}},onFormHasErrors:{defaultValue:null,description:"fires when the form has errors",name:"onFormHasErrors",required:!1,type:{name:"(((values: Record<string, unknown>, errors: Record<string, unknown>, api: IDFormModalApi) => void) & ((values: Record<string, unknown>, errors: Record<string, unknown>, api: IDFormApi) => void))"}},onFormHasNoErrors:{defaultValue:null,description:"fires when the form has no errors",name:"onFormHasNoErrors",required:!1,type:{name:"(((values: Record<string, unknown>, api: IDFormModalApi) => boolean | void) & ((values: Record<string, unknown>, api: IDFormApi) => boolean | void))"}},onDataFetch:{defaultValue:null,description:"fires when the form trying to fetch data",name:"onDataFetch",required:!1,type:{name:"(((api: IDFormModalApi) => IDFormDataSourcePromise) & ((api: IDFormApi) => IDFormDataSourcePromise)) | undefined"}},onDataFetchSuccess:{defaultValue:null,description:"fires when the form fetch success",name:"onDataFetchSuccess",required:!1,type:{name:"(((result: { data: Record<string, unknown>; }, api: IDFormModalApi) => boolean | void) & ((result: { data: Record<string, unknown>; }, api: IDFormApi) => boolean | void))"}},onDataFetchError:{defaultValue:null,description:"fires when the form fetch failed",name:"onDataFetchError",required:!1,type:{name:"(((error: IError, api: IDFormModalApi) => boolean | void) & ((error: IError, api: IDFormApi) => boolean | void))"}},onDataFetchComplete:{defaultValue:null,description:"fires after the completion of fetching the data, regardless of the result",name:"onDataFetchComplete",required:!1,type:{name:"(((api: IDFormModalApi) => void) & ((api: IDFormApi) => void))"}},onSubmit:{defaultValue:null,description:"Fires on submitting the form. Can returns Promise, Object, Boolean or Void",name:"onSubmit",required:!1,type:{name:"(((values: Record<string, unknown>, api: IDFormModalApi) => boolean | void | IDFormSubmitResultPromise | IDFormSubmitResultObject) & ((values: Record<...>, api: IDFormApi) => boolean | ... 2 more ... | IDFormSubmitResultObject))"}},onSubmitValidation:{defaultValue:null,description:"fires on submit validation",name:"onSubmitValidation",required:!1,type:{name:"(((values: Record<string, unknown>, errors: Record<string, string>, api: IDFormModalApi) => void) & ((values: Record<string, unknown>, errors: Record<...>, api: IDFormApi) => void))"}},onSubmitSuccess:{defaultValue:null,description:"fires on submit failed",name:"onSubmitSuccess",required:!1,type:{name:"(((values: Record<string, unknown>, resultValues: Record<string, unknown>, api: IDFormModalApi) => boolean | void) & ((values: Record<string, unknown>, resultValues: Record<...>, api: IDFormApi) => boolean | void)) | undefined"}},onSubmitError:{defaultValue:null,description:"fires on submit error",name:"onSubmitError",required:!1,type:{name:"(((values: Record<string, unknown>, error: IError, api: IDFormModalApi) => boolean | void) & ((values: Record<string, unknown>, error: IError, api: IDFormApi) => boolean | void))"}},onSubmitComplete:{defaultValue:null,description:"fires, when the submitting finishes, whether in failure or success.",name:"onSubmitComplete",required:!1,type:{name:"(((values: Record<string, unknown>, errors: Record<string, string>, api: IDFormModalApi) => boolean | void) & ((values: Record<string, unknown>, errors: Record<...>, api: IDFormApi) => boolean | void))"}},onDataSetChange:{defaultValue:null,description:"fires, when the form dataSet changed. Unlike onFormValuesChanged, it is triggered only when a new dataSet is set via setFormValues and is not called when the user changes the field values",name:"onDataSetChange",required:!1,type:{name:"(((dataSet: IDFormDataSet, api: IDFormModalApi) => IDFormDataSet) & ((dataSet: IDFormDataSet | undefined, api: IDFormApi) => IDFormDataSet | undefined)) | undefined"}},modalStyle:{defaultValue:null,description:"Modal form style",name:"modalStyle",required:!1,type:{name:"CSSProperties"}},modalStyles:{defaultValue:null,description:"modal form components style",name:"modalStyles",required:!1,type:{name:"ModalStyles"}},closeFormConfirmMessage:{defaultValue:null,description:"Confirm message before the form closing, if form is dirty",name:"closeFormConfirmMessage",required:!1,type:{name:"ReactNode"}},language:{defaultValue:null,description:"Language",name:"language",required:!1,type:{name:"enum",value:[{value:'"ru"'},{value:'"en"'},{value:'"cn"'}]}},translation:{defaultValue:null,description:"Custom translation",name:"translation",required:!1,type:{name:"(Partial<{ cancelChangesQn: string; viewing: string; creating: string; editing: string; cloning: string; ok: string; cancel: string; yes: string; no: string; confirm: string; fixError: string; confirmChangesQs: string; tryAgainQt: string; error: string; }> & Partial<...>)"}},apiRef:{defaultValue:null,description:"A mutable object to merge with these controls api",name:"apiRef",required:!1,type:{name:"unknown"}},formId:{defaultValue:null,description:"Form formId",name:"formId",required:!1,type:{name:"string"}},buttons:{defaultValue:null,description:"Buttons properties",name:"buttons",required:!1,type:{name:"IFormButtons | null"}},formStyle:{defaultValue:null,description:"Form style",name:"formStyle",required:!1,type:{name:"CSSProperties"}},containerClassName:{defaultValue:null,description:"Form container class name",name:"containerClassName",required:!1,type:{name:"string"}},containerStyle:{defaultValue:null,description:"Form container style",name:"containerStyle",required:!1,type:{name:"CSSProperties"}},contentIndent:{defaultValue:null,description:"Indent from the beginning of the controls (default 12)",name:"contentIndent",required:!1,type:{name:"number"}},dataSet:{defaultValue:null,description:"Form data",name:"dataSet",required:!1,type:{name:"IDFormDataSet"}},parentDataSet:{defaultValue:null,description:"Parent form data",name:"parentDataSet",required:!1,type:{name:"IDFormDataSet"}},fieldsProps:{defaultValue:null,description:"Fields properties",name:"fieldsProps",required:!1,type:{name:"IDFormFieldsProps"}},labelCol:{defaultValue:null,description:"label column parameters, for example span:'8'",name:"labelCol",required:!1,type:{name:"ColProps"}},wrapperCol:{defaultValue:null,description:"wrapper column parameters, for example span:'16'",name:"wrapperCol",required:!1,type:{name:"ColProps"}},labelAlign:{defaultValue:null,description:"text align of label of all items",name:"labelAlign",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"right"'}]}},layout:{defaultValue:null,description:"Form layout (horizontal or vertical). Vertical is default",name:"layout",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},formMode:{defaultValue:null,description:"Form mode",name:"formMode",required:!1,type:{name:"enum",value:[{value:'"delete"'},{value:'"update"'},{value:'"view"'},{value:'"create"'},{value:'"clone"'}]}},readOnly:{defaultValue:null,description:"The form is read only",name:"readOnly",required:!1,type:{name:"boolean"}},disableDepended:{defaultValue:null,description:"Automatically disable fields if they depend on fields whose value is not set. Otherwise, such fields will be automatically hidden",name:"disableDepended",required:!1,type:{name:"boolean"}},tabsHeight:{defaultValue:null,description:"Tabs panes height (default 40)",name:"tabsHeight",required:!1,type:{name:"number"}},unfilledForm:{defaultValue:null,description:"No use controls data",name:"unfilledForm",required:!1,type:{name:"boolean"}},validationRules:{defaultValue:null,description:"Validation rules",name:"validationRules",required:!1,type:{name:"IDFormValidationRules"}},confirmChanges:{defaultValue:null,description:"Should the form request confirmation before the form submitting or cancel, if the form data was changed by the user",name:"confirmChanges",required:!1,type:{name:"boolean"}},submitConfirmMessage:{defaultValue:null,description:"Confirm message before the form submitting",name:"submitConfirmMessage",required:!1,type:{name:"ReactNode"}},requiredMark:{defaultValue:null,description:"Required mark style. Can use required mark or optional mark. You can not config to single Form.Item since this is a Form level config",name:"requiredMark",required:!1,type:{name:"RequiredMark"}},arrowsButtonsSelection:{defaultValue:null,description:"allow select buttons using arrows keys",name:"arrowsButtonsSelection",required:!1,type:{name:"boolean"}}}}}catch{}export{b as D};
