import{j as i}from"./extends-CKwpSh1k.js";import{B as d,i as o,D as u}from"./tabulatorGrid-DCB4UOZd.js";import"./index-DGqZ_Opy.js";import"./dayjs.min-BljPK31Q.js";import{T as s}from"./treeSelect-BWRmUO6q.js";import"./index-CTjT7uj6.js";import"./helpersObjects-NFjaQN06.js";import"./helpersString-BLksZHLM.js";import"./v4-CQkTLCs1.js";import"./updateModalTheme-DvemskeG.js";import"./draggableRender-DNX-aZJH.js";import"./index-BC6X-wEl.js";import"./useToken-DpCeTUe_.js";import"./InfoCircleOutlined-CU1G_igP.js";import"./compact-item-ayXXrr5p.js";import"./index-Boe84S0F.js";import"./assertThisInitialized-C7eLZ5Vw.js";import"./button-BSX3QbyL.js";import"./button-Crg2y5WX.js";import"./index-DEvyy-28.js";import"./ExclamationCircleFilled-DJhyVcaJ.js";import"./context-DoEgZWg9.js";import"./wrapNativeSuper-CxOa5OEc.js";import"./motion-Gs4finkr.js";import"./motion-4S5rSXvC.js";import"./CloseOutlined-CjEpmO_q.js";import"./KeyCode-DNlgD2sM.js";import"./useClosable-ezpuUIzh.js";import"./zoom-uZCgAuxp.js";import"./DownOutlined-D2B1m1ns.js";import"./index-CwWsuzc7.js";import"./buttonsRow-3L7aKrpm.js";import"./Sider-D04GUbHb.js";import"./row-DM0mVdYK.js";import"./roundedArrow-ChNxh3ai.js";import"./colors-Chrt_s-B.js";import"./index-BRV0Se7Z.js";import"./QuestionCircleOutlined-C5RUC8Xy.js";import"./index-CiVP2nX_.js";import"./tabulatorBase-DRtLU1dT.js";import"./client-B7rfcIiV.js";import"./styled-components.browser.esm-p4xx1i8F.js";import"./index-CrjOAKF0.js";import"./index-V5iYYoh6.js";import"./SearchOutlined-BNG-1YbV.js";import"./useIcons-BnJzZTBK.js";import"./datePicker-6tc3RmYQ.js";import"./quillEditor-DgPshUNI.js";import"./_baseIsEqual-C2lxlfj2.js";import"./select-BqfbI_Fd.js";import"./iframe-C9M7J8JP.js";import"../sb-preview/runtime.js";import"./MenuOutlined-ld3ZYX5f.js";import"./_commonjs-dynamic-modules-TDtrdbi3.js";class p extends d{render(){return i.jsx(o,{field:this})}}const l=e=>i.jsx(u,{buttons:null,fieldsProps:{field1:{...e,dataSet:s,component:p}}}),m=l;try{l.displayName="TreeSelectComponent",l.__docgenInfo={description:"DForm TreeSelect field",displayName:"TreeSelectComponent",props:{value:{defaultValue:null,description:"Default value",name:"value",required:!1,type:{name:"string | ITreeSelectValue"}},onReady:{defaultValue:null,description:"",name:"onReady",required:!1,type:{name:"((field: TreeSelectField) => void)"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => TreeSelectField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},inlineGroup:{defaultValue:null,description:"inline group name",name:"inlineGroup",required:!1,type:{name:"string"}},hidden:{defaultValue:null,description:"Whether the field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"Whether the field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:`Whether the field default state is readonly
Is TreeSelect read only`,name:"readOnly",required:!1,type:{name:"boolean"}},nonEditable:{defaultValue:null,description:"Whether the field can not be edited (the field will have readOnly state if formMode is 'update')",name:"nonEditable",required:!1,type:{name:"boolean"}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: unknown, prevValue: unknown, field: TreeSelectField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: TreeSelectField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: TreeSelectField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: unknown, error: string, isSubmit: boolean, field: TreeSelectField) => void)"}},builtinPlacements:{defaultValue:null,description:"",name:"builtinPlacements",required:!1,type:{name:"BuildInPlacements"}},prefixCls:{defaultValue:null,description:"",name:"prefixCls",required:!1,type:{name:"string"}},placement:{defaultValue:null,description:"",name:"placement",required:!1,type:{name:"enum",value:[{value:'"bottomLeft"'},{value:'"bottomRight"'},{value:'"topLeft"'},{value:'"topRight"'}]}},transitionName:{defaultValue:null,description:"",name:"transitionName",required:!1,type:{name:"string"}},animation:{defaultValue:null,description:"",name:"animation",required:!1,type:{name:"string"}},showArrow:{defaultValue:null,description:"@deprecated `showArrow` is deprecated which will be removed in next major version. It will be a\ndefault behavior, you can hide it by setting `suffixIcon` to null.",name:"showArrow",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"",name:"id",required:!1,type:{name:"string"}},getRawInputElement:{defaultValue:null,description:"@private Internal usage. Do not use in your production.",name:"getRawInputElement",required:!1,type:{name:"(() => Element)"}},searchValue:{defaultValue:null,description:"",name:"searchValue",required:!1,type:{name:"string"}},autoClearSearchValue:{defaultValue:null,description:"",name:"autoClearSearchValue",required:!1,type:{name:"boolean"}},onSearch:{defaultValue:null,description:"",name:"onSearch",required:!1,type:{name:"((value: string) => void)"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},title:{defaultValue:null,description:"",name:"title",required:!1,type:{name:"string"}},showSearch:{defaultValue:null,description:"",name:"showSearch",required:!1,type:{name:"boolean"}},tagRender:{defaultValue:null,description:"",name:"tagRender",required:!1,type:{name:"((props: CustomTagProps) => ReactElement<any, string | JSXElementConstructor<any>>)"}},direction:{defaultValue:null,description:"",name:"direction",required:!1,type:{name:"enum",value:[{value:'"ltr"'},{value:'"rtl"'}]}},maxLength:{defaultValue:null,description:"",name:"maxLength",required:!1,type:{name:"number"}},tabIndex:{defaultValue:null,description:"",name:"tabIndex",required:!1,type:{name:"number"}},notFoundContent:{defaultValue:null,description:"",name:"notFoundContent",required:!1,type:{name:"ReactNode"}},onClear:{defaultValue:null,description:"Fires on input value cleared",name:"onClear",required:!1,type:{name:"(() => void)"}},choiceTransitionName:{defaultValue:null,description:"",name:"choiceTransitionName",required:!1,type:{name:"string"}},loading:{defaultValue:null,description:"",name:"loading",required:!1,type:{name:"boolean"}},open:{defaultValue:null,description:"",name:"open",required:!1,type:{name:"boolean"}},defaultOpen:{defaultValue:null,description:"",name:"defaultOpen",required:!1,type:{name:"boolean"}},onDropdownVisibleChange:{defaultValue:null,description:"",name:"onDropdownVisibleChange",required:!1,type:{name:"((open: boolean) => void)"}},maxTagTextLength:{defaultValue:null,description:"",name:"maxTagTextLength",required:!1,type:{name:"number"}},maxTagCount:{defaultValue:null,description:"",name:"maxTagCount",required:!1,type:{name:'number | "responsive"'}},maxTagPlaceholder:{defaultValue:null,description:"",name:"maxTagPlaceholder",required:!1,type:{name:"ReactNode | ((omittedValues: DisplayValueType[]) => ReactNode)"}},tokenSeparators:{defaultValue:null,description:"",name:"tokenSeparators",required:!1,type:{name:"string[]"}},allowClear:{defaultValue:null,description:"",name:"allowClear",required:!1,type:{name:"boolean | { clearIcon?: RenderNode; }"}},suffixIcon:{defaultValue:null,description:"",name:"suffixIcon",required:!1,type:{name:"ReactNode"}},clearIcon:{defaultValue:null,description:"Clear all icon\n@deprecated Please use `allowClear` instead",name:"clearIcon",required:!1,type:{name:"RenderNode"}},removeIcon:{defaultValue:null,description:"Selector remove icon",name:"removeIcon",required:!1,type:{name:"RenderNode"}},dropdownStyle:{defaultValue:null,description:"",name:"dropdownStyle",required:!1,type:{name:"CSSProperties"}},dropdownClassName:{defaultValue:null,description:"@deprecated Please use `popupClassName` instead",name:"dropdownClassName",required:!1,type:{name:"string"}},dropdownMatchSelectWidth:{defaultValue:null,description:"@deprecated Please use `popupMatchSelectWidth` instead",name:"dropdownMatchSelectWidth",required:!1,type:{name:"number | boolean"}},dropdownRender:{defaultValue:null,description:"",name:"dropdownRender",required:!1,type:{name:"((menu: ReactElement<any, string | JSXElementConstructor<any>>) => ReactElement<any, string | JSXElementConstructor<any>>)"}},dropdownAlign:{defaultValue:null,description:"",name:"dropdownAlign",required:!1,type:{name:"AlignType"}},getPopupContainer:{defaultValue:null,description:"",name:"getPopupContainer",required:!1,type:{name:"RenderDOMFunc"}},showAction:{defaultValue:null,description:"",name:"showAction",required:!1,type:{name:'("focus" | "click")[]'}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLDivElement>"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLDivElement>"}},onMouseDown:{defaultValue:null,description:"",name:"onMouseDown",required:!1,type:{name:"MouseEventHandler<HTMLDivElement>"}},onPopupScroll:{defaultValue:null,description:"",name:"onPopupScroll",required:!1,type:{name:"UIEventHandler<HTMLDivElement>"}},onInputKeyDown:{defaultValue:null,description:"",name:"onInputKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onMouseEnter:{defaultValue:null,description:"",name:"onMouseEnter",required:!1,type:{name:"MouseEventHandler<HTMLDivElement>"}},onMouseLeave:{defaultValue:null,description:"",name:"onMouseLeave",required:!1,type:{name:"MouseEventHandler<HTMLDivElement>"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLDivElement>"}},fieldNames:{defaultValue:null,description:"Customize node label, value, children field name",name:"fieldNames",required:!1,type:{name:"(ITeeSelectFieldNames & FieldNames)"}},inputValue:{defaultValue:null,description:"@deprecated Use `searchValue` instead",name:"inputValue",required:!1,type:{name:"string"}},onSelect:{defaultValue:null,description:"",name:"onSelect",required:!1,type:{name:"SelectHandler<unknown, BaseOptionType | DefaultOptionType>"}},onDeselect:{defaultValue:null,description:"",name:"onDeselect",required:!1,type:{name:"SelectHandler<unknown, BaseOptionType | DefaultOptionType>"}},virtual:{defaultValue:null,description:"",name:"virtual",required:!1,type:{name:"boolean"}},listHeight:{defaultValue:null,description:"",name:"listHeight",required:!1,type:{name:"number"}},listItemHeight:{defaultValue:null,description:"",name:"listItemHeight",required:!1,type:{name:"number"}},labelRender:{defaultValue:null,description:"Label renderer",name:"labelRender",required:!1,type:{name:"((treeNode: Record<string, unknown> | ITreeSelectNode<Record<string, unknown>>) => ReactNode)"}},labelInValue:{defaultValue:null,description:"",name:"labelInValue",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"unknown"}},onChange:{defaultValue:null,description:"Fires on change selected values",name:"onChange",required:!1,type:{name:"((value: ITreeSelectValue) => void)"}},rootClassName:{defaultValue:null,description:"",name:"rootClassName",required:!1,type:{name:"string"}},size:{defaultValue:null,description:"",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"middle"'},{value:'"large"'}]}},bordered:{defaultValue:null,description:"@deprecated Use `variant` instead.",name:"bordered",required:!1,type:{name:"boolean"}},variant:{defaultValue:{value:'"outlined"'},description:"@since 5.13.0",name:"variant",required:!1,type:{name:"enum",value:[{value:'"outlined"'},{value:'"borderless"'},{value:'"filled"'}]}},multiple:{defaultValue:null,description:"",name:"multiple",required:!1,type:{name:"boolean"}},status:{defaultValue:null,description:"",name:"status",required:!1,type:{name:"enum",value:[{value:'""'},{value:'"warning"'},{value:'"error"'}]}},popupClassName:{defaultValue:null,description:"",name:"popupClassName",required:!1,type:{name:"string"}},popupMatchSelectWidth:{defaultValue:null,description:"",name:"popupMatchSelectWidth",required:!1,type:{name:"number | boolean"}},ref:{defaultValue:null,description:"Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null`\n(or call the ref with `null` if you passed a callback ref).\n@see {@link https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom React Docs}",name:"ref",required:!1,type:{name:"LegacyRef<BaseSelectRef>"}},dataSet:{defaultValue:null,description:"Local data set",name:"dataSet",required:!1,type:{name:"ITreeSelectNode<Record<string, unknown>>[]"}},onDataFetch:{defaultValue:null,description:"fires when the TreeSelect trying to fetch data",name:"onDataFetch",required:!1,type:{name:"((search: string, api: ITreeSelectApi) => ITreeSelectSourcePromise)"}},onDelete:{defaultValue:null,description:"Callback executed when selected node delete",name:"onDelete",required:!1,type:{name:"((selectedNodes: ITreeSelectNode<Record<string, unknown>>[], api: ITreeSelectApi) => void | ITreeSelectDeletePromise)"}},apiRef:{defaultValue:null,description:"A mutable object to merge with these controls api",name:"apiRef",required:!1,type:{name:"ITreeSelectApi"}},editFormProps:{defaultValue:null,description:"Edit item controls props. If not set then component not editable",name:"editFormProps",required:!1,type:{name:"IDFormModalProps"}},confirmDelete:{defaultValue:null,description:"Should confirm before delete",name:"confirmDelete",required:!1,type:{name:"boolean"}},onDataFetchSuccess:{defaultValue:null,description:"fires when the TreeSelect fetch success",name:"onDataFetchSuccess",required:!1,type:{name:"((result: { data: ITreeSelectNode<Record<string, unknown>>[]; }, api: ITreeSelectApi) => boolean | void)"}},onDataFetchError:{defaultValue:null,description:"fires when the TreeSelect fetch failed",name:"onDataFetchError",required:!1,type:{name:"((message: string, code: number, api: ITreeSelectApi) => boolean | void)"}},onDataFetchComplete:{defaultValue:null,description:"fires after the completion of fetching the data, regardless of the result",name:"onDataFetchComplete",required:!1,type:{name:"((api: ITreeSelectApi) => boolean | void)"}},treeLine:{defaultValue:null,description:"",name:"treeLine",required:!1,type:{name:"boolean | { showLeafIcon: TreeLeafIcon; }"}},switcherIcon:{defaultValue:null,description:"",name:"switcherIcon",required:!1,type:{name:"string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ... 4 more ..."}},filterTreeNode:{defaultValue:null,description:"Custom filter",name:"filterTreeNode",required:!1,type:{name:"((boolean | ((inputValue: string, treeNode: Record<string, unknown> | ITreeSelectNode<Record<string, unknown>>) => boolean)) & (boolean | ((inputValue: string, treeNode: DefaultOptionType) => boolean)))"}},treeNodeFilterProp:{defaultValue:null,description:"",name:"treeNodeFilterProp",required:!1,type:{name:"string"}},showCheckedStrategy:{defaultValue:null,description:"",name:"showCheckedStrategy",required:!1,type:{name:"enum",value:[{value:'"SHOW_ALL"'},{value:'"SHOW_PARENT"'},{value:'"SHOW_CHILD"'}]}},treeCheckable:{defaultValue:null,description:"",name:"treeCheckable",required:!1,type:{name:"ReactNode"}},treeCheckStrictly:{defaultValue:null,description:"",name:"treeCheckStrictly",required:!1,type:{name:"boolean"}},treeDataSimpleMode:{defaultValue:null,description:"",name:"treeDataSimpleMode",required:!1,type:{name:"boolean | SimpleModeConfig"}},treeLoadedKeys:{defaultValue:null,description:"",name:"treeLoadedKeys",required:!1,type:{name:"Key[]"}},onTreeLoad:{defaultValue:null,description:"",name:"onTreeLoad",required:!1,type:{name:"((loadedKeys: Key[]) => void)"}},treeDefaultExpandAll:{defaultValue:null,description:"",name:"treeDefaultExpandAll",required:!1,type:{name:"boolean"}},treeExpandedKeys:{defaultValue:null,description:"",name:"treeExpandedKeys",required:!1,type:{name:"Key[]"}},treeDefaultExpandedKeys:{defaultValue:null,description:"",name:"treeDefaultExpandedKeys",required:!1,type:{name:"Key[]"}},onTreeExpand:{defaultValue:null,description:"",name:"onTreeExpand",required:!1,type:{name:"((expandedKeys: Key[]) => void)"}},treeExpandAction:{defaultValue:null,description:"",name:"treeExpandAction",required:!1,type:{name:"ExpandAction"}},listItemScrollOffset:{defaultValue:null,description:"",name:"listItemScrollOffset",required:!1,type:{name:"number"}},treeTitleRender:{defaultValue:null,description:"",name:"treeTitleRender",required:!1,type:{name:"((node: unknown) => ReactNode)"}},treeIcon:{defaultValue:null,description:"",name:"treeIcon",required:!1,type:{name:"IconType"}},titleRender:{defaultValue:null,description:"Title renderer",name:"titleRender",required:!1,type:{name:"((treeNode: Record<string, unknown> | ITreeSelectNode<Record<string, unknown>>) => ReactNode)"}},treeSelectId:{defaultValue:null,description:"Tree TreeSelect id",name:"treeSelectId",required:!1,type:{name:"string"}},defaultValueCallback:{defaultValue:null,description:"Value",name:"defaultValueCallback",required:!1,type:{name:"((data: ITreeSelectNode<Record<string, unknown>>[]) => ITreeSelectNode<Record<string, unknown>> | ITreeSelectNode<Record<string, unknown>>[])"}},fetchMode:{defaultValue:null,description:"Start fetching remote data on load control or on use control (example, open dropdown). Default OnLoad",name:"fetchMode",required:!1,type:{name:"enum",value:[{value:'"onLoad"'},{value:'"onUse"'},{value:'"onUseForce"'}]}},noCacheFetchedData:{defaultValue:null,description:"Loaded data without parameters (like searchString) will not be cached",name:"noCacheFetchedData",required:!1,type:{name:"boolean"}},minSearchLength:{defaultValue:null,description:"Minimum length of search string before fetch data",name:"minSearchLength",required:!1,type:{name:"number"}},debounce:{defaultValue:null,description:"debounce in ms",name:"debounce",required:!1,type:{name:"number"}},selectedLabelProp:{defaultValue:null,description:"Selected value label. Will render as content of select. Default: title",name:"selectedLabelProp",required:!1,type:{name:"string"}},nodeDeleteMessage:{defaultValue:null,description:"Confirm message before node delete",name:"nodeDeleteMessage",required:!1,type:{name:"ReactNode"}},editButtons:{defaultValue:null,description:"Edit buttons",name:"editButtons",required:!1,type:{name:"IFormButtons"}},plainList:{defaultValue:null,description:"If true, the component is expected to contain a flat list (no children). In this case, the space for the expand/collapse icon will be hidden",name:"plainList",required:!1,type:{name:"boolean"}}}}}catch{}try{treeSelectComponent.displayName="treeSelectComponent",treeSelectComponent.__docgenInfo={description:"DForm TreeSelect field",displayName:"treeSelectComponent",props:{value:{defaultValue:null,description:"Default value",name:"value",required:!1,type:{name:"string | ITreeSelectValue"}},onReady:{defaultValue:null,description:"",name:"onReady",required:!1,type:{name:"((field: TreeSelectField) => void)"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => TreeSelectField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},inlineGroup:{defaultValue:null,description:"inline group name",name:"inlineGroup",required:!1,type:{name:"string"}},hidden:{defaultValue:null,description:"Whether the field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"Whether the field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:`Whether the field default state is readonly
Is TreeSelect read only`,name:"readOnly",required:!1,type:{name:"boolean"}},nonEditable:{defaultValue:null,description:"Whether the field can not be edited (the field will have readOnly state if formMode is 'update')",name:"nonEditable",required:!1,type:{name:"boolean"}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: unknown, prevValue: unknown, field: TreeSelectField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: TreeSelectField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: TreeSelectField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: TreeSelectField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: unknown, error: string, isSubmit: boolean, field: TreeSelectField) => void)"}},builtinPlacements:{defaultValue:null,description:"",name:"builtinPlacements",required:!1,type:{name:"BuildInPlacements"}},prefixCls:{defaultValue:null,description:"",name:"prefixCls",required:!1,type:{name:"string"}},placement:{defaultValue:null,description:"",name:"placement",required:!1,type:{name:"enum",value:[{value:'"bottomLeft"'},{value:'"bottomRight"'},{value:'"topLeft"'},{value:'"topRight"'}]}},transitionName:{defaultValue:null,description:"",name:"transitionName",required:!1,type:{name:"string"}},animation:{defaultValue:null,description:"",name:"animation",required:!1,type:{name:"string"}},showArrow:{defaultValue:null,description:"@deprecated `showArrow` is deprecated which will be removed in next major version. It will be a\ndefault behavior, you can hide it by setting `suffixIcon` to null.",name:"showArrow",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"",name:"id",required:!1,type:{name:"string"}},getRawInputElement:{defaultValue:null,description:"@private Internal usage. Do not use in your production.",name:"getRawInputElement",required:!1,type:{name:"(() => Element)"}},searchValue:{defaultValue:null,description:"",name:"searchValue",required:!1,type:{name:"string"}},autoClearSearchValue:{defaultValue:null,description:"",name:"autoClearSearchValue",required:!1,type:{name:"boolean"}},onSearch:{defaultValue:null,description:"",name:"onSearch",required:!1,type:{name:"((value: string) => void)"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},title:{defaultValue:null,description:"",name:"title",required:!1,type:{name:"string"}},showSearch:{defaultValue:null,description:"",name:"showSearch",required:!1,type:{name:"boolean"}},tagRender:{defaultValue:null,description:"",name:"tagRender",required:!1,type:{name:"((props: CustomTagProps) => ReactElement<any, string | JSXElementConstructor<any>>)"}},direction:{defaultValue:null,description:"",name:"direction",required:!1,type:{name:"enum",value:[{value:'"ltr"'},{value:'"rtl"'}]}},maxLength:{defaultValue:null,description:"",name:"maxLength",required:!1,type:{name:"number"}},tabIndex:{defaultValue:null,description:"",name:"tabIndex",required:!1,type:{name:"number"}},notFoundContent:{defaultValue:null,description:"",name:"notFoundContent",required:!1,type:{name:"ReactNode"}},onClear:{defaultValue:null,description:"Fires on input value cleared",name:"onClear",required:!1,type:{name:"(() => void)"}},choiceTransitionName:{defaultValue:null,description:"",name:"choiceTransitionName",required:!1,type:{name:"string"}},loading:{defaultValue:null,description:"",name:"loading",required:!1,type:{name:"boolean"}},open:{defaultValue:null,description:"",name:"open",required:!1,type:{name:"boolean"}},defaultOpen:{defaultValue:null,description:"",name:"defaultOpen",required:!1,type:{name:"boolean"}},onDropdownVisibleChange:{defaultValue:null,description:"",name:"onDropdownVisibleChange",required:!1,type:{name:"((open: boolean) => void)"}},maxTagTextLength:{defaultValue:null,description:"",name:"maxTagTextLength",required:!1,type:{name:"number"}},maxTagCount:{defaultValue:null,description:"",name:"maxTagCount",required:!1,type:{name:'number | "responsive"'}},maxTagPlaceholder:{defaultValue:null,description:"",name:"maxTagPlaceholder",required:!1,type:{name:"ReactNode | ((omittedValues: DisplayValueType[]) => ReactNode)"}},tokenSeparators:{defaultValue:null,description:"",name:"tokenSeparators",required:!1,type:{name:"string[]"}},allowClear:{defaultValue:null,description:"",name:"allowClear",required:!1,type:{name:"boolean | { clearIcon?: RenderNode; }"}},suffixIcon:{defaultValue:null,description:"",name:"suffixIcon",required:!1,type:{name:"ReactNode"}},clearIcon:{defaultValue:null,description:"Clear all icon\n@deprecated Please use `allowClear` instead",name:"clearIcon",required:!1,type:{name:"RenderNode"}},removeIcon:{defaultValue:null,description:"Selector remove icon",name:"removeIcon",required:!1,type:{name:"RenderNode"}},dropdownStyle:{defaultValue:null,description:"",name:"dropdownStyle",required:!1,type:{name:"CSSProperties"}},dropdownClassName:{defaultValue:null,description:"@deprecated Please use `popupClassName` instead",name:"dropdownClassName",required:!1,type:{name:"string"}},dropdownMatchSelectWidth:{defaultValue:null,description:"@deprecated Please use `popupMatchSelectWidth` instead",name:"dropdownMatchSelectWidth",required:!1,type:{name:"number | boolean"}},dropdownRender:{defaultValue:null,description:"",name:"dropdownRender",required:!1,type:{name:"((menu: ReactElement<any, string | JSXElementConstructor<any>>) => ReactElement<any, string | JSXElementConstructor<any>>)"}},dropdownAlign:{defaultValue:null,description:"",name:"dropdownAlign",required:!1,type:{name:"AlignType"}},getPopupContainer:{defaultValue:null,description:"",name:"getPopupContainer",required:!1,type:{name:"RenderDOMFunc"}},showAction:{defaultValue:null,description:"",name:"showAction",required:!1,type:{name:'("focus" | "click")[]'}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLDivElement>"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLDivElement>"}},onMouseDown:{defaultValue:null,description:"",name:"onMouseDown",required:!1,type:{name:"MouseEventHandler<HTMLDivElement>"}},onPopupScroll:{defaultValue:null,description:"",name:"onPopupScroll",required:!1,type:{name:"UIEventHandler<HTMLDivElement>"}},onInputKeyDown:{defaultValue:null,description:"",name:"onInputKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onMouseEnter:{defaultValue:null,description:"",name:"onMouseEnter",required:!1,type:{name:"MouseEventHandler<HTMLDivElement>"}},onMouseLeave:{defaultValue:null,description:"",name:"onMouseLeave",required:!1,type:{name:"MouseEventHandler<HTMLDivElement>"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLDivElement>"}},fieldNames:{defaultValue:null,description:"Customize node label, value, children field name",name:"fieldNames",required:!1,type:{name:"(ITeeSelectFieldNames & FieldNames)"}},inputValue:{defaultValue:null,description:"@deprecated Use `searchValue` instead",name:"inputValue",required:!1,type:{name:"string"}},onSelect:{defaultValue:null,description:"",name:"onSelect",required:!1,type:{name:"SelectHandler<unknown, BaseOptionType | DefaultOptionType>"}},onDeselect:{defaultValue:null,description:"",name:"onDeselect",required:!1,type:{name:"SelectHandler<unknown, BaseOptionType | DefaultOptionType>"}},virtual:{defaultValue:null,description:"",name:"virtual",required:!1,type:{name:"boolean"}},listHeight:{defaultValue:null,description:"",name:"listHeight",required:!1,type:{name:"number"}},listItemHeight:{defaultValue:null,description:"",name:"listItemHeight",required:!1,type:{name:"number"}},labelRender:{defaultValue:null,description:"Label renderer",name:"labelRender",required:!1,type:{name:"((treeNode: Record<string, unknown> | ITreeSelectNode<Record<string, unknown>>) => ReactNode)"}},labelInValue:{defaultValue:null,description:"",name:"labelInValue",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"unknown"}},onChange:{defaultValue:null,description:"Fires on change selected values",name:"onChange",required:!1,type:{name:"((value: ITreeSelectValue) => void)"}},rootClassName:{defaultValue:null,description:"",name:"rootClassName",required:!1,type:{name:"string"}},size:{defaultValue:null,description:"",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"middle"'},{value:'"large"'}]}},bordered:{defaultValue:null,description:"@deprecated Use `variant` instead.",name:"bordered",required:!1,type:{name:"boolean"}},variant:{defaultValue:{value:'"outlined"'},description:"@since 5.13.0",name:"variant",required:!1,type:{name:"enum",value:[{value:'"outlined"'},{value:'"borderless"'},{value:'"filled"'}]}},multiple:{defaultValue:null,description:"",name:"multiple",required:!1,type:{name:"boolean"}},status:{defaultValue:null,description:"",name:"status",required:!1,type:{name:"enum",value:[{value:'""'},{value:'"warning"'},{value:'"error"'}]}},popupClassName:{defaultValue:null,description:"",name:"popupClassName",required:!1,type:{name:"string"}},popupMatchSelectWidth:{defaultValue:null,description:"",name:"popupMatchSelectWidth",required:!1,type:{name:"number | boolean"}},ref:{defaultValue:null,description:"Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null`\n(or call the ref with `null` if you passed a callback ref).\n@see {@link https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom React Docs}",name:"ref",required:!1,type:{name:"LegacyRef<BaseSelectRef>"}},dataSet:{defaultValue:null,description:"Local data set",name:"dataSet",required:!1,type:{name:"ITreeSelectNode<Record<string, unknown>>[]"}},onDataFetch:{defaultValue:null,description:"fires when the TreeSelect trying to fetch data",name:"onDataFetch",required:!1,type:{name:"((search: string, api: ITreeSelectApi) => ITreeSelectSourcePromise)"}},onDelete:{defaultValue:null,description:"Callback executed when selected node delete",name:"onDelete",required:!1,type:{name:"((selectedNodes: ITreeSelectNode<Record<string, unknown>>[], api: ITreeSelectApi) => void | ITreeSelectDeletePromise)"}},apiRef:{defaultValue:null,description:"A mutable object to merge with these controls api",name:"apiRef",required:!1,type:{name:"ITreeSelectApi"}},editFormProps:{defaultValue:null,description:"Edit item controls props. If not set then component not editable",name:"editFormProps",required:!1,type:{name:"IDFormModalProps"}},confirmDelete:{defaultValue:null,description:"Should confirm before delete",name:"confirmDelete",required:!1,type:{name:"boolean"}},onDataFetchSuccess:{defaultValue:null,description:"fires when the TreeSelect fetch success",name:"onDataFetchSuccess",required:!1,type:{name:"((result: { data: ITreeSelectNode<Record<string, unknown>>[]; }, api: ITreeSelectApi) => boolean | void)"}},onDataFetchError:{defaultValue:null,description:"fires when the TreeSelect fetch failed",name:"onDataFetchError",required:!1,type:{name:"((message: string, code: number, api: ITreeSelectApi) => boolean | void)"}},onDataFetchComplete:{defaultValue:null,description:"fires after the completion of fetching the data, regardless of the result",name:"onDataFetchComplete",required:!1,type:{name:"((api: ITreeSelectApi) => boolean | void)"}},treeLine:{defaultValue:null,description:"",name:"treeLine",required:!1,type:{name:"boolean | { showLeafIcon: TreeLeafIcon; }"}},switcherIcon:{defaultValue:null,description:"",name:"switcherIcon",required:!1,type:{name:"string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ... 4 more ..."}},filterTreeNode:{defaultValue:null,description:"Custom filter",name:"filterTreeNode",required:!1,type:{name:"((boolean | ((inputValue: string, treeNode: Record<string, unknown> | ITreeSelectNode<Record<string, unknown>>) => boolean)) & (boolean | ((inputValue: string, treeNode: DefaultOptionType) => boolean)))"}},treeNodeFilterProp:{defaultValue:null,description:"",name:"treeNodeFilterProp",required:!1,type:{name:"string"}},showCheckedStrategy:{defaultValue:null,description:"",name:"showCheckedStrategy",required:!1,type:{name:"enum",value:[{value:'"SHOW_ALL"'},{value:'"SHOW_PARENT"'},{value:'"SHOW_CHILD"'}]}},treeCheckable:{defaultValue:null,description:"",name:"treeCheckable",required:!1,type:{name:"ReactNode"}},treeCheckStrictly:{defaultValue:null,description:"",name:"treeCheckStrictly",required:!1,type:{name:"boolean"}},treeDataSimpleMode:{defaultValue:null,description:"",name:"treeDataSimpleMode",required:!1,type:{name:"boolean | SimpleModeConfig"}},treeLoadedKeys:{defaultValue:null,description:"",name:"treeLoadedKeys",required:!1,type:{name:"Key[]"}},onTreeLoad:{defaultValue:null,description:"",name:"onTreeLoad",required:!1,type:{name:"((loadedKeys: Key[]) => void)"}},treeDefaultExpandAll:{defaultValue:null,description:"",name:"treeDefaultExpandAll",required:!1,type:{name:"boolean"}},treeExpandedKeys:{defaultValue:null,description:"",name:"treeExpandedKeys",required:!1,type:{name:"Key[]"}},treeDefaultExpandedKeys:{defaultValue:null,description:"",name:"treeDefaultExpandedKeys",required:!1,type:{name:"Key[]"}},onTreeExpand:{defaultValue:null,description:"",name:"onTreeExpand",required:!1,type:{name:"((expandedKeys: Key[]) => void)"}},treeExpandAction:{defaultValue:null,description:"",name:"treeExpandAction",required:!1,type:{name:"ExpandAction"}},listItemScrollOffset:{defaultValue:null,description:"",name:"listItemScrollOffset",required:!1,type:{name:"number"}},treeTitleRender:{defaultValue:null,description:"",name:"treeTitleRender",required:!1,type:{name:"((node: unknown) => ReactNode)"}},treeIcon:{defaultValue:null,description:"",name:"treeIcon",required:!1,type:{name:"IconType"}},titleRender:{defaultValue:null,description:"Title renderer",name:"titleRender",required:!1,type:{name:"((treeNode: Record<string, unknown> | ITreeSelectNode<Record<string, unknown>>) => ReactNode)"}},treeSelectId:{defaultValue:null,description:"Tree TreeSelect id",name:"treeSelectId",required:!1,type:{name:"string"}},defaultValueCallback:{defaultValue:null,description:"Value",name:"defaultValueCallback",required:!1,type:{name:"((data: ITreeSelectNode<Record<string, unknown>>[]) => ITreeSelectNode<Record<string, unknown>> | ITreeSelectNode<Record<string, unknown>>[])"}},fetchMode:{defaultValue:null,description:"Start fetching remote data on load control or on use control (example, open dropdown). Default OnLoad",name:"fetchMode",required:!1,type:{name:"enum",value:[{value:'"onLoad"'},{value:'"onUse"'},{value:'"onUseForce"'}]}},noCacheFetchedData:{defaultValue:null,description:"Loaded data without parameters (like searchString) will not be cached",name:"noCacheFetchedData",required:!1,type:{name:"boolean"}},minSearchLength:{defaultValue:null,description:"Minimum length of search string before fetch data",name:"minSearchLength",required:!1,type:{name:"number"}},debounce:{defaultValue:null,description:"debounce in ms",name:"debounce",required:!1,type:{name:"number"}},selectedLabelProp:{defaultValue:null,description:"Selected value label. Will render as content of select. Default: title",name:"selectedLabelProp",required:!1,type:{name:"string"}},nodeDeleteMessage:{defaultValue:null,description:"Confirm message before node delete",name:"nodeDeleteMessage",required:!1,type:{name:"ReactNode"}},editButtons:{defaultValue:null,description:"Edit buttons",name:"editButtons",required:!1,type:{name:"IFormButtons"}},plainList:{defaultValue:null,description:"If true, the component is expected to contain a flat list (no children). In this case, the space for the expand/collapse icon will be hidden",name:"plainList",required:!1,type:{name:"boolean"}}}}}catch{}const ce={title:"DForm/Fields/TreeSelect",component:m,tags:["autodocs"],parameters:{docs:{source:{language:"tsx",format:!0,code:`
                    import React from "react";
                    import {DForm} from @krinopotam/ui-kit/dForm";
                    import {ITreeSelectFieldProps, TreeSelectField} from @krinopotam/ui-kit/dForm/fields/treeSelect/treeSelectField";
                    import {TreeSelectDataSet} from "../../../datasets/treeSelect";
                    type IComponent = ITreeSelectFieldProps
                    /** DForm TreeSelect field */
                    export const TreeSelectComponent = (props: IComponent): React.JSX.Element => <DForm
                        buttons={null}
                        fieldsProps={
                            {field1: {...props, dataSet:TreeSelectDataSet, component: TreeSelectField}}
                        }
                    />
                    export default TreeSelectComponent
                `}}}},a={args:{label:"TreeSelect field"}};var n,t,r;a.parameters={...a.parameters,docs:{...(n=a.parameters)==null?void 0:n.docs,source:{originalSource:`{
  args: {
    label: 'TreeSelect field'
  }
}`,...(r=(t=a.parameters)==null?void 0:t.docs)==null?void 0:r.source}}};const fe=["Playground"];export{a as Playground,fe as __namedExportsOrder,ce as default};
