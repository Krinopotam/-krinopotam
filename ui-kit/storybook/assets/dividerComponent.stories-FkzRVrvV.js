import{j as a}from"./jsx-runtime-D_zvdyIk.js";import{D as S}from"./dForm-JNw4-K8d.js";import"./dayjs.min-B6ICIYLQ.js";import{I as u}from"./inputField-_yto4mtq.js";import{u as w,C as R,B as N}from"./baseField-DQ2F_SWO.js";import{r as n}from"./index-iW-139IE.js";import{D as _}from"./buttonsRow-pfh0AfMG.js";import"./getNanoId-CghKzzgc.js";import"./updateModalTheme-CmUJJTwa.js";import"./headerRender-Ch19VDVb.js";import"./index-CvIgV7lr.js";import"./useToken-C9qwXZKU.js";import"./compact-item-Cxv0YLF9.js";import"./index-mQZ8i_rL.js";import"./index-D_2t0AaZ.js";import"./ExclamationCircleFilled-DO6fsheT.js";import"./pickAttrs-DOtYDQG6.js";import"./context-u9dygr8g.js";import"./motion-HGHEQR47.js";import"./button-D87aS1YS.js";import"./CloseOutlined-C5nLa7GN.js";import"./KeyCode-lh1qUinJ.js";import"./ContextIsolator-BX2WkAUK.js";import"./useClosable-DLVmVXm2.js";import"./index-Bi_XhfGV.js";import"./DownOutlined-CSg1yAI9.js";import"./index-H-U0Qhl4.js";import"./index-CMYZVoVF.js";import"./InfoCircleOutlined-DgVG6Ryw.js";import"./button-qVpR-JiE.js";import"./QuestionCircleOutlined-BUGNUdLn.js";import"./index-DSj8ZEWj.js";import"./row-Bq2vx5ix.js";import"./roundedArrow-CIJYWJcZ.js";import"./colors-B0jgcrR7.js";import"./TextArea-Bx-nz3Fu.js";import"./useVariants-Cpy17TlJ.js";import"./index-CHrs_Nvn.js";import"./CheckOutlined-DXdfq3FB.js";import"./isDebugMode-B-VM_G4X.js";import"./index-DJtR8zbC.js";import"./EyeOutlined-BdSgb3nL.js";import"./SearchOutlined-C7GiFsDv.js";import"./isArray-Cl7xn3Rc.js";import"./Sider-zAVKy6og.js";const r=({field:e})=>{n.useSyncExternalStore(e.subscribe.bind(e),e.getSnapshot.bind(e));const i=e.getProps(),b=e.isHidden();n.useEffect(()=>{e.setReady(!0)},[e]);const V={...{width:e.getWidth()??"100%",margin:0},...i.style},D=e.getModel(),q={...e.getId()===D.getHighlightedId()?e.getHighlightedStyle():void 0},s=n.useRef(null),C=w(e);return a.jsx(R,{nodeRef:s,in:!b,timeout:300,classNames:"zoom",unmountOnExit:!0,children:a.jsx("div",{ref:s,className:"dform-field-container",style:q,onClick:C,children:a.jsx(_,{className:i.className,orientation:i.orientation,orientationMargin:i.orientationMargin,plain:i.plain,type:i.type,dashed:i.dashed,style:V,children:i.label})})})};try{r.displayName="DividerFieldRender",r.__docgenInfo={description:"",displayName:"DividerFieldRender",props:{field:{defaultValue:null,description:"",name:"field",required:!0,type:{name:"DividerField"}}}}}catch{}class I extends N{render(){return a.jsx(r,{field:this})}renderField(){return this.render()}}const o=e=>a.jsx(S,{buttons:null,fieldsProps:{field1:{label:"Field 1",component:u},divider:{...e,component:I},field2:{label:"Field 2",component:u}}});try{o.displayName="DividerComponent",o.__docgenInfo={description:"DForm Divider field",displayName:"DividerComponent",props:{plain:{defaultValue:null,description:"Divider text show as plain style",name:"plain",required:!1,type:{name:"boolean"}},dashed:{defaultValue:null,description:"Whether line is dashed",name:"dashed",required:!1,type:{name:"boolean"}},orientation:{defaultValue:null,description:"The position of a title inside divider",name:"orientation",required:!1,type:{name:"enum",value:[{value:'"center"'},{value:'"left"'},{value:'"right"'}]}},orientationMargin:{defaultValue:null,description:"The margin-left/right between the title and its closest border, while the orientation must be left or right",name:"orientationMargin",required:!1,type:{name:"string | number"}},type:{defaultValue:null,description:"Divider type",name:"type",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => DividerField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},itemClassName:{defaultValue:null,description:"Field item class name (unlike className, this is the name of the class of the field item container)",name:"itemClassName",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"Field class name (directly the field itself, not the container)",name:"className",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"Field default value",name:"defaultValue",required:!1,type:{name:"ReactNode"}},hidden:{defaultValue:null,description:"Whether the field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"Whether the field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"Whether the field default state is readonly",name:"readOnly",required:!1,type:{name:"boolean"}},nonEditable:{defaultValue:null,description:"Whether the field can not be edited (the field will have readOnly or disabled state if formMode is 'update')",name:"nonEditable",required:!1,type:{name:'boolean | "disabled" | "readOnly"'}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: ReactNode, prevValue: ReactNode, field: DividerField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: DividerField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: DividerField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: ReactNode, error: string, isSubmit: boolean, field: DividerField) => void)"}},onFieldDataFetch:{defaultValue:null,description:"fires when the field trying to fetch data",name:"onFieldDataFetch",required:!1,type:{name:"((field: DividerField) => IDFormDataSourcePromise)"}},onFieldDataFetchSuccess:{defaultValue:null,description:"fires when the field fetch success",name:"onFieldDataFetchSuccess",required:!1,type:{name:"((result: { data: Record<string, any>; }, field: DividerField) => void)"}},onFieldDataFetchError:{defaultValue:null,description:"fires when the field fetch failed",name:"onFieldDataFetchError",required:!1,type:{name:"((error: IError, field: DividerField) => void)"}}}}}catch{}try{dividerComponent.displayName="dividerComponent",dividerComponent.__docgenInfo={description:"DForm Divider field",displayName:"dividerComponent",props:{plain:{defaultValue:null,description:"Divider text show as plain style",name:"plain",required:!1,type:{name:"boolean"}},dashed:{defaultValue:null,description:"Whether line is dashed",name:"dashed",required:!1,type:{name:"boolean"}},orientation:{defaultValue:null,description:"The position of a title inside divider",name:"orientation",required:!1,type:{name:"enum",value:[{value:'"center"'},{value:'"left"'},{value:'"right"'}]}},orientationMargin:{defaultValue:null,description:"The margin-left/right between the title and its closest border, while the orientation must be left or right",name:"orientationMargin",required:!1,type:{name:"string | number"}},type:{defaultValue:null,description:"Divider type",name:"type",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => DividerField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},itemClassName:{defaultValue:null,description:"Field item class name (unlike className, this is the name of the class of the field item container)",name:"itemClassName",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"Field class name (directly the field itself, not the container)",name:"className",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"Field default value",name:"defaultValue",required:!1,type:{name:"ReactNode"}},hidden:{defaultValue:null,description:"Whether the field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"Whether the field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"Whether the field default state is readonly",name:"readOnly",required:!1,type:{name:"boolean"}},nonEditable:{defaultValue:null,description:"Whether the field can not be edited (the field will have readOnly or disabled state if formMode is 'update')",name:"nonEditable",required:!1,type:{name:'boolean | "disabled" | "readOnly"'}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: ReactNode, prevValue: ReactNode, field: DividerField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: DividerField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: DividerField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: DividerField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: ReactNode, error: string, isSubmit: boolean, field: DividerField) => void)"}},onFieldDataFetch:{defaultValue:null,description:"fires when the field trying to fetch data",name:"onFieldDataFetch",required:!1,type:{name:"((field: DividerField) => IDFormDataSourcePromise)"}},onFieldDataFetchSuccess:{defaultValue:null,description:"fires when the field fetch success",name:"onFieldDataFetchSuccess",required:!1,type:{name:"((result: { data: Record<string, any>; }, field: DividerField) => void)"}},onFieldDataFetchError:{defaultValue:null,description:"fires when the field fetch failed",name:"onFieldDataFetchError",required:!1,type:{name:"((error: IError, field: DividerField) => void)"}}}}}catch{}const Ce={title:"DForm/Fields/Divider",component:o,tags:["autodocs"],parameters:{docs:{source:{language:"tsx",format:!0,code:`
                    import React from "react";
                    import {DForm} from @krinopotam/ui-kit/dForm";
                    import {InputField} from @krinopotam/ui-kit/dForm/fields/input/inputField";
                    import {DividerField, IDividerFieldProps} from @krinopotam/ui-kit/dForm/fields/divider/dividerField";
                    type IComponent = IDividerFieldProps;
                    /** DForm Divider field */
                    export const DividerComponent = (props: IComponent): React.JSX.Element => <DForm
                        buttons={null}
                        fieldsProps={
                            {
                                field1: {label: 'Field 1', component: InputField},
                                divider: {...props, component: DividerField},
                                field2: {label: 'Field 2', component: InputField} ,
                            }
                        }
                    />
                    export default DividerComponent
                `}}}},t={args:{defaultValue:"Divider",plain:!0}},l={args:{defaultValue:"Divider",orientation:"left",plain:!0}},d={args:{defaultValue:"Divider",orientation:"right",plain:!0}};var f,p,m;t.parameters={...t.parameters,docs:{...(f=t.parameters)==null?void 0:f.docs,source:{originalSource:`{
  args: {
    defaultValue: 'Divider',
    plain: true
  }
}`,...(m=(p=t.parameters)==null?void 0:p.docs)==null?void 0:m.source}}};var c,h,y;l.parameters={...l.parameters,docs:{...(c=l.parameters)==null?void 0:c.docs,source:{originalSource:`{
  args: {
    defaultValue: 'Divider',
    orientation: 'left',
    plain: true
  }
}`,...(y=(h=l.parameters)==null?void 0:h.docs)==null?void 0:y.source}}};var g,v,F;d.parameters={...d.parameters,docs:{...(g=d.parameters)==null?void 0:g.docs,source:{originalSource:`{
  args: {
    defaultValue: 'Divider',
    orientation: 'right',
    plain: true
  }
}`,...(F=(v=d.parameters)==null?void 0:v.docs)==null?void 0:F.source}}};const Se=["WithTitle","TitleLeft","TitleRight"];export{l as TitleLeft,d as TitleRight,t as WithTitle,Se as __namedExportsOrder,Ce as default};
