import{j as h}from"./extends-BRD_ACZV.js";import{t as M}from"./getNanoId-DD8laUaD.js";import{r as c}from"./index-uubelm5h.js";import{u as A,b as k,c as P,d as R,e as _,m as O,P as T}from"./buttonsRow-CfjXmNO8.js";import{r as x,e as N,c as E,u as B,C as m,a as H,D as G,E as j}from"./dForm-B7nLKb6u.js";import{a as y}from"./isArray-Cl7xn3Rc.js";import{m as w,B as Q,u as z}from"./updateModalTheme-DU8rNA-K.js";import"./dayjs.min-C_f_bfvq.js";import{M as W}from"./modal-BpKSJzvW.js";import{s as U}from"./splitObject-C6hVKqbV.js";const $={...x,cancelChangesQn:"Отменить сделанные изменения?",viewing:"Просмотр",creating:"Создание",editing:"Редактирование",cloning:"Клонирование"},L={...N,cancelChangesQn:"Cancel the changes made?",viewing:"Viewing",creating:"Creating",editing:"Editing",cloning:"Cloning"},K={...E,cancelChangesQn:"取消已做的更改？",viewing:"查看",creating:"创建",editing:"编辑",cloning:"克隆"},Y={ru:$,en:L,cn:K},J=e=>B(e.language,Y,e.translation),X=(e,t)=>{const a=Z(e,t),[n,o]=c.useState(a);return c.useEffect(()=>{o(a)},[a]),[n,o]},Z=(e,t)=>c.useMemo(()=>{const a=e.formMode??"create",n=e.title;return n||(a==="view"?t.t("viewing"):a==="create"?t.t("creating"):a==="clone"?t.t("cloning"):a==="update"?t.t("editing"):"&nbsp;")},[t,e.formMode,e.title]),b=e=>()=>e;try{b.displayName="useApiGetTitle",b.__docgenInfo={description:"",displayName:"useApiGetTitle",props:{at:{defaultValue:null,description:`Takes an integer value and returns the item at that index,
allowing for positive and negative integers.
Negative integers count back from the last item in the array.`,name:"at",required:!0,type:{name:"(index: number) => string | undefined"}},type:{defaultValue:null,description:"",name:"type",required:!0,type:{name:"string | JSXElementConstructor<any>"}},props:{defaultValue:null,description:"",name:"props",required:!0,type:{name:"any"}},key:{defaultValue:null,description:"",name:"key",required:!0,type:{name:"string | null"}}}}}catch{}const C=e=>t=>{e(t)};try{C.displayName="useApiSetTitle",C.__docgenInfo={description:"",displayName:"useApiSetTitle",props:{}}}catch{}const ee=(e,t)=>e?Object.prototype.hasOwnProperty.call(e,t):!1,ae=(e,t)=>{const a=new Map,n=(r,s)=>{if(!r)return r;if(a.has(r))return a.get(r);const i={};a.set(r,i);for(const d in r){if(!ee(r,d))continue;const l=r[d];!l||typeof l!="object"||t?i[d]=l:i[d]=y(l)?o(l):n(l)}return i},o=(r,s)=>{const i=[];for(let d=0;d<r.length;d++){const l=r[d];!l||typeof l!="object"||t?i[d]=l:i[d]=y(l)?o(l):n(l)}return i};return typeof e!="object"||e===null?e:y(e)?o(e):n(e)},F=e=>(t,a)=>{var i,d;if(!t)return;const n=(a==null?void 0:a.dataSet)??e.getProps().dataSet,o=n?ae(n):void 0,r=e.getProps(),s={open:!0,formMode:t,dataSet:o,...a};((i=r.onOpen)==null?void 0:i.call(r,e,o,s,new m))!==!1&&((d=a==null?void 0:a.onOpen)==null?void 0:d.call(a,e,o,s,new m))!==!1&&(e.updateProps(s),setTimeout(()=>{var u;const l=e.getProps();(u=l.onOpened)==null||u.call(l,e,l.dataSet,new m)},0))};try{F.displayName="useApiFormOpen",F.__docgenInfo={description:"",displayName:"useApiFormOpen",props:{t:{defaultValue:null,description:"Get translation",name:"t",required:!0,type:{name:'(str: "error" | "yes" | "no" | "cancelChangesQn" | "viewing" | "creating" | "editing" | "cloning" | "ok" | "cancel" | "confirm" | "fixError" | "confirmChangesQs" | "tryAgainQt") => string'}},open:{defaultValue:null,description:"Open controls",name:"open",required:!0,type:{name:'(formMode: IDFormMode | undefined, extraProps?: Partial<Omit<IDFormModalProps, "open" | "formMode">> | undefined) => void'}},close:{defaultValue:null,description:"Close controls with confirmation",name:"close",required:!0,type:{name:"() => void"}},forceClose:{defaultValue:null,description:"Close controls without confirmation",name:"forceClose",required:!0,type:{name:"() => void"}},getTitle:{defaultValue:null,description:"Get modal title",name:"getTitle",required:!0,type:{name:"() => ReactNode"}},setTitle:{defaultValue:null,description:"Set modal title",name:"setTitle",required:!0,type:{name:"(title: ReactNode) => void"}},model:{defaultValue:null,description:"Form model instance",name:"model",required:!0,type:{name:"DModel"}},getButtonsApi:{defaultValue:null,description:"Get buttons row api",name:"getButtonsApi",required:!0,type:{name:"() => IButtonsRowApi"}},validateForm:{defaultValue:null,description:"Validate form",name:"validateForm",required:!0,type:{name:"(showAlert: boolean) => Record<string, string | undefined>"}},submitForm:{defaultValue:null,description:"Submit form",name:"submitForm",required:!0,type:{name:"() => void"}},getId:{defaultValue:null,description:"Get component ID",name:"getId",required:!0,type:{name:"() => string"}},getProps:{defaultValue:null,description:"Get component props",name:"getProps",required:!0,type:{name:"() => IDFormModalProps"}},setProps:{defaultValue:null,description:"Set current props",name:"setProps",required:!0,type:{name:"(props: IDFormModalProps) => void"}},updateProps:{defaultValue:null,description:"Partial update current TreeSelect props",name:"updateProps",required:!0,type:{name:"(props: Partial<IDFormModalProps>) => void"}},getIsMounted:{defaultValue:null,description:"Get current mounted state",name:"getIsMounted",required:!0,type:{name:"() => boolean"}}}}}catch{}const v=e=>()=>{var a,n;const t=e.getProps();if(((a=t.onClosing)==null?void 0:a.call(t,e,new m))===!1)return!1;e.updateProps({open:!1}),(n=t.onClosed)==null||n.call(t,e,new m)};try{v.displayName="useApiFormForceClose",v.__docgenInfo={description:"Api method: force close form. Form will be closed without confirmation",displayName:"useApiFormForceClose",props:{t:{defaultValue:null,description:"Get translation",name:"t",required:!0,type:{name:'(str: "error" | "yes" | "no" | "cancelChangesQn" | "viewing" | "creating" | "editing" | "cloning" | "ok" | "cancel" | "confirm" | "fixError" | "confirmChangesQs" | "tryAgainQt") => string'}},open:{defaultValue:null,description:"Open controls",name:"open",required:!0,type:{name:'(formMode: IDFormMode | undefined, extraProps?: Partial<Omit<IDFormModalProps, "open" | "formMode">> | undefined) => void'}},close:{defaultValue:null,description:"Close controls with confirmation",name:"close",required:!0,type:{name:"() => void"}},forceClose:{defaultValue:null,description:"Close controls without confirmation",name:"forceClose",required:!0,type:{name:"() => void"}},getTitle:{defaultValue:null,description:"Get modal title",name:"getTitle",required:!0,type:{name:"() => ReactNode"}},setTitle:{defaultValue:null,description:"Set modal title",name:"setTitle",required:!0,type:{name:"(title: ReactNode) => void"}},model:{defaultValue:null,description:"Form model instance",name:"model",required:!0,type:{name:"DModel"}},getButtonsApi:{defaultValue:null,description:"Get buttons row api",name:"getButtonsApi",required:!0,type:{name:"() => IButtonsRowApi"}},validateForm:{defaultValue:null,description:"Validate form",name:"validateForm",required:!0,type:{name:"(showAlert: boolean) => Record<string, string | undefined>"}},submitForm:{defaultValue:null,description:"Submit form",name:"submitForm",required:!0,type:{name:"() => void"}},getId:{defaultValue:null,description:"Get component ID",name:"getId",required:!0,type:{name:"() => string"}},getProps:{defaultValue:null,description:"Get component props",name:"getProps",required:!0,type:{name:"() => IDFormModalProps"}},setProps:{defaultValue:null,description:"Set current props",name:"setProps",required:!0,type:{name:"(props: IDFormModalProps) => void"}},updateProps:{defaultValue:null,description:"Partial update current TreeSelect props",name:"updateProps",required:!0,type:{name:"(props: Partial<IDFormModalProps>) => void"}},getIsMounted:{defaultValue:null,description:"Get current mounted state",name:"getIsMounted",required:!0,type:{name:"() => boolean"}}}}}catch{}const S=(e,t)=>()=>{var a,n;if(((a=t.onClosing)==null?void 0:a.call(t,e,new m))!==!1){if(e.model.isFormDirty()&&t.confirmChanges){w.confirm({language:t.language,content:t.closeFormConfirmMessage??e.t("cancelChangesQn"),okText:e.t("yes"),cancelText:e.t("no"),onOk:()=>{var o;(o=t.onCancel)==null||o.call(t,e,new m),e.forceClose()}});return}(n=t.onCancel)==null||n.call(t,e,new m),e.forceClose()}};try{S.displayName="useApiTryToCloseForm",S.__docgenInfo={description:"Api method: try to close modal form",displayName:"useApiTryToCloseForm",props:{}}}catch{}const V=({props:e,setProps:t})=>{const[a]=c.useState(e.apiRef||{});a.getId=A(e.formId??"dFormModal-"+M()),a.getButtonsApi=H(),a.getProps=k(e),a.setProps=P(t),a.updateProps=R(e,t),a.getIsMounted=_(),a.t=J(e),a.open=F(a),a.close=S(a,e),a.forceClose=v(a);const[n,o]=X(e,a);return a.getTitle=b(n),a.setTitle=C(o),a};try{V.displayName="useInitApi",V.__docgenInfo={description:"",displayName:"useInitApi",props:{props:{defaultValue:null,description:"",name:"props",required:!0,type:{name:"IDFormModalProps"}},setProps:{defaultValue:null,description:"",name:"setProps",required:!0,type:{name:"Dispatch<SetStateAction<IDFormModalProps>>"}}}}}catch{}const D=({buttons:e,formApi:t,formProps:a,modalFormProps:n})=>{const o=n.modalProps;return h.jsx(W,{open:n.open,maskProps:{style:{zIndex:1060}},wrapProps:{style:{zIndex:1060}},modalId:t.getId(),centered:!0,maskClosable:!1,keyboard:!1,destroyOnClose:!0,title:t.getTitle(),onCancel:t.close,footer:h.jsx(Q,{buttons:e,colorType:n.colorType,buttonsApi:t.getButtonsApi(),arrowsSelection:n.arrowsButtonsSelection,context:t}),height:n.height,maxHeight:n.maxHeight,minHeight:n.minHeight,width:n.width,maxWidth:n.maxWidth,minWidth:n.minWidth,...o,children:n.open?h.jsx(G,{apiRef:t,...a,formStyle:{height:"100%",width:"100%",...a.formStyle},containerStyle:{height:"100%",...a.containerStyle},_overriddenApi:{getId:!0,t:!0,getButtonsApi:!0,getProps:!0,setProps:!0,updateProps:!0,getIsMounted:!0}}):null})};try{D.displayName="DFormModalRender",D.__docgenInfo={description:"",displayName:"DFormModalRender",props:{buttons:{defaultValue:null,description:"form buttons collection",name:"buttons",required:!1,type:{name:"IFormButtons"}},centered:{defaultValue:null,description:"Is the form open centered",name:"centered",required:!1,type:{name:"boolean"}},formApi:{defaultValue:null,description:"form api",name:"formApi",required:!0,type:{name:"IDFormModalApi"}},formProps:{defaultValue:null,description:"Child dynamic form props only",name:"formProps",required:!0,type:{name:"IDFormProps"}},modalFormProps:{defaultValue:null,description:"Full DFormModal props (contains formProps and modalProps values)",name:"modalFormProps",required:!0,type:{name:"IDFormModalProps"}},onOk:{defaultValue:null,description:"On submit button click callback",name:"onOk",required:!1,type:{name:"((e: MouseEvent<HTMLButtonElement, MouseEvent>) => void)"}},onCancel:{defaultValue:null,description:"On cancel button click callback",name:"onCancel",required:!1,type:{name:"((e: MouseEvent<HTMLButtonElement, MouseEvent>) => void)"}}}}}catch{}const q=e=>c.useMemo(()=>({...e,...{onDataFetchError:(a,n,o)=>{var s;if((s=e==null?void 0:e.onDataFetchError)==null||s.call(e,a,n,o),o.isPrevented())return;o.preventOriginal();const r=w.confirm({language:e.language,title:n.t("error"),content:h.jsx(j,{error:a,extraMessage:n.t("tryAgainQt")}),colorType:"danger",buttons:{ok:{onClick:()=>{r.destroy(),n.model.fetchData()}},cancel:{onClick:()=>{var i;r.destroy(),(i=n.forceClose)==null||i.call(n)}}}})},onSubmit:(a,n,o,r)=>{var i,d,l,u,f,p,g;const s=(i=e==null?void 0:e.onSubmit)==null?void 0:i.call(e,a,n,o,r);return r.isPrevented()||(r.preventOriginal(),(l=(d=o.getButtonsApi()).disabled)==null||l.call(d,"ok",!0),(f=(u=o.getButtonsApi()).disabled)==null||f.call(u,"cancel",!0),e.confirmChanges||(g=(p=o.getButtonsApi()).loading)==null||g.call(p,"ok",!0)),s},onSubmitSuccess:(a,n,o,r,s)=>{var i;(i=e==null?void 0:e.onSubmitSuccess)==null||i.call(e,a,n,o,r,s),!s.isPrevented()&&r.forceClose()},onSubmitComplete:(a,n,o,r,s)=>{var i,d,l,u,f,p,g;(i=e==null?void 0:e.onSubmitComplete)==null||i.call(e,a,n,o,r,s),!s.isPrevented()&&(s.preventOriginal(),(l=(d=r.getButtonsApi()).disabled)==null||l.call(d,"ok",!1),(f=(u=r.getButtonsApi()).disabled)==null||f.call(u,"cancel",!1),(g=(p=r.getButtonsApi()).loading)==null||g.call(p,"ok",!1))}}}),[e]);try{q.displayName="useOverrideCallbacks",q.__docgenInfo={description:"Preparing callbacks for redirection to the form",displayName:"useOverrideCallbacks",props:{open:{defaultValue:null,description:"Form open state",name:"open",required:!1,type:{name:"boolean"}},title:{defaultValue:null,description:"Modal title",name:"title",required:!1,type:{name:"ReactNode"}},height:{defaultValue:null,description:"Modal height",name:"height",required:!1,type:{name:"string | number"}},maxHeight:{defaultValue:null,description:"Modal max height",name:"maxHeight",required:!1,type:{name:"string | number"}},minHeight:{defaultValue:null,description:"Modal min height",name:"minHeight",required:!1,type:{name:"string | number"}},width:{defaultValue:null,description:"Modal width",name:"width",required:!1,type:{name:"string | number"}},maxWidth:{defaultValue:null,description:"Modal max width",name:"maxWidth",required:!1,type:{name:"string | number"}},minWidth:{defaultValue:null,description:"Modal min width",name:"minWidth",required:!1,type:{name:"string | number"}},closeFormConfirmMessage:{defaultValue:null,description:"Confirm message before the form closing, if form is dirty",name:"closeFormConfirmMessage",required:!1,type:{name:"ReactNode"}},language:{defaultValue:null,description:"Language",name:"language",required:!1,type:{name:"enum",value:[{value:'"ru"'},{value:'"en"'},{value:'"cn"'}]}},translation:{defaultValue:null,description:"Custom translation",name:"translation",required:!1,type:{name:"(Partial<{ cancelChangesQn: string; viewing: string; creating: string; editing: string; cloning: string; ok: string; cancel: string; yes: string; no: string; confirm: string; fixError: string; confirmChangesQs: string; tryAgainQt: string; error: string; }> & Partial<...>)"}},modalProps:{defaultValue:null,description:"Modal component properties",name:"modalProps",required:!1,type:{name:"IExtendedModalProps"}},onOpen:{defaultValue:null,description:`Fires when the form is opening.
Don't use formApi.getFormProps() because by the time the form is opened, they have not yet had time to update.`,name:"onOpen",required:!1,type:{name:"((formApi: IDFormModalApi, dataSet: IDFormDataSet, formProps: IDFormModalProps, cbControl: CallbackControl) => boolean | void)"}},onOpened:{defaultValue:null,description:"Fires when the form is opened",name:"onOpened",required:!1,type:{name:"((formApi: IDFormModalApi, dataSet: IDFormDataSet, cbControl: CallbackControl) => void)"}},onClosing:{defaultValue:null,description:"Fires when the form is closing",name:"onClosing",required:!1,type:{name:"((formApi: IDFormModalApi, cbControl: CallbackControl) => boolean | void)"}},onClosed:{defaultValue:null,description:"Fires when the form is closed",name:"onClosed",required:!1,type:{name:"((formApi: IDFormModalApi, cbControl: CallbackControl) => void)"}},onCancel:{defaultValue:null,description:"Fires when the form is canceled",name:"onCancel",required:!1,type:{name:"((formApi: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFirstRender:{defaultValue:null,description:"On first render callback",name:"onFirstRender",required:!1,type:{name:"((props: IDFormModalProps) => void | IDFormProps)"}},onFormDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of the form changed",name:"onFormDirtyStateChanged",required:!1,type:{name:"((state: boolean, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormReadOnlyStateChanged:{defaultValue:null,description:"fires when the read only state of the form changed",name:"onFormReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormDisabledStateChanged:{defaultValue:null,description:"fires when the disabled state of the form changed",name:"onFormDisabledStateChanged",required:!1,type:{name:"((state: boolean, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormInit:{defaultValue:null,description:"fires when the form began initialization (renders for the first time)",name:"onFormInit",required:!1,type:{name:"((api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormModelInitialized:{defaultValue:null,description:"fires when the form model has been initialized",name:"onFormModelInitialized",required:!1,type:{name:"((api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormReadyStateChanged:{defaultValue:null,description:"fires when the form ready status changed (form ready means form is rendered, initialized and all fields data are loaded)",name:"onFormReadyStateChanged",required:!1,type:{name:"((state: boolean, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormValuesChanged:{defaultValue:null,description:"fires when the form values changed",name:"onFormValuesChanged",required:!1,type:{name:"((fieldName: string, values: Record<string, any>, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormValidated:{defaultValue:null,description:`fires when the form validated
@param values form only values
@param dataSet form dataSet merged with form values
@param errors errors
@param isSubmit a sign that the form is validated upon form submission
@param api form api instance`,name:"onFormValidated",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, errors: Record<string, string>, isSubmit: boolean, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormHasErrors:{defaultValue:null,description:`fires when the form has errors
@param values form only values
@param dataSet form dataSet merged with form values
@param errors errors
@param api form api instance`,name:"onFormHasErrors",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, errors: Record<string, any>, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormHasNoErrors:{defaultValue:null,description:`fires when the form has no errors
@param values form only values
@param dataSet form dataSet merged with form values
@param api form api instance`,name:"onFormHasNoErrors",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onDataFetch:{defaultValue:null,description:"fires when the form trying to fetch data",name:"onDataFetch",required:!1,type:{name:"((api: IDFormModalApi, cbControl: CallbackControl) => IDFormDataSourcePromise)"}},onDataFetchSuccess:{defaultValue:null,description:"fires when the form fetch success",name:"onDataFetchSuccess",required:!1,type:{name:"((result: { data: Record<string, any>; }, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onDataFetchError:{defaultValue:null,description:"fires when the form fetch failed",name:"onDataFetchError",required:!1,type:{name:"((error: IError, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onDataFetchComplete:{defaultValue:null,description:"fires after the completion of fetching the data, regardless of the result",name:"onDataFetchComplete",required:!1,type:{name:"((api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onSubmit:{defaultValue:null,description:`Fires on submitting the form. Can returns Promise, Object, Boolean or Void
@param values form only values
@param dataSet form dataSet merged with form values
@param api form api instance`,name:"onSubmit",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, api: IDFormModalApi, cbControl: CallbackControl) => boolean | void | IDFormSubmitResultPromise | IDFormSubmitResultObject)"}},onSubmitValidation:{defaultValue:null,description:`fires on submit validation
@param values form only values
@param dataSet form dataSet merged with form values
@param errors errors
@param api form api instance`,name:"onSubmitValidation",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, errors: Record<string, string>, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onSubmitSuccess:{defaultValue:null,description:`fires on submit failed          *
@param values form only values
@param dataSet form dataSet merged with form values
@param resultData the data returned by the form submission method (for example, fetch). If the method does not return a data, then resultData = dataSet
@param api form api instance`,name:"onSubmitSuccess",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, resultData: Record<string, any>, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onSubmitError:{defaultValue:null,description:`fires on submit error
@param values form only values
@param dataSet form dataSet merged with form values
@param error error
@param api form api instance`,name:"onSubmitError",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, error: IError, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onSubmitComplete:{defaultValue:null,description:`fires, when the submitting finishes, whether in failure or success.
@param values form only values
@param dataSet form dataSet merged with form values
@param errors errors
@param api form api instance`,name:"onSubmitComplete",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, errors: Record<string, string>, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onDataSetChange:{defaultValue:null,description:"fires, when the form dataSet changed. Unlike onFormValuesChanged, it is triggered only when a new dataSet is set via setFormValues and is not called when the user changes the field values",name:"onDataSetChange",required:!1,type:{name:"((dataSet: IDFormDataSet, api: IDFormModalApi, cbControl: CallbackControl) => IDFormDataSet) | undefined"}},apiRef:{defaultValue:null,description:"A mutable object to merge with these controls api",name:"apiRef",required:!1,type:{name:"unknown"}},formId:{defaultValue:null,description:"Form formId",name:"formId",required:!1,type:{name:"string"}},buttons:{defaultValue:null,description:"Buttons properties",name:"buttons",required:!1,type:{name:"IFormButtons | null"}},className:{defaultValue:null,description:"Form CSS class",name:"className",required:!1,type:{name:"string"}},formStyle:{defaultValue:null,description:"Form style",name:"formStyle",required:!1,type:{name:"CSSProperties"}},containerClassName:{defaultValue:null,description:"Form container class name",name:"containerClassName",required:!1,type:{name:"string"}},containerStyle:{defaultValue:null,description:"Form container style",name:"containerStyle",required:!1,type:{name:"CSSProperties"}},contentIndent:{defaultValue:null,description:"Indent from the beginning of the controls (default 12)",name:"contentIndent",required:!1,type:{name:"number"}},defaultValues:{defaultValue:null,description:`Form default values. Unlike dataSet, defaultValues sets field values in Create form mode.
Has a priority lower than the field's set value`,name:"defaultValues",required:!1,type:{name:"Record<string, any>"}},dataSet:{defaultValue:null,description:"Form data (are not set in Create form mode)",name:"dataSet",required:!1,type:{name:"IDFormDataSet"}},parentDataSet:{defaultValue:null,description:"Parent form data",name:"parentDataSet",required:!1,type:{name:"IDFormDataSet"}},fieldsProps:{defaultValue:null,description:"Fields properties",name:"fieldsProps",required:!1,type:{name:"IDFormFieldsProps"}},colorType:{defaultValue:null,description:"Form color type",name:"colorType",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"neutral"'},{value:'"info"'},{value:'"warning"'},{value:'"danger"'}]}},labelCol:{defaultValue:null,description:"label column parameters, for example span:'8'",name:"labelCol",required:!1,type:{name:"ColProps"}},wrapperCol:{defaultValue:null,description:"wrapper column parameters, for example span:'16'",name:"wrapperCol",required:!1,type:{name:"ColProps"}},labelAlign:{defaultValue:null,description:"text align of label of all items",name:"labelAlign",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"right"'}]}},layout:{defaultValue:null,description:"Form layout (horizontal or vertical). Vertical is default",name:"layout",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},formMode:{defaultValue:null,description:"Form mode",name:"formMode",required:!1,type:{name:"enum",value:[{value:'"view"'},{value:'"create"'},{value:'"clone"'},{value:'"update"'},{value:'"delete"'}]}},readOnly:{defaultValue:null,description:"The form is read only",name:"readOnly",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"The form is disabled",name:"disabled",required:!1,type:{name:"boolean"}},disableDepended:{defaultValue:null,description:"Automatically disable fields if they depend on fields whose value is not set. Otherwise, such fields will be automatically hidden",name:"disableDepended",required:!1,type:{name:"boolean"}},tabsHeight:{defaultValue:null,description:"Tabs panes height (default 40)",name:"tabsHeight",required:!1,type:{name:"number"}},unfilledForm:{defaultValue:null,description:"No use controls data",name:"unfilledForm",required:!1,type:{name:"boolean"}},validationRules:{defaultValue:null,description:"Validation rules",name:"validationRules",required:!1,type:{name:"IDFormValidationRules"}},confirmChanges:{defaultValue:null,description:"Should the form request confirmation before the form submitting or cancel, if the form data was changed by the user",name:"confirmChanges",required:!1,type:{name:"boolean"}},submitConfirmMessage:{defaultValue:null,description:"Confirm message before the form submitting",name:"submitConfirmMessage",required:!1,type:{name:"ReactNode"}},requiredMark:{defaultValue:null,description:"Required mark style. Can use required mark or optional mark. You can not config to single Form.Item since this is a Form level config",name:"requiredMark",required:!1,type:{name:"RequiredMark"}},arrowsButtonsSelection:{defaultValue:null,description:"allow select buttons using arrows keys",name:"arrowsButtonsSelection",required:!1,type:{name:"boolean"}},assignExtraValues:{defaultValue:null,description:`If specified, additional values will be added to the resulting form data depending on the form mode
@example {create:'isNew', clone?:'clonedFrom', update?:'isUpdating'}`,name:"assignExtraValues",required:!1,type:{name:"{ create?: string; clone?: string; update?: string | undefined; } | undefined"}},_overriddenApi:{defaultValue:null,description:"@private O A service property meaning that the form is used in another component that overrides the api part (for example DModalForm)",name:"_overriddenApi",required:!1,type:{name:"{ t?: boolean; model?: boolean; getButtonsApi?: boolean | undefined; validateForm?: boolean | undefined; submitForm?: boolean | undefined; getId?: boolean | undefined; getProps?: boolean | undefined; setProps?: boolean | undefined; updateProps?: boolean | undefined; getIsMounted?: boolean | u..."}}}}}catch{}const te=(e,t)=>c.useMemo(()=>{const a={ok:{position:"right",active:t.formMode!=="view",hidden:t.formMode==="view",title:e.t("ok"),hotKeys:[{key:"enter",ctrl:!0},{key:"s",ctrl:!0},{key:"ы",ctrl:!0}],onClick:()=>{e.submitForm()}},cancel:{position:"right",title:e.t("cancel"),hotKeys:[{key:"escape"}],active:t.formMode==="view",onClick:()=>{e.close()}}};return O(a,t.buttons)},[e,t.buttons,t.formMode]),I=e=>{z();const[t,a]=T(e),n=q(t),[,o]=ne(n),r=V({props:n,setProps:a}),s=te(r,n);return h.jsx(D,{formApi:r,modalFormProps:n,formProps:o,buttons:s})},ne=e=>c.useMemo(()=>{const[t,a]=U(e,{closeFormConfirmMessage:!0,modalProps:!0,title:!0,open:!0,width:!0,maxWidth:!0,minWidth:!0,height:!0,minHeight:!0,maxHeight:!0,onCancel:!0,onOpen:!0,onClosed:!0,onClosing:!0,onOpened:!0,language:!0,translation:!0});return a.buttons=null,[t,{...a,language:e.language,translation:e.translation}]},[e]);try{I.displayName="DFormModal",I.__docgenInfo={description:"",displayName:"DFormModal",props:{open:{defaultValue:null,description:"Form open state",name:"open",required:!1,type:{name:"boolean"}},title:{defaultValue:null,description:"Modal title",name:"title",required:!1,type:{name:"ReactNode"}},height:{defaultValue:null,description:"Modal height",name:"height",required:!1,type:{name:"string | number"}},maxHeight:{defaultValue:null,description:"Modal max height",name:"maxHeight",required:!1,type:{name:"string | number"}},minHeight:{defaultValue:null,description:"Modal min height",name:"minHeight",required:!1,type:{name:"string | number"}},width:{defaultValue:null,description:"Modal width",name:"width",required:!1,type:{name:"string | number"}},maxWidth:{defaultValue:null,description:"Modal max width",name:"maxWidth",required:!1,type:{name:"string | number"}},minWidth:{defaultValue:null,description:"Modal min width",name:"minWidth",required:!1,type:{name:"string | number"}},closeFormConfirmMessage:{defaultValue:null,description:"Confirm message before the form closing, if form is dirty",name:"closeFormConfirmMessage",required:!1,type:{name:"ReactNode"}},language:{defaultValue:null,description:"Language",name:"language",required:!1,type:{name:"enum",value:[{value:'"ru"'},{value:'"en"'},{value:'"cn"'}]}},translation:{defaultValue:null,description:"Custom translation",name:"translation",required:!1,type:{name:"(Partial<{ cancelChangesQn: string; viewing: string; creating: string; editing: string; cloning: string; ok: string; cancel: string; yes: string; no: string; confirm: string; fixError: string; confirmChangesQs: string; tryAgainQt: string; error: string; }> & Partial<...>)"}},modalProps:{defaultValue:null,description:"Modal component properties",name:"modalProps",required:!1,type:{name:"IExtendedModalProps"}},onOpen:{defaultValue:null,description:`Fires when the form is opening.
Don't use formApi.getFormProps() because by the time the form is opened, they have not yet had time to update.`,name:"onOpen",required:!1,type:{name:"((formApi: IDFormModalApi, dataSet: IDFormDataSet, formProps: IDFormModalProps, cbControl: CallbackControl) => boolean | void)"}},onOpened:{defaultValue:null,description:"Fires when the form is opened",name:"onOpened",required:!1,type:{name:"((formApi: IDFormModalApi, dataSet: IDFormDataSet, cbControl: CallbackControl) => void)"}},onClosing:{defaultValue:null,description:"Fires when the form is closing",name:"onClosing",required:!1,type:{name:"((formApi: IDFormModalApi, cbControl: CallbackControl) => boolean | void)"}},onClosed:{defaultValue:null,description:"Fires when the form is closed",name:"onClosed",required:!1,type:{name:"((formApi: IDFormModalApi, cbControl: CallbackControl) => void)"}},onCancel:{defaultValue:null,description:"Fires when the form is canceled",name:"onCancel",required:!1,type:{name:"((formApi: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFirstRender:{defaultValue:null,description:"On first render callback",name:"onFirstRender",required:!1,type:{name:"((props: IDFormModalProps) => void | IDFormProps)"}},onFormDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of the form changed",name:"onFormDirtyStateChanged",required:!1,type:{name:"((state: boolean, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormReadOnlyStateChanged:{defaultValue:null,description:"fires when the read only state of the form changed",name:"onFormReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormDisabledStateChanged:{defaultValue:null,description:"fires when the disabled state of the form changed",name:"onFormDisabledStateChanged",required:!1,type:{name:"((state: boolean, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormInit:{defaultValue:null,description:"fires when the form began initialization (renders for the first time)",name:"onFormInit",required:!1,type:{name:"((api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormModelInitialized:{defaultValue:null,description:"fires when the form model has been initialized",name:"onFormModelInitialized",required:!1,type:{name:"((api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormReadyStateChanged:{defaultValue:null,description:"fires when the form ready status changed (form ready means form is rendered, initialized and all fields data are loaded)",name:"onFormReadyStateChanged",required:!1,type:{name:"((state: boolean, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormValuesChanged:{defaultValue:null,description:"fires when the form values changed",name:"onFormValuesChanged",required:!1,type:{name:"((fieldName: string, values: Record<string, any>, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormValidated:{defaultValue:null,description:`fires when the form validated
@param values form only values
@param dataSet form dataSet merged with form values
@param errors errors
@param isSubmit a sign that the form is validated upon form submission
@param api form api instance`,name:"onFormValidated",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, errors: Record<string, string>, isSubmit: boolean, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormHasErrors:{defaultValue:null,description:`fires when the form has errors
@param values form only values
@param dataSet form dataSet merged with form values
@param errors errors
@param api form api instance`,name:"onFormHasErrors",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, errors: Record<string, any>, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onFormHasNoErrors:{defaultValue:null,description:`fires when the form has no errors
@param values form only values
@param dataSet form dataSet merged with form values
@param api form api instance`,name:"onFormHasNoErrors",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onDataFetch:{defaultValue:null,description:"fires when the form trying to fetch data",name:"onDataFetch",required:!1,type:{name:"((api: IDFormModalApi, cbControl: CallbackControl) => IDFormDataSourcePromise)"}},onDataFetchSuccess:{defaultValue:null,description:"fires when the form fetch success",name:"onDataFetchSuccess",required:!1,type:{name:"((result: { data: Record<string, any>; }, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onDataFetchError:{defaultValue:null,description:"fires when the form fetch failed",name:"onDataFetchError",required:!1,type:{name:"((error: IError, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onDataFetchComplete:{defaultValue:null,description:"fires after the completion of fetching the data, regardless of the result",name:"onDataFetchComplete",required:!1,type:{name:"((api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onSubmit:{defaultValue:null,description:`Fires on submitting the form. Can returns Promise, Object, Boolean or Void
@param values form only values
@param dataSet form dataSet merged with form values
@param api form api instance`,name:"onSubmit",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, api: IDFormModalApi, cbControl: CallbackControl) => boolean | void | IDFormSubmitResultPromise | IDFormSubmitResultObject)"}},onSubmitValidation:{defaultValue:null,description:`fires on submit validation
@param values form only values
@param dataSet form dataSet merged with form values
@param errors errors
@param api form api instance`,name:"onSubmitValidation",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, errors: Record<string, string>, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onSubmitSuccess:{defaultValue:null,description:`fires on submit failed          *
@param values form only values
@param dataSet form dataSet merged with form values
@param resultData the data returned by the form submission method (for example, fetch). If the method does not return a data, then resultData = dataSet
@param api form api instance`,name:"onSubmitSuccess",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, resultData: Record<string, any>, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onSubmitError:{defaultValue:null,description:`fires on submit error
@param values form only values
@param dataSet form dataSet merged with form values
@param error error
@param api form api instance`,name:"onSubmitError",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, error: IError, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onSubmitComplete:{defaultValue:null,description:`fires, when the submitting finishes, whether in failure or success.
@param values form only values
@param dataSet form dataSet merged with form values
@param errors errors
@param api form api instance`,name:"onSubmitComplete",required:!1,type:{name:"((values: Record<string, any>, dataSet: IDFormDataSet, errors: Record<string, string>, api: IDFormModalApi, cbControl: CallbackControl) => void)"}},onDataSetChange:{defaultValue:null,description:"fires, when the form dataSet changed. Unlike onFormValuesChanged, it is triggered only when a new dataSet is set via setFormValues and is not called when the user changes the field values",name:"onDataSetChange",required:!1,type:{name:"((dataSet: IDFormDataSet, api: IDFormModalApi, cbControl: CallbackControl) => IDFormDataSet) | undefined"}},apiRef:{defaultValue:null,description:"A mutable object to merge with these controls api",name:"apiRef",required:!1,type:{name:"unknown"}},formId:{defaultValue:null,description:"Form formId",name:"formId",required:!1,type:{name:"string"}},buttons:{defaultValue:null,description:"Buttons properties",name:"buttons",required:!1,type:{name:"IFormButtons | null"}},className:{defaultValue:null,description:"Form CSS class",name:"className",required:!1,type:{name:"string"}},formStyle:{defaultValue:null,description:"Form style",name:"formStyle",required:!1,type:{name:"CSSProperties"}},containerClassName:{defaultValue:null,description:"Form container class name",name:"containerClassName",required:!1,type:{name:"string"}},containerStyle:{defaultValue:null,description:"Form container style",name:"containerStyle",required:!1,type:{name:"CSSProperties"}},contentIndent:{defaultValue:null,description:"Indent from the beginning of the controls (default 12)",name:"contentIndent",required:!1,type:{name:"number"}},defaultValues:{defaultValue:null,description:`Form default values. Unlike dataSet, defaultValues sets field values in Create form mode.
Has a priority lower than the field's set value`,name:"defaultValues",required:!1,type:{name:"Record<string, any>"}},dataSet:{defaultValue:null,description:"Form data (are not set in Create form mode)",name:"dataSet",required:!1,type:{name:"IDFormDataSet"}},parentDataSet:{defaultValue:null,description:"Parent form data",name:"parentDataSet",required:!1,type:{name:"IDFormDataSet"}},fieldsProps:{defaultValue:null,description:"Fields properties",name:"fieldsProps",required:!1,type:{name:"IDFormFieldsProps"}},colorType:{defaultValue:null,description:"Form color type",name:"colorType",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"neutral"'},{value:'"info"'},{value:'"warning"'},{value:'"danger"'}]}},labelCol:{defaultValue:null,description:"label column parameters, for example span:'8'",name:"labelCol",required:!1,type:{name:"ColProps"}},wrapperCol:{defaultValue:null,description:"wrapper column parameters, for example span:'16'",name:"wrapperCol",required:!1,type:{name:"ColProps"}},labelAlign:{defaultValue:null,description:"text align of label of all items",name:"labelAlign",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"right"'}]}},layout:{defaultValue:null,description:"Form layout (horizontal or vertical). Vertical is default",name:"layout",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},formMode:{defaultValue:null,description:"Form mode",name:"formMode",required:!1,type:{name:"enum",value:[{value:'"view"'},{value:'"create"'},{value:'"clone"'},{value:'"update"'},{value:'"delete"'}]}},readOnly:{defaultValue:null,description:"The form is read only",name:"readOnly",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"The form is disabled",name:"disabled",required:!1,type:{name:"boolean"}},disableDepended:{defaultValue:null,description:"Automatically disable fields if they depend on fields whose value is not set. Otherwise, such fields will be automatically hidden",name:"disableDepended",required:!1,type:{name:"boolean"}},tabsHeight:{defaultValue:null,description:"Tabs panes height (default 40)",name:"tabsHeight",required:!1,type:{name:"number"}},unfilledForm:{defaultValue:null,description:"No use controls data",name:"unfilledForm",required:!1,type:{name:"boolean"}},validationRules:{defaultValue:null,description:"Validation rules",name:"validationRules",required:!1,type:{name:"IDFormValidationRules"}},confirmChanges:{defaultValue:null,description:"Should the form request confirmation before the form submitting or cancel, if the form data was changed by the user",name:"confirmChanges",required:!1,type:{name:"boolean"}},submitConfirmMessage:{defaultValue:null,description:"Confirm message before the form submitting",name:"submitConfirmMessage",required:!1,type:{name:"ReactNode"}},requiredMark:{defaultValue:null,description:"Required mark style. Can use required mark or optional mark. You can not config to single Form.Item since this is a Form level config",name:"requiredMark",required:!1,type:{name:"RequiredMark"}},arrowsButtonsSelection:{defaultValue:null,description:"allow select buttons using arrows keys",name:"arrowsButtonsSelection",required:!1,type:{name:"boolean"}},assignExtraValues:{defaultValue:null,description:`If specified, additional values will be added to the resulting form data depending on the form mode
@example {create:'isNew', clone?:'clonedFrom', update?:'isUpdating'}`,name:"assignExtraValues",required:!1,type:{name:"{ create?: string; clone?: string; update?: string | undefined; } | undefined"}},_overriddenApi:{defaultValue:null,description:"@private O A service property meaning that the form is used in another component that overrides the api part (for example DModalForm)",name:"_overriddenApi",required:!1,type:{name:"{ t?: boolean; model?: boolean; getButtonsApi?: boolean | undefined; validateForm?: boolean | undefined; submitForm?: boolean | undefined; getId?: boolean | undefined; getProps?: boolean | undefined; setProps?: boolean | undefined; updateProps?: boolean | undefined; getIsMounted?: boolean | u..."}}}}}catch{}export{I as D,ae as m};
