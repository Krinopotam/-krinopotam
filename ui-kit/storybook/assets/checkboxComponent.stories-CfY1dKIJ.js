import{_ as le,j as G}from"./extends-BRD_ACZV.js";import{B as ne,D as ie}from"./dForm-MbnOLRa1.js";import"./dayjs.min-C_f_bfvq.js";import{r as t,R as oe}from"./index-uubelm5h.js";import{_ as re,c as E,C as K,D as de,T as se,W as ue,o as ce}from"./compact-item-IaHZmqF4.js";import{m as fe,n as H,b as z,_ as B}from"./useToken--rxRg63T.js";import{u as pe}from"./index-C9GPWzHg.js";import{F as me,u as Q}from"./context-CrsU2UZX.js";import{u as U}from"./index-Qnib9L3W.js";import"./isArray-Cl7xn3Rc.js";import"./index-DaxZXI7c.js";import"./index-RRW4sUgR.js";import"./pickAttrs-Ceb8JkZg.js";import"./useVariants-BCbWTJhT.js";import"./ContextIsolator-DTA0rjn8.js";import"./index-CSZa4169.js";import"./motion-WmxowxVV.js";import"./row-R-nZpFec.js";import"./roundedArrow-Cy_VYcsu.js";import"./zoom-CqB_wpkX.js";import"./colors-g_WWN96I.js";import"./QuestionCircleOutlined-BwsbN9TT.js";import"./ExclamationCircleFilled-rOw3n2gg.js";import"./buttonsRow-B0FOr-SK.js";import"./button-Iix8LbRU.js";import"./button-DvzT6zDE.js";import"./index-CB3XXCqd.js";import"./Sider-CY9JNDYe.js";import"./KeyCode-DNlgD2sM.js";import"./DownOutlined-J6zIsiwY.js";import"./getNanoId-DD8laUaD.js";import"./updateModalTheme-iOjsqUQ8.js";import"./headerRender-ClL5xlLQ.js";import"./index-WZmxnzc0.js";import"./CloseOutlined-xuSWusRf.js";import"./useClosable-DmZ-8Q3E.js";import"./index-D3eZ-H7s.js";import"./InfoCircleOutlined-rgXyzvM4.js";import"./index-0axGYSbf.js";import"./CheckOutlined-ih17Bwkf.js";import"./modal-BqajnxR4.js";import"./assertThisInitialized-C7eLZ5Vw.js";import"./useIsDebugMode-_qV3LLe4.js";import"./wrapNativeSuper-CxOa5OEc.js";var he=["prefixCls","className","style","checked","disabled","defaultChecked","type","title","onChange"],be=t.forwardRef(function(e,c){var r=e.prefixCls,a=r===void 0?"rc-checkbox":r,i=e.className,F=e.style,b=e.checked,p=e.disabled,V=e.defaultChecked,g=V===void 0?!1:V,u=e.type,v=u===void 0?"checkbox":u,O=e.title,o=e.onChange,S=re(e,he),y=t.useRef(null),f=t.useRef(null),l=pe(g,{value:b}),q=fe(l,2),w=q[0],x=q[1];t.useImperativeHandle(c,function(){return{focus:function(s){var h;(h=y.current)===null||h===void 0||h.focus(s)},blur:function(){var s;(s=y.current)===null||s===void 0||s.blur()},input:y.current,nativeElement:f.current}});var m=E(a,i,H(H({},"".concat(a,"-checked"),w),"".concat(a,"-disabled"),p)),d=function(s){p||("checked"in e||x(s.target.checked),o==null||o({target:z(z({},e),{},{type:v,checked:s.target.checked}),stopPropagation:function(){s.stopPropagation()},preventDefault:function(){s.preventDefault()},nativeEvent:s.nativeEvent}))};return t.createElement("span",{className:m,title:O,style:F,ref:f},t.createElement("input",le({},S,{className:"".concat(a,"-input"),ref:y,onChange:d,disabled:p,checked:!!w,type:v})),t.createElement("span",{className:"".concat(a,"-inner")}))});const Y=oe.createContext(null);var ye=function(e,c){var r={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&c.indexOf(a)<0&&(r[a]=e[a]);if(e!=null&&typeof Object.getOwnPropertySymbols=="function")for(var i=0,a=Object.getOwnPropertySymbols(e);i<a.length;i++)c.indexOf(a[i])<0&&Object.prototype.propertyIsEnumerable.call(e,a[i])&&(r[a[i]]=e[a[i]]);return r};const Ce=(e,c)=>{var r;const{prefixCls:a,className:i,rootClassName:F,children:b,indeterminate:p=!1,style:V,onMouseEnter:g,onMouseLeave:u,skipGroup:v=!1,disabled:O}=e,o=ye(e,["prefixCls","className","rootClassName","children","indeterminate","style","onMouseEnter","onMouseLeave","skipGroup","disabled"]),{getPrefixCls:S,direction:y,checkbox:f}=t.useContext(K),l=t.useContext(Y),{isFormItemInput:q}=t.useContext(me),w=t.useContext(de),x=(r=(l==null?void 0:l.disabled)||O)!==null&&r!==void 0?r:w,m=t.useRef(o.value);t.useEffect(()=>{l==null||l.registerValue(o.value)},[]),t.useEffect(()=>{if(!v)return o.value!==m.current&&(l==null||l.cancelValue(m.current),l==null||l.registerValue(o.value),m.current=o.value),()=>l==null?void 0:l.cancelValue(o.value)},[o.value]);const d=S("checkbox",a),C=Q(d),[s,h,N]=U(d,C),k=Object.assign({},o);l&&!v&&(k.onChange=function(){o.onChange&&o.onChange.apply(o,arguments),l.toggleOption&&l.toggleOption({label:b,value:o.value})},k.name=l.name,k.checked=l.value.includes(o.value));const P=E(`${d}-wrapper`,{[`${d}-rtl`]:y==="rtl",[`${d}-wrapper-checked`]:k.checked,[`${d}-wrapper-disabled`]:x,[`${d}-wrapper-in-form-item`]:q},f==null?void 0:f.className,i,F,N,C,h),I=E({[`${d}-indeterminate`]:p},se,h),j=p?"mixed":void 0;return s(t.createElement(ue,{component:"Checkbox",disabled:x},t.createElement("label",{className:P,style:Object.assign(Object.assign({},f==null?void 0:f.style),V),onMouseEnter:g,onMouseLeave:u},t.createElement(be,Object.assign({"aria-checked":j},k,{prefixCls:d,className:I,disabled:x,ref:c})),b!==void 0&&t.createElement("span",null,b))))},Z=t.forwardRef(Ce);var ge=function(e,c){var r={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&c.indexOf(a)<0&&(r[a]=e[a]);if(e!=null&&typeof Object.getOwnPropertySymbols=="function")for(var i=0,a=Object.getOwnPropertySymbols(e);i<a.length;i++)c.indexOf(a[i])<0&&Object.prototype.propertyIsEnumerable.call(e,a[i])&&(r[a[i]]=e[a[i]]);return r};const ve=t.forwardRef((e,c)=>{const{defaultValue:r,children:a,options:i=[],prefixCls:F,className:b,rootClassName:p,style:V,onChange:g}=e,u=ge(e,["defaultValue","children","options","prefixCls","className","rootClassName","style","onChange"]),{getPrefixCls:v,direction:O}=t.useContext(K),[o,S]=t.useState(u.value||r||[]),[y,f]=t.useState([]);t.useEffect(()=>{"value"in u&&S(u.value||[])},[u.value]);const l=t.useMemo(()=>i.map(n=>typeof n=="string"||typeof n=="number"?{label:n,value:n}:n),[i]),q=n=>{f(_=>_.filter(R=>R!==n))},w=n=>{f(_=>[].concat(B(_),[n]))},x=n=>{const _=o.indexOf(n.value),R=B(o);_===-1?R.push(n.value):R.splice(_,1),"value"in u||S(R),g==null||g(R.filter(M=>y.includes(M)).sort((M,ee)=>{const ae=l.findIndex(T=>T.value===M),te=l.findIndex(T=>T.value===ee);return ae-te}))},m=v("checkbox",F),d=`${m}-group`,C=Q(m),[s,h,N]=U(m,C),k=ce(u,["value","disabled"]),P=i.length?l.map(n=>t.createElement(Z,{prefixCls:m,key:n.value.toString(),disabled:"disabled"in n?n.disabled:u.disabled,value:n.value,checked:o.includes(n.value),onChange:n.onChange,className:`${d}-item`,style:n.style,title:n.title,id:n.id,required:n.required},n.label)):a,I={toggleOption:x,value:o,disabled:u.disabled,name:u.name,registerValue:w,cancelValue:q},j=E(d,{[`${d}-rtl`]:O==="rtl"},b,p,N,C,h);return s(t.createElement("div",Object.assign({className:j,style:V},k,{ref:c}),t.createElement(Y.Provider,{value:I},P)))}),W=Z;W.Group=ve;W.__ANT_CHECKBOX=!0;const $=({field:e})=>{t.useSyncExternalStore(e.subscribe.bind(e),e.getSnapshot.bind(e));const c=e.getName(),r=e.getProps(),a=e.getValue(),i=t.useCallback(p=>{e.isReady()&&(e.setValue(p.target.checked||!1),e.setTouched(!0),e.setDirty(!0))},[e]);t.useEffect(()=>{e.setReady(!0)},[e,c]);const b={...{width:e.getWidth()},...r.style};return G.jsx(W,{checked:a,disabled:e.isDisabled()||e.isReadOnly(),onChange:i,autoFocus:r.autoFocus,indeterminate:r.indeterminate,style:b})};try{$.displayName="CheckboxFieldRender",$.__docgenInfo={description:"",displayName:"CheckboxFieldRender",props:{field:{defaultValue:null,description:"",name:"field",required:!0,type:{name:"CheckboxField"}}}}}catch{}class xe extends ne{noGrowWidth(){return!0}render(){return G.jsx($,{field:this})}}const L=e=>G.jsx(ie,{buttons:null,fieldsProps:{field1:{...e,component:xe}}}),ke=L;try{L.displayName="CheckboxComponent",L.__docgenInfo={description:"DForm Checkbox component",displayName:"CheckboxComponent",props:{indeterminate:{defaultValue:null,description:"The indeterminate checked state of checkbox",name:"indeterminate",required:!1,type:{name:"boolean"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => CheckboxField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},inlineGroup:{defaultValue:null,description:"inline group name",name:"inlineGroup",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"Field default value",name:"defaultValue",required:!1,type:{name:"boolean"}},hidden:{defaultValue:null,description:"Whether the field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"Whether the field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"Whether the field default state is readonly",name:"readOnly",required:!1,type:{name:"boolean"}},nonEditable:{defaultValue:null,description:"Whether the field can not be edited (the field will have readOnly state if formMode is 'update')",name:"nonEditable",required:!1,type:{name:"boolean"}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: boolean, prevValue: boolean, field: CheckboxField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: CheckboxField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: CheckboxField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: boolean, error: string, isSubmit: boolean, field: CheckboxField) => void)"}},onFieldDataFetch:{defaultValue:null,description:"fires when the field trying to fetch data",name:"onFieldDataFetch",required:!1,type:{name:"((field: CheckboxField) => IDFormDataSourcePromise)"}},onFieldDataFetchSuccess:{defaultValue:null,description:"fires when the field fetch success",name:"onFieldDataFetchSuccess",required:!1,type:{name:"((result: { data: Record<string, any>; }, field: CheckboxField) => void)"}},onFieldDataFetchError:{defaultValue:null,description:"fires when the field fetch failed",name:"onFieldDataFetchError",required:!1,type:{name:"((error: IError, field: CheckboxField) => void)"}}}}}catch{}try{checkboxComponent.displayName="checkboxComponent",checkboxComponent.__docgenInfo={description:"DForm Checkbox component",displayName:"checkboxComponent",props:{indeterminate:{defaultValue:null,description:"The indeterminate checked state of checkbox",name:"indeterminate",required:!1,type:{name:"boolean"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => CheckboxField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},inlineGroup:{defaultValue:null,description:"inline group name",name:"inlineGroup",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"Field default value",name:"defaultValue",required:!1,type:{name:"boolean"}},hidden:{defaultValue:null,description:"Whether the field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"Whether the field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"Whether the field default state is readonly",name:"readOnly",required:!1,type:{name:"boolean"}},nonEditable:{defaultValue:null,description:"Whether the field can not be edited (the field will have readOnly state if formMode is 'update')",name:"nonEditable",required:!1,type:{name:"boolean"}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: boolean, prevValue: boolean, field: CheckboxField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: CheckboxField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: CheckboxField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: CheckboxField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: boolean, error: string, isSubmit: boolean, field: CheckboxField) => void)"}},onFieldDataFetch:{defaultValue:null,description:"fires when the field trying to fetch data",name:"onFieldDataFetch",required:!1,type:{name:"((field: CheckboxField) => IDFormDataSourcePromise)"}},onFieldDataFetchSuccess:{defaultValue:null,description:"fires when the field fetch success",name:"onFieldDataFetchSuccess",required:!1,type:{name:"((result: { data: Record<string, any>; }, field: CheckboxField) => void)"}},onFieldDataFetchError:{defaultValue:null,description:"fires when the field fetch failed",name:"onFieldDataFetchError",required:!1,type:{name:"((error: IError, field: CheckboxField) => void)"}}}}}catch{}const pa={title:"DForm/Fields/Checkbox",component:ke,tags:["autodocs"],parameters:{docs:{source:{language:"tsx",format:!0,code:`
                    import React from 'react';
                    import {DForm} from @krinopotam/ui-kit/dForm';
                    import {CheckboxField, ICheckboxFieldProps} from @krinopotam/ui-kit/dForm/fields/checkbox/checkboxField';
                    type IComponent = ICheckboxFieldProps;
                    /** DForm Checkbox component */
                    export const CheckboxComponent = (props: IComponent): React.JSX.Element => (
                        <DForm buttons={null} fieldsProps={{field1: {...props, component: CheckboxField}}} />
                    );
                    export default CheckboxComponent;
                `}}}},D={args:{label:"Checkbox field"}};var A,X,J;D.parameters={...D.parameters,docs:{...(A=D.parameters)==null?void 0:A.docs,source:{originalSource:`{
  args: {
    label: 'Checkbox field'
  }
}`,...(J=(X=D.parameters)==null?void 0:X.docs)==null?void 0:J.source}}};const ma=["Playground"];export{D as Playground,ma as __namedExportsOrder,pa as default};
