import{j as s}from"./jsx-runtime-CLpGMVip.js";import{B as F,D as V}from"./dForm-BWQ79u8n.js";import"./dayjs.min-0E-yjQGw.js";import{r as d}from"./index-C9MQhBv9.js";import{Q as q}from"./quillEditor-CkBnT_2T.js";import"./isArray-Cl7xn3Rc.js";import"./useToken-C7r1PZCj.js";import"./compact-item-DA-GXfnI.js";import"./index-DYSaHhaM.js";import"./index-B-Tif3g2.js";import"./index-7UV5TWEd.js";import"./index-CEaSTCJ_.js";import"./context-55JlqysY.js";import"./pickAttrs-Br7KB4bY.js";import"./useVariants-54jhFFnz.js";import"./index-CNIUd1zL.js";import"./motion-hLQ8GYzu.js";import"./row-CIeG6Ir6.js";import"./ContextIsolator-QgC1AqAH.js";import"./roundedArrow-DmDmIiOY.js";import"./index-3upY0JfS.js";import"./colors-DUoAwKpO.js";import"./QuestionCircleOutlined-cSUxXC2W.js";import"./ExclamationCircleFilled-DH9qZ7y2.js";import"./buttonsRow-DgoUOL1l.js";import"./button-4AcyERAA.js";import"./index-BW5SL8mY.js";import"./button-bcPEIH53.js";import"./Sider-DE0fVHvD.js";import"./KeyCode-lh1qUinJ.js";import"./DownOutlined-LA98A-kK.js";import"./getNanoId-CghKzzgc.js";import"./updateModalTheme-UYJBKmLU.js";import"./headerRender-DccPdHnJ.js";import"./index-C3W8-LPG.js";import"./CloseOutlined-DRVLVuFC.js";import"./useClosable-D8jC4WSZ.js";import"./InfoCircleOutlined-DifEp91c.js";import"./index--n2SL9R3.js";import"./CheckOutlined-Buza8fpw.js";import"./isDebugMode-B-VM_G4X.js";import"./styled-components.browser.esm-CYN9NzFp.js";import"./index-CdX1QTNh.js";const r=({field:l})=>{d.useSyncExternalStore(l.subscribe.bind(l),l.getSnapshot.bind(l));const e=l.getProps(),h=l.getValue(),y=d.useCallback(function(i,a,n,t){var p;l.isReady()&&(l.setValue(i||void 0),l.setDirty(!0),(p=e.onChange)==null||p.call(e,i,a,n,t,l))},[l,e]),b=d.useCallback((i,a,n)=>{var t;l.setTouched(!0),(t=e.onBlur)==null||t.call(e,i,a,n,l)},[l,e]);d.useEffect(()=>{l.setReady(!0)},[l]);const g={...{width:l.getWidth()??"100%"},...e.style};return s.jsx(q,{className:e.className,theme:e.theme,value:h,formats:e.formats,toolbar:e.toolbar,preserveWhitespace:e.preserveWhitespace,tabIndex:e.tabIndex,bounds:e.bounds,style:g,disabled:l.isDisabled(),readOnly:l.isReadOnly(),placeholder:e.placeholder,onChange:y,onBlur:b,onChangeSelection:(i,a,n)=>{var t;return(t=e.onChangeSelection)==null?void 0:t.call(e,i,a,n,l)},onFocus:(i,a,n)=>{var t;return(t=e.onFocus)==null?void 0:t.call(e,i,a,n,l)},onKeyDown:i=>{var a;return(a=e.onKeyDown)==null?void 0:a.call(e,i,l)},onKeyPress:i=>{var a;return(a=e.onKeyPress)==null?void 0:a.call(e,i,l)},onKeyUp:i=>{var a;return(a=e.onKeyUp)==null?void 0:a.call(e,i,l)}})};try{r.displayName="QuillEditorFieldRender",r.__docgenInfo={description:"",displayName:"QuillEditorFieldRender",props:{field:{defaultValue:null,description:"",name:"field",required:!0,type:{name:"QuillEditorField"}}}}}catch{}class E extends F{render(){return s.jsx(r,{field:this})}}const u=l=>s.jsx(V,{buttons:null,fieldsProps:{field1:{...l,component:E}}});try{u.displayName="QuillEditorComponent",u.__docgenInfo={description:"DForm QuillEditor field",displayName:"QuillEditorComponent",props:{bounds:{defaultValue:null,description:"",name:"bounds",required:!1,type:{name:"string | HTMLElement"}},formats:{defaultValue:null,description:"Allowed formats. This is separate from adding a control in the Toolbar. For example, you can configure Quill to allow bolded content to be pasted into an editor that has no bold button in the toolbar",name:"formats",required:!1,type:{name:'("align" | "color" | "link" | "list" | "size" | "background" | "bold" | "font" | "code" | "italic" | "strike" | "script" | "underline" | "blockquote" | "header" | "indent" | "bullet" | ... 4 more ... | "video")[]'}},toolbar:{defaultValue:null,description:"Toolbars buttons config",name:"toolbar",required:!1,type:{name:"IQuilToolbar"}},preserveWhitespace:{defaultValue:null,description:"",name:"preserveWhitespace",required:!1,type:{name:"boolean"}},tabIndex:{defaultValue:null,description:"",name:"tabIndex",required:!1,type:{name:"number"}},theme:{defaultValue:null,description:"Name of theme to use. The builtin options are “bubble” or “snow”. Default: snow",name:"theme",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"------ Callbacks --------",name:"onChange",required:!1,type:{name:"((value: string, delta: Delta, source: Sources, editor: UnprivilegedEditor, field: QuillEditorField) => void)"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"((previousSelection: Range, source: Sources, editor: UnprivilegedEditor, field: QuillEditorField) => void)"}},onChangeSelection:{defaultValue:null,description:"",name:"onChangeSelection",required:!1,type:{name:"((selection: Range, source: Sources, editor: UnprivilegedEditor, field: QuillEditorField) => void)"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"((selection: Range, source: Sources, editor: UnprivilegedEditor, field: QuillEditorField) => void)"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"((e: KeyboardEvent<HTMLElement>, field: QuillEditorField) => void)"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"((e: KeyboardEvent<HTMLElement>, field: QuillEditorField) => void)"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"((e: KeyboardEvent<HTMLElement>, field: QuillEditorField) => void)"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => QuillEditorField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},itemClassName:{defaultValue:null,description:"Field item class name",name:"itemClassName",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"Field class name",name:"className",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},inlineGroup:{defaultValue:null,description:"inline group name",name:"inlineGroup",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"Field default value",name:"defaultValue",required:!1,type:{name:"string"}},hidden:{defaultValue:null,description:"Whether the field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"Whether the field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"Whether the field default state is readonly",name:"readOnly",required:!1,type:{name:"boolean"}},nonEditable:{defaultValue:null,description:"Whether the field can not be edited (the field will have readOnly or disabled state if formMode is 'update')",name:"nonEditable",required:!1,type:{name:'boolean | "readOnly" | "disabled"'}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: string, prevValue: string, field: QuillEditorField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: QuillEditorField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: QuillEditorField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: QuillEditorField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: QuillEditorField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: QuillEditorField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: QuillEditorField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: QuillEditorField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: QuillEditorField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: string, error: string, isSubmit: boolean, field: QuillEditorField) => void)"}},onFieldDataFetch:{defaultValue:null,description:"fires when the field trying to fetch data",name:"onFieldDataFetch",required:!1,type:{name:"((field: QuillEditorField) => IDFormDataSourcePromise)"}},onFieldDataFetchSuccess:{defaultValue:null,description:"fires when the field fetch success",name:"onFieldDataFetchSuccess",required:!1,type:{name:"((result: { data: Record<string, any>; }, field: QuillEditorField) => void)"}},onFieldDataFetchError:{defaultValue:null,description:"fires when the field fetch failed",name:"onFieldDataFetchError",required:!1,type:{name:"((error: IError, field: QuillEditorField) => void)"}}}}}catch{}try{quillEditorComponent.displayName="quillEditorComponent",quillEditorComponent.__docgenInfo={description:"DForm QuillEditor field",displayName:"quillEditorComponent",props:{bounds:{defaultValue:null,description:"",name:"bounds",required:!1,type:{name:"string | HTMLElement"}},formats:{defaultValue:null,description:"Allowed formats. This is separate from adding a control in the Toolbar. For example, you can configure Quill to allow bolded content to be pasted into an editor that has no bold button in the toolbar",name:"formats",required:!1,type:{name:'("align" | "color" | "link" | "list" | "size" | "background" | "bold" | "font" | "code" | "italic" | "strike" | "script" | "underline" | "blockquote" | "header" | "indent" | "bullet" | ... 4 more ... | "video")[]'}},toolbar:{defaultValue:null,description:"Toolbars buttons config",name:"toolbar",required:!1,type:{name:"IQuilToolbar"}},preserveWhitespace:{defaultValue:null,description:"",name:"preserveWhitespace",required:!1,type:{name:"boolean"}},tabIndex:{defaultValue:null,description:"",name:"tabIndex",required:!1,type:{name:"number"}},theme:{defaultValue:null,description:"Name of theme to use. The builtin options are “bubble” or “snow”. Default: snow",name:"theme",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"------ Callbacks --------",name:"onChange",required:!1,type:{name:"((value: string, delta: Delta, source: Sources, editor: UnprivilegedEditor, field: QuillEditorField) => void)"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"((previousSelection: Range, source: Sources, editor: UnprivilegedEditor, field: QuillEditorField) => void)"}},onChangeSelection:{defaultValue:null,description:"",name:"onChangeSelection",required:!1,type:{name:"((selection: Range, source: Sources, editor: UnprivilegedEditor, field: QuillEditorField) => void)"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"((selection: Range, source: Sources, editor: UnprivilegedEditor, field: QuillEditorField) => void)"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"((e: KeyboardEvent<HTMLElement>, field: QuillEditorField) => void)"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"((e: KeyboardEvent<HTMLElement>, field: QuillEditorField) => void)"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"((e: KeyboardEvent<HTMLElement>, field: QuillEditorField) => void)"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => QuillEditorField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},itemClassName:{defaultValue:null,description:"Field item class name",name:"itemClassName",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"Field class name",name:"className",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},inlineGroup:{defaultValue:null,description:"inline group name",name:"inlineGroup",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"Field default value",name:"defaultValue",required:!1,type:{name:"string"}},hidden:{defaultValue:null,description:"Whether the field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"Whether the field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"Whether the field default state is readonly",name:"readOnly",required:!1,type:{name:"boolean"}},nonEditable:{defaultValue:null,description:"Whether the field can not be edited (the field will have readOnly or disabled state if formMode is 'update')",name:"nonEditable",required:!1,type:{name:'boolean | "readOnly" | "disabled"'}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: string, prevValue: string, field: QuillEditorField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: QuillEditorField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: QuillEditorField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: QuillEditorField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: QuillEditorField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: QuillEditorField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: QuillEditorField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: QuillEditorField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: QuillEditorField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: string, error: string, isSubmit: boolean, field: QuillEditorField) => void)"}},onFieldDataFetch:{defaultValue:null,description:"fires when the field trying to fetch data",name:"onFieldDataFetch",required:!1,type:{name:"((field: QuillEditorField) => IDFormDataSourcePromise)"}},onFieldDataFetchSuccess:{defaultValue:null,description:"fires when the field fetch success",name:"onFieldDataFetchSuccess",required:!1,type:{name:"((result: { data: Record<string, any>; }, field: QuillEditorField) => void)"}},onFieldDataFetchError:{defaultValue:null,description:"fires when the field fetch failed",name:"onFieldDataFetchError",required:!1,type:{name:"((error: IError, field: QuillEditorField) => void)"}}}}}catch{}const me={title:"DForm/Fields/QuillEditor",component:u,tags:["autodocs"],parameters:{docs:{source:{language:"tsx",format:!0,code:`
                    import React from 'react';
                    import {DForm} from @krinopotam/ui-kit/dForm';
                    import {IQuillEditorFieldProps, QuillEditorField} from @krinopotam/ui-kit/dForm/fields/quillEditor/quillEditorField';
                    type IComponent = IQuillEditorFieldProps;
                    /** DForm QuillEditor field */
                    export const QuillEditorComponent = (props: IComponent): React.JSX.Element => (
                        <DForm buttons={null} fieldsProps={{field1: {...props, component: QuillEditorField}}} />
                    );
                    export default QuillEditorComponent;
                `}}}},o={args:{label:"Text editor field"}};var f,m,c;o.parameters={...o.parameters,docs:{...(f=o.parameters)==null?void 0:f.docs,source:{originalSource:`{
  args: {
    label: 'Text editor field'
  }
}`,...(c=(m=o.parameters)==null?void 0:m.docs)==null?void 0:c.source}}};const ce=["Playground"];export{o as Playground,ce as __namedExportsOrder,me as default};
