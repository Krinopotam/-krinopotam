import{j as e}from"./jsx-runtime-D_zvdyIk.js";import{S as d,B as t}from"./button-lzfCHTsA.js";import{u as g,m as f}from"./updateModalTheme-4GdUhrpk.js";import{r as i}from"./index-iW-139IE.js";import"./compact-item-Cxv0YLF9.js";import"./useToken-C9qwXZKU.js";import"./index-mQZ8i_rL.js";import"./index-D_2t0AaZ.js";import"./index-CMYZVoVF.js";import"./button-D87aS1YS.js";import"./headerRender-gIu-8TzX.js";import"./index-CvIgV7lr.js";import"./ExclamationCircleFilled-DO6fsheT.js";import"./pickAttrs-DOtYDQG6.js";import"./context-u9dygr8g.js";import"./motion-HGHEQR47.js";import"./CloseOutlined-C5nLa7GN.js";import"./KeyCode-lh1qUinJ.js";import"./ContextIsolator-BX2WkAUK.js";import"./useClosable-DLVmVXm2.js";import"./index-Bi_XhfGV.js";import"./DownOutlined-CSg1yAI9.js";import"./index-H-U0Qhl4.js";import"./buttonsRow-CK4XIiqq.js";import"./Sider-zAVKy6og.js";import"./row-Bq2vx5ix.js";import"./roundedArrow-CIJYWJcZ.js";import"./colors-B0jgcrR7.js";import"./getNanoId-CghKzzgc.js";import"./InfoCircleOutlined-DgVG6Ryw.js";import"./QuestionCircleOutlined-BUGNUdLn.js";import"./index-DSj8ZEWj.js";const r=a=>{var s;g();const n=i.useRef(null);n.current&&((s=n.current)==null||s.update(a));const o=i.useCallback(m=>{n.current=f.alert({...a,colorType:m})},[a]);return e.jsxs(d,{children:[e.jsx(t,{onClick:()=>o(),children:"Open alert"}),e.jsx(t,{color:"primary",variant:"solid",onClick:()=>o("info"),children:"Open alert"}),e.jsx(t,{color:"warning",variant:"solid",onClick:()=>o("warning"),children:"Open alert"}),e.jsx(t,{color:"success",variant:"solid",onClick:()=>o("success"),children:"Open alert"}),e.jsx(t,{color:"danger",variant:"solid",onClick:()=>o("danger"),children:"Open alert"})]})};try{r.displayName="AlertMessageBoxComponent",r.__docgenInfo={description:"MessageBox Alert component",displayName:"AlertMessageBoxComponent",props:{okText:{defaultValue:null,description:"",name:"okText",required:!1,type:{name:"string"}},onOk:{defaultValue:null,description:"",name:"onOk",required:!1,type:{name:"((messageBox: MessageBoxApi) => boolean | void)"}},title:{defaultValue:null,description:"Form title",name:"title",required:!1,type:{name:"ReactNode"}},content:{defaultValue:null,description:"Form content",name:"content",required:!1,type:{name:"ReactNode"}},buttons:{defaultValue:null,description:"Form buttons",name:"buttons",required:!1,type:{name:"IFormButtons"}},colorType:{defaultValue:null,description:"Form type",name:"colorType",required:!1,type:{name:"enum",value:[{value:'"warning"'},{value:'"danger"'},{value:'"default"'},{value:'"primary"'},{value:'"blue"'},{value:'"purple"'},{value:'"cyan"'},{value:'"green"'},{value:'"magenta"'},{value:'"pink"'},{value:'"red"'},{value:'"orange"'},{value:'"yellow"'},{value:'"volcano"'},{value:'"geekblue"'},{value:'"lime"'},{value:'"gold"'},{value:'"info"'},{value:'"success"'}]}},icon:{defaultValue:null,description:"Form icon",name:"icon",required:!1,type:{name:"ReactNode"}},language:{defaultValue:null,description:"Language",name:"language",required:!1,type:{name:"enum",value:[{value:'"en_US"'},{value:'"ru_RU"'},{value:'"zh_CN"'}]}},translation:{defaultValue:null,description:"Custom translation",name:"translation",required:!1,type:{name:"Partial<{ ok: string; cancel: string; attention: string; processing: string; pleaseWait: string; }>"}},closable:{defaultValue:null,description:"Whether a close (x) button is visible on top right of the modal dialog or not",name:"closable",required:!1,type:{name:"boolean"}},maskClosable:{defaultValue:null,description:"Whether to close the modal dialog when the mask (area outside the modal) is clicked",name:"maskClosable",required:!1,type:{name:"boolean"}},centered:{defaultValue:null,description:"Center modal",name:"centered",required:!1,type:{name:"boolean"}},onAfterClose:{defaultValue:null,description:"After controls close callback",name:"onAfterClose",required:!1,type:{name:"(() => void)"}},onCrossClose:{defaultValue:null,description:"On form close by close cross pressed callback",name:"onCrossClose",required:!1,type:{name:"(() => void)"}}}}}catch{}try{alertMessageBox.displayName="alertMessageBox",alertMessageBox.__docgenInfo={description:"MessageBox Alert component",displayName:"alertMessageBox",props:{okText:{defaultValue:null,description:"",name:"okText",required:!1,type:{name:"string"}},onOk:{defaultValue:null,description:"",name:"onOk",required:!1,type:{name:"((messageBox: MessageBoxApi) => boolean | void)"}},title:{defaultValue:null,description:"Form title",name:"title",required:!1,type:{name:"ReactNode"}},content:{defaultValue:null,description:"Form content",name:"content",required:!1,type:{name:"ReactNode"}},buttons:{defaultValue:null,description:"Form buttons",name:"buttons",required:!1,type:{name:"IFormButtons"}},colorType:{defaultValue:null,description:"Form type",name:"colorType",required:!1,type:{name:"enum",value:[{value:'"warning"'},{value:'"danger"'},{value:'"default"'},{value:'"primary"'},{value:'"blue"'},{value:'"purple"'},{value:'"cyan"'},{value:'"green"'},{value:'"magenta"'},{value:'"pink"'},{value:'"red"'},{value:'"orange"'},{value:'"yellow"'},{value:'"volcano"'},{value:'"geekblue"'},{value:'"lime"'},{value:'"gold"'},{value:'"info"'},{value:'"success"'}]}},icon:{defaultValue:null,description:"Form icon",name:"icon",required:!1,type:{name:"ReactNode"}},language:{defaultValue:null,description:"Language",name:"language",required:!1,type:{name:"enum",value:[{value:'"en_US"'},{value:'"ru_RU"'},{value:'"zh_CN"'}]}},translation:{defaultValue:null,description:"Custom translation",name:"translation",required:!1,type:{name:"Partial<{ ok: string; cancel: string; attention: string; processing: string; pleaseWait: string; }>"}},closable:{defaultValue:null,description:"Whether a close (x) button is visible on top right of the modal dialog or not",name:"closable",required:!1,type:{name:"boolean"}},maskClosable:{defaultValue:null,description:"Whether to close the modal dialog when the mask (area outside the modal) is clicked",name:"maskClosable",required:!1,type:{name:"boolean"}},centered:{defaultValue:null,description:"Center modal",name:"centered",required:!1,type:{name:"boolean"}},onAfterClose:{defaultValue:null,description:"After controls close callback",name:"onAfterClose",required:!1,type:{name:"(() => void)"}},onCrossClose:{defaultValue:null,description:"On form close by close cross pressed callback",name:"onCrossClose",required:!1,type:{name:"(() => void)"}}}}}catch{}const H={title:"Controls/MessageBox/Alert",component:r,tags:["autodocs"],parameters:{docs:{source:{language:"tsx",format:!0,code:`
                    import {Button, IButtonProps} from @krinopotam/ui-kit/button';
                    import {IModalAlertConfig, MessageBox, MessageBoxApi, useUpdateMessageBoxTheme} from @krinopotam/ui-kit/messageBox';
                    import {Space} from 'antd';
                    import React, {useCallback, useRef} from 'react';
                    type IComponent = IModalAlertConfig;
                    /** MessageBox Alert component */
                    export const AlertMessageBoxComponent = (props: IComponent): React.JSX.Element => {
                        useUpdateMessageBoxTheme(); //set current theme to messageBox
                        const curMessageBox = useRef<MessageBoxApi | null>(null);
                        if (curMessageBox.current) curMessageBox.current?.update(props);
                        const onClick = useCallback(
                            (colorType?: IButtonProps['color']) => {
                                curMessageBox.current = MessageBox.alert({...props, colorType: colorType});
                            },
                            [props]
                        );
                        return (
                            <Space>
                                <Button onClick={() => onClick()}>Open alert</Button>
                                <Button color="primary" variant="solid" onClick={() => onClick('info')}>
                                    Open alert
                                </Button>
                                <Button color="warning" variant="solid" onClick={() => onClick('warning')}>
                                    Open alert
                                </Button>
                                <Button color="success" variant="solid" onClick={() => onClick('success')}>
                                    Open alert
                                </Button>
                                <Button color="danger" variant="solid" onClick={() => onClick('danger')}>
                                    Open alert
                                </Button>
                            </Space>
                        );
                    };
                    export default AlertMessageBoxComponent;
                `}}}},l={args:{content:"Info"}};var u,c,p;l.parameters={...l.parameters,docs:{...(u=l.parameters)==null?void 0:u.docs,source:{originalSource:`{
  args: {
    content: 'Info'
  }
}`,...(p=(c=l.parameters)==null?void 0:c.docs)==null?void 0:p.source}}};const K=["Alert"];export{l as Alert,K as __namedExportsOrder,H as default};
