import{j as a}from"./useToken-b19ab62a.js";import{D as o}from"./tabulatorGrid-e0bda04d.js";import"./index-092ccb3f.js";import"./dayjs.min-bd65d405.js";import{C as r}from"./customField-f5817a2b.js";import"./index-76fb7be0.js";import"./_commonjsHelpers-de833af9.js";import"./extends-98964cd2.js";import"./helpersObjects-335d2932.js";import"./compact-item-153ccf6f.js";import"./index-a764d3ff.js";import"./assertThisInitialized-8802cfe2.js";import"./index-6ed6bb17.js";import"./motion-a9f81d2c.js";import"./helpersString-59da762c.js";import"./v4-4a60fe23.js";import"./updateModalTheme-425bc3b2.js";import"./draggableRender-817e2d38.js";import"./index-84136495.js";import"./InfoCircleOutlined-b0bd8909.js";import"./button-13ccc7ad.js";import"./button-3e1cd756.js";import"./index-b1d11547.js";import"./ExclamationCircleFilled-cf151277.js";import"./context-5a13208d.js";import"./motion-3729e44c.js";import"./useClosable-bab051fc.js";import"./KeyCode-6413d982.js";import"./pickAttrs-f83e05d3.js";import"./zoom-faeb00d0.js";import"./PurePanel-71bfc635.js";import"./buttonsRow-f20d8f58.js";import"./Sider-ab22ad9d.js";import"./row-1394a33e.js";import"./roundedArrow-d75250bf.js";import"./colors-91786050.js";import"./index-9d475cdf.js";import"./QuestionCircleOutlined-41527efc.js";import"./index-e792aa35.js";import"./tabulatorBase-55a14ce2.js";import"./client-3399ac50.js";import"./styled-components.browser.esm-af1ba35b.js";import"./index-89674408.js";import"./index-26e00ff7.js";import"./statusUtils-fe2ccc25.js";import"./SearchOutlined-2078d1e8.js";import"./select-682fa1e1.js";import"./datePicker-b41297a7.js";import"./quillEditor-7c013428.js";import"./_baseIsEqual-66ace112.js";import"./iframe-b9fc7715.js";import"../sb-preview/runtime.js";import"./MenuOutlined-d7aaaba5.js";import"./_commonjs-dynamic-modules-302442b1.js";const t=l=>a.jsx(o,{buttons:null,fieldsProps:{field1:{...l,component:r}}}),u=t;try{t.displayName="CustomComponent",t.__docgenInfo={description:"DForm Custom field",displayName:"CustomComponent",props:{value:{defaultValue:null,description:"Default value",name:"value",required:!1,type:{name:"ReactNode"}},onRender:{defaultValue:null,description:"Fires on field render",name:"onRender",required:!1,type:{name:"((value: ReactNode, field: CustomField) => ReactNode)"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => CustomField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},inlineGroup:{defaultValue:null,description:"inline group name",name:"inlineGroup",required:!1,type:{name:"string"}},hidden:{defaultValue:null,description:"If field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"If field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"If field default state is readonly",name:"readOnly",required:!1,type:{name:"boolean"}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: unknown, prevValue: unknown, field: CustomField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: CustomField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: CustomField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: CustomField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: CustomField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: CustomField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: CustomField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: CustomField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: CustomField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: unknown, error: string, isSubmit: boolean, field: CustomField) => void)"}}}}}catch{}try{customComponent.displayName="customComponent",customComponent.__docgenInfo={description:"DForm Custom field",displayName:"customComponent",props:{value:{defaultValue:null,description:"Default value",name:"value",required:!1,type:{name:"ReactNode"}},onRender:{defaultValue:null,description:"Fires on field render",name:"onRender",required:!1,type:{name:"((value: ReactNode, field: CustomField) => ReactNode)"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => CustomField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},inlineGroup:{defaultValue:null,description:"inline group name",name:"inlineGroup",required:!1,type:{name:"string"}},hidden:{defaultValue:null,description:"If field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"If field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"If field default state is readonly",name:"readOnly",required:!1,type:{name:"boolean"}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: unknown, prevValue: unknown, field: CustomField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: CustomField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: CustomField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: CustomField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: CustomField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: CustomField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: CustomField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: CustomField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: CustomField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: unknown, error: string, isSubmit: boolean, field: CustomField) => void)"}}}}}catch{}const se={title:"DForm/Fields/Custom",component:u,tags:["autodocs"],parameters:{docs:{source:{language:"tsx",format:!0,code:`
                    import React from "react";
                    import {DForm} from @krinopotam/ui-kit/dForm";
                    import {CustomField, ICustomFieldProps} from @krinopotam/ui-kit/dForm/fields/custom/customField";
                    type IComponent = ICustomFieldProps;
                    /** DForm Custom field */
                    export const CustomComponent = (props: IComponent): React.JSX.Element => <DForm
                        buttons={null}
                        fieldsProps={
                            {field1: {...props, component: CustomField}}
                        }
                    />
                    export default CustomComponent
                `}}}},e={args:{label:"Custom field",value:a.jsxs("h3",{children:["Any ",a.jsx("span",{style:{color:"red"},children:"react"})," component or ",a.jsx("span",{style:{color:"blue"},children:"string"})," "]})}};var n,i,d;e.parameters={...e.parameters,docs:{...(n=e.parameters)==null?void 0:n.docs,source:{originalSource:`{
  args: {
    label: 'Custom field',
    value: <h3>Any <span style={{
        color: 'red'
      }}>react</span> component or <span style={{
        color: 'blue'
      }}>string</span> </h3>
  }
}`,...(d=(i=e.parameters)==null?void 0:i.docs)==null?void 0:d.source}}};const me=["Playground"];export{e as Playground,me as __namedExportsOrder,se as default};
