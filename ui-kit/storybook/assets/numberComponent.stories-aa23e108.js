import{j as r}from"./useToken-b19ab62a.js";import{B as d,N as o,D as u}from"./tabulatorGrid-e0bda04d.js";import"./index-092ccb3f.js";import"./dayjs.min-bd65d405.js";import"./index-76fb7be0.js";import"./_commonjsHelpers-de833af9.js";import"./extends-98964cd2.js";import"./helpersObjects-335d2932.js";import"./compact-item-153ccf6f.js";import"./index-a764d3ff.js";import"./assertThisInitialized-8802cfe2.js";import"./index-6ed6bb17.js";import"./motion-a9f81d2c.js";import"./helpersString-59da762c.js";import"./v4-4a60fe23.js";import"./updateModalTheme-425bc3b2.js";import"./draggableRender-817e2d38.js";import"./index-84136495.js";import"./InfoCircleOutlined-b0bd8909.js";import"./button-13ccc7ad.js";import"./button-3e1cd756.js";import"./index-b1d11547.js";import"./ExclamationCircleFilled-cf151277.js";import"./context-5a13208d.js";import"./motion-3729e44c.js";import"./useClosable-bab051fc.js";import"./KeyCode-6413d982.js";import"./pickAttrs-f83e05d3.js";import"./zoom-faeb00d0.js";import"./PurePanel-71bfc635.js";import"./buttonsRow-f20d8f58.js";import"./Sider-ab22ad9d.js";import"./row-1394a33e.js";import"./roundedArrow-d75250bf.js";import"./colors-91786050.js";import"./index-9d475cdf.js";import"./QuestionCircleOutlined-41527efc.js";import"./index-e792aa35.js";import"./tabulatorBase-55a14ce2.js";import"./client-3399ac50.js";import"./styled-components.browser.esm-af1ba35b.js";import"./index-89674408.js";import"./index-26e00ff7.js";import"./statusUtils-fe2ccc25.js";import"./SearchOutlined-2078d1e8.js";import"./select-682fa1e1.js";import"./datePicker-b41297a7.js";import"./quillEditor-7c013428.js";import"./_baseIsEqual-66ace112.js";import"./iframe-b9fc7715.js";import"../sb-preview/runtime.js";import"./MenuOutlined-d7aaaba5.js";import"./_commonjs-dynamic-modules-302442b1.js";class s extends d{render(){return r.jsx(o,{field:this})}}const l=e=>r.jsx(u,{buttons:null,fieldsProps:{field1:{...e,component:s}}}),p=l;try{l.displayName="NumberComponent",l.__docgenInfo={description:"DForm Number field",displayName:"NumberComponent",props:{addonAfter:{defaultValue:null,description:"The label text displayed after (on the right side of) the input field",name:"addonAfter",required:!1,type:{name:"ReactNode"}},addonBefore:{defaultValue:null,description:"The label text displayed before (on the left side of) the input field",name:"addonBefore",required:!1,type:{name:"ReactNode"}},controls:{defaultValue:null,description:"Whether to show +- controls, or set custom arrows icon",name:"controls",required:!1,type:{name:"boolean | { upIcon?: ReactNode; downIcon?: ReactNode; }"}},decimalSeparator:{defaultValue:null,description:"Decimal separator. Syntactic sugar of `formatter`. Config decimal separator of display.",name:"decimalSeparator",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"Default value",name:"value",required:!1,type:{name:"string | number"}},formatter:{defaultValue:null,description:"Specifies the format of the value presented. Transform `value` to display value show in input",name:"formatter",required:!1,type:{name:"((value: ValueType, info: { userTyping: boolean; input: string; }) => string)"}},keyboard:{defaultValue:null,description:"If enable keyboard behavior",name:"keyboard",required:!1,type:{name:"boolean"}},maxLength:{defaultValue:null,description:"Max input length",name:"maxLength",required:!1,type:{name:"number"}},max:{defaultValue:null,description:"The max value",name:"max",required:!1,type:{name:"number"}},min:{defaultValue:null,description:"The min value",name:"min",required:!1,type:{name:"number"}},parser:{defaultValue:null,description:"Specifies the value extracted from formatter. Parse display value to validate number",name:"parser",required:!1,type:{name:"((displayValue: string) => ValueType)"}},precision:{defaultValue:null,description:"The precision of input value. Will use formatter when config of formatter. Syntactic sugar of `formatter`. Config precision of display.",name:"precision",required:!1,type:{name:"number"}},prefix:{defaultValue:null,description:"The prefix icon for the Input",name:"prefix",required:!1,type:{name:"ReactNode"}},step:{defaultValue:null,description:"The number to which the current value is increased or decreased. It can be an integer or decimal",name:"step",required:!1,type:{name:"string | number"}},stringMode:{defaultValue:null,description:"Set value as string to support high precision decimals. Will return string value by onChange",name:"stringMode",required:!1,type:{name:"boolean"}},upHandler:{defaultValue:null,description:"Up handler",name:"upHandler",required:!1,type:{name:"ReactNode"}},downHandler:{defaultValue:null,description:"Down handler",name:"downHandler",required:!1,type:{name:"ReactNode"}},className:{defaultValue:null,description:"Class name",name:"className",required:!1,type:{name:"string"}},prefixCls:{defaultValue:null,description:"Prefix class name",name:"prefixCls",required:!1,type:{name:"string"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => NumberField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},inlineGroup:{defaultValue:null,description:"inline group name",name:"inlineGroup",required:!1,type:{name:"string"}},hidden:{defaultValue:null,description:"If field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"If field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"If field default state is readonly",name:"readOnly",required:!1,type:{name:"boolean"}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: unknown, prevValue: unknown, field: NumberField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: NumberField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: NumberField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: NumberField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: NumberField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: NumberField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: NumberField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: NumberField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: NumberField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: unknown, error: string, isSubmit: boolean, field: NumberField) => void)"}}}}}catch{}try{numberComponent.displayName="numberComponent",numberComponent.__docgenInfo={description:"DForm Number field",displayName:"numberComponent",props:{addonAfter:{defaultValue:null,description:"The label text displayed after (on the right side of) the input field",name:"addonAfter",required:!1,type:{name:"ReactNode"}},addonBefore:{defaultValue:null,description:"The label text displayed before (on the left side of) the input field",name:"addonBefore",required:!1,type:{name:"ReactNode"}},controls:{defaultValue:null,description:"Whether to show +- controls, or set custom arrows icon",name:"controls",required:!1,type:{name:"boolean | { upIcon?: ReactNode; downIcon?: ReactNode; }"}},decimalSeparator:{defaultValue:null,description:"Decimal separator. Syntactic sugar of `formatter`. Config decimal separator of display.",name:"decimalSeparator",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"Default value",name:"value",required:!1,type:{name:"string | number"}},formatter:{defaultValue:null,description:"Specifies the format of the value presented. Transform `value` to display value show in input",name:"formatter",required:!1,type:{name:"((value: ValueType, info: { userTyping: boolean; input: string; }) => string)"}},keyboard:{defaultValue:null,description:"If enable keyboard behavior",name:"keyboard",required:!1,type:{name:"boolean"}},maxLength:{defaultValue:null,description:"Max input length",name:"maxLength",required:!1,type:{name:"number"}},max:{defaultValue:null,description:"The max value",name:"max",required:!1,type:{name:"number"}},min:{defaultValue:null,description:"The min value",name:"min",required:!1,type:{name:"number"}},parser:{defaultValue:null,description:"Specifies the value extracted from formatter. Parse display value to validate number",name:"parser",required:!1,type:{name:"((displayValue: string) => ValueType)"}},precision:{defaultValue:null,description:"The precision of input value. Will use formatter when config of formatter. Syntactic sugar of `formatter`. Config precision of display.",name:"precision",required:!1,type:{name:"number"}},prefix:{defaultValue:null,description:"The prefix icon for the Input",name:"prefix",required:!1,type:{name:"ReactNode"}},step:{defaultValue:null,description:"The number to which the current value is increased or decreased. It can be an integer or decimal",name:"step",required:!1,type:{name:"string | number"}},stringMode:{defaultValue:null,description:"Set value as string to support high precision decimals. Will return string value by onChange",name:"stringMode",required:!1,type:{name:"boolean"}},upHandler:{defaultValue:null,description:"Up handler",name:"upHandler",required:!1,type:{name:"ReactNode"}},downHandler:{defaultValue:null,description:"Down handler",name:"downHandler",required:!1,type:{name:"ReactNode"}},className:{defaultValue:null,description:"Class name",name:"className",required:!1,type:{name:"string"}},prefixCls:{defaultValue:null,description:"Prefix class name",name:"prefixCls",required:!1,type:{name:"string"}},component:{defaultValue:null,description:"Field React component",name:"component",required:!0,type:{name:"new (fieldName: string, fieldProps: any, model: DModel, parent?: IBaseField | undefined) => NumberField"}},helpClass:{defaultValue:null,description:"Help class",name:"helpClass",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Field label",name:"label",required:!1,type:{name:"ReactNode"}},placeholder:{defaultValue:null,description:"Field placeholder",name:"placeholder",required:!1,type:{name:"string"}},inlineGroup:{defaultValue:null,description:"inline group name",name:"inlineGroup",required:!1,type:{name:"string"}},hidden:{defaultValue:null,description:"If field default state is hidden",name:"hidden",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"If field default state is disabled",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"If field default state is readonly",name:"readOnly",required:!1,type:{name:"boolean"}},dependsOn:{defaultValue:null,description:"List of fields that must be filled in order to display this field",name:"dependsOn",required:!1,type:{name:"string[]"}},width:{defaultValue:null,description:"Field width",name:"width",required:!1,type:{name:"string | number"}},autoHeightResize:{defaultValue:null,description:"Field container height auto resize",name:"autoHeightResize",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Get focus by default",name:"autoFocus",required:!1,type:{name:"boolean"}},requiredMark:{defaultValue:null,description:"Mark Field Label as Required",name:"requiredMark",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"Config tooltip info",name:"tooltip",required:!1,type:{name:"LabelTooltipType"}},style:{defaultValue:null,description:"Field CSS style",name:"style",required:!1,type:{name:"CSSProperties"}},rowStyle:{defaultValue:null,description:"Row field container CSS style",name:"rowStyle",required:!1,type:{name:"CSSProperties"}},rules:{defaultValue:null,description:"Field validation rules",name:"rules",required:!1,type:{name:"IRuleType[]"}},onValueChanged:{defaultValue:null,description:"fires when the value of a field changed",name:"onValueChanged",required:!1,type:{name:"((value: unknown, prevValue: unknown, field: NumberField) => void)"}},onTouchedStateChanged:{defaultValue:null,description:"fires when the touched state of a field changed",name:"onTouchedStateChanged",required:!1,type:{name:"((state: boolean, field: NumberField) => void)"}},onDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of a field changed",name:"onDirtyStateChanged",required:!1,type:{name:"((state: boolean, field: NumberField) => void)"}},onErrorChanged:{defaultValue:null,description:"fires when the error of a field changed",name:"onErrorChanged",required:!1,type:{name:"((error: string, field: NumberField) => void)"}},onHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a field changed",name:"onHiddenStateChanged",required:!1,type:{name:"((state: boolean, field: NumberField) => void)"}},onReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a field changed",name:"onReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, field: NumberField) => void)"}},onLabelChanged:{defaultValue:null,description:"fires when label of a field changed",name:"onLabelChanged",required:!1,type:{name:"((label: ReactNode, prevLabel: ReactNode, field: NumberField) => void)"}},onDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a field changes",name:"onDisabledStateChanged",required:!1,type:{name:"((state: boolean, field: NumberField) => void)"}},onReadyStateChanged:{defaultValue:null,description:"fires when a field is completely initialized, its data is loaded",name:"onReadyStateChanged",required:!1,type:{name:"((state: boolean, field: NumberField) => void)"}},onValidated:{defaultValue:null,description:"fires when a field validated",name:"onValidated",required:!1,type:{name:"((value: unknown, error: string, isSubmit: boolean, field: NumberField) => void)"}}}}}catch{}const pe={title:"DForm/Fields/Number",component:p,tags:["autodocs"],parameters:{docs:{source:{language:"tsx",format:!0,code:`
                    import React from "react";
                    import {DForm} from @krinopotam/ui-kit/dForm";
                    import {INumberFieldProps, NumberField} from @krinopotam/ui-kit/dForm/fields/number/numberField";
                    type IComponent = INumberFieldProps;
                    /** DForm Number field */
                    export const NumberComponent = (props: IComponent): React.JSX.Element => <DForm
                        buttons={null}
                        fieldsProps={
                            {field1: {...props, component: NumberField} }
                        }/>
                    export default NumberComponent
                `}}}},a={args:{label:"Number field"}};var n,t,i;a.parameters={...a.parameters,docs:{...(n=a.parameters)==null?void 0:n.docs,source:{originalSource:`{
  args: {
    label: 'Number field'
  }
}`,...(i=(t=a.parameters)==null?void 0:t.docs)==null?void 0:i.source}}};const me=["Playground"];export{a as Playground,me as __namedExportsOrder,pe as default};
