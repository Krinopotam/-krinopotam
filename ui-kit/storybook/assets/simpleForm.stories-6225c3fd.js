import{j as e}from"./useToken-268f632d.js";import{D as u}from"./treeSelectFieldRender-0de2af8b.js";import"./index-092ccb3f.js";import"./dayjs.min-bd65d405.js";import{I as n}from"./inputField-bbb00859.js";import"./index-5819ae2c.js";import"./_commonjsHelpers-de833af9.js";import"./updateModalTheme-3177d112.js";import"./draggableRender-68189bdb.js";import"./index-e0a25a8d.js";import"./InfoCircleOutlined-14b312e0.js";import"./isNativeReflectConstruct-2f1897fe.js";import"./compact-item-e0eb0d02.js";import"./button-11c62e43.js";import"./button-a395f6e7.js";import"./helpersString-59da762c.js";import"./v4-4a60fe23.js";import"./index-ba109c1e.js";import"./ExclamationCircleFilled-8e2dacf4.js";import"./context-acf775e7.js";import"./motion-3729e44c.js";import"./useClosable-7a147c6b.js";import"./useZIndex-9f7c196b.js";import"./KeyCode-6413d982.js";import"./pickAttrs-f49ef707.js";import"./zoom-f1d5320d.js";import"./PurePanel-a66be90d.js";import"./index-53e6b65f.js";import"./buttonsRow-ca0a2aba.js";import"./Sider-f270e7a7.js";import"./row-353874ab.js";import"./roundedArrow-cf08b32b.js";import"./colors-dae18b42.js";import"./DownOutlined-7d62f4d3.js";import"./index-9d475cdf.js";import"./QuestionCircleOutlined-3fb4f056.js";import"./index-15561246.js";import"./index-762b8d87.js";import"./index-47c1009a.js";import"./statusUtils-8e8708fb.js";import"./SearchOutlined-826801c4.js";import"./select-82188730.js";import"./tabulatorBase-50de2949.js";import"./client-36d50ed5.js";import"./styled-components.browser.esm-11e59584.js";import"./datePicker-280e4e43.js";import"./quillEditor-b0c11980.js";import"./_baseIsEqual-93bb5583.js";import"./iframe-57919a18.js";import"../sb-preview/runtime.js";import"./MenuOutlined-207c5478.js";import"./_commonjs-dynamic-modules-302442b1.js";const d={formId:"Test form",confirmChanges:!0,fieldsProps:{login:{component:n,label:"Логин",tooltip:"Ввод логина"},password:{component:n,label:"Пароль",tooltip:"Ввод пвароль"}},buttons:{ok:{position:"right"}}},t=r=>{const s={...d,...r};return e.jsx(e.Fragment,{children:e.jsx("div",{style:{maxWidth:500},children:e.jsx(u,{...s})})})},m=t;try{t.displayName="SimpleForm",t.__docgenInfo={description:"Simple Dynamic form example",displayName:"SimpleForm",props:{apiRef:{defaultValue:null,description:"A mutable object to merge with these controls api",name:"apiRef",required:!1,type:{name:"unknown"}},formId:{defaultValue:null,description:"Form formId",name:"formId",required:!1,type:{name:"string"}},buttons:{defaultValue:null,description:"Buttons properties",name:"buttons",required:!1,type:{name:"IFormButtons | null"}},className:{defaultValue:null,description:"Form CSS class",name:"className",required:!1,type:{name:"string"}},formStyle:{defaultValue:null,description:"Form style",name:"formStyle",required:!1,type:{name:"CSSProperties"}},containerClassName:{defaultValue:null,description:"Form container class name",name:"containerClassName",required:!1,type:{name:"string"}},containerStyle:{defaultValue:null,description:"Form container style",name:"containerStyle",required:!1,type:{name:"CSSProperties"}},contentIndent:{defaultValue:null,description:"Indent from the beginning of the controls (default 12)",name:"contentIndent",required:!1,type:{name:"number"}},dataSet:{defaultValue:null,description:"Form data",name:"dataSet",required:!1,type:{name:"IDFormDataSet"}},parentDataSet:{defaultValue:null,description:"Parent form data",name:"parentDataSet",required:!1,type:{name:"IDFormDataSet"}},fieldsProps:{defaultValue:null,description:"Fields properties",name:"fieldsProps",required:!1,type:{name:"IDFormFieldsProps"}},colorType:{defaultValue:null,description:"Form color type",name:"colorType",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"neutral"'},{value:'"info"'},{value:'"warning"'},{value:'"danger"'}]}},labelCol:{defaultValue:null,description:"label column parameters, for example span:'8'",name:"labelCol",required:!1,type:{name:"ColProps"}},wrapperCol:{defaultValue:null,description:"wrapper column parameters, for example span:'16'",name:"wrapperCol",required:!1,type:{name:"ColProps"}},labelAlign:{defaultValue:null,description:"text align of label of all items",name:"labelAlign",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"right"'}]}},layout:{defaultValue:null,description:"Form layout (horizontal or vertical). Vertical is default",name:"layout",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},formMode:{defaultValue:null,description:"Form mode",name:"formMode",required:!1,type:{name:"enum",value:[{value:'"view"'},{value:'"create"'},{value:'"update"'},{value:'"clone"'},{value:'"delete"'}]}},readOnly:{defaultValue:null,description:"The form is read only",name:"readOnly",required:!1,type:{name:"boolean"}},disableDepended:{defaultValue:null,description:"Automatically disable fields if they depend on fields whose value is not set. Otherwise, such fields will be automatically hidden",name:"disableDepended",required:!1,type:{name:"boolean"}},tabsHeight:{defaultValue:null,description:"Tabs panes height (default 40)",name:"tabsHeight",required:!1,type:{name:"number"}},unfilledForm:{defaultValue:null,description:"No use controls data",name:"unfilledForm",required:!1,type:{name:"boolean"}},validationRules:{defaultValue:null,description:"Validation rules",name:"validationRules",required:!1,type:{name:"IDFormValidationRules"}},confirmChanges:{defaultValue:null,description:"Should the form request confirmation before the form submitting or cancel, if the form data was changed by the user",name:"confirmChanges",required:!1,type:{name:"boolean"}},submitConfirmMessage:{defaultValue:null,description:"Confirm message before the form submitting",name:"submitConfirmMessage",required:!1,type:{name:"ReactNode"}},requiredMark:{defaultValue:null,description:"Required mark style. Can use required mark or optional mark. You can not config to single Form.Item since this is a Form level config",name:"requiredMark",required:!1,type:{name:"RequiredMark"}},arrowsButtonsSelection:{defaultValue:null,description:"allow select buttons using arrows keys",name:"arrowsButtonsSelection",required:!1,type:{name:"boolean"}},onTabHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a tab changed",name:"onTabHiddenStateChanged",required:!1,type:{name:"((tabName: string, state: boolean, api: IDFormApi) => void)"}},onTabReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a tab changed",name:"onTabReadOnlyStateChanged",required:!1,type:{name:"((tabName: string, state: boolean, api: IDFormApi) => void)"}},onTabDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a tab changes",name:"onTabDisabledStateChanged",required:!1,type:{name:"((tabName: string, state: boolean, api: IDFormApi) => void)"}},onFormDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of the form changed",name:"onFormDirtyStateChanged",required:!1,type:{name:"((state: boolean, api: IDFormApi) => void)"}},onFormReadOnlyStateChanged:{defaultValue:null,description:"fires when the read only state of the form changed",name:"onFormReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, api: IDFormApi) => void)"}},onFormDisabledStateChanged:{defaultValue:null,description:"fires when the disabled state of the form changed",name:"onFormDisabledStateChanged",required:!1,type:{name:"((state: boolean, api: IDFormApi) => void)"}},onFormInit:{defaultValue:null,description:"fires when the form began initialization (renders for the first time)",name:"onFormInit",required:!1,type:{name:"((api: IDFormApi) => void)"}},onFormReadyStateChanged:{defaultValue:null,description:"fires when the form ready status changed (form ready means form is rendered, initialized and all fields data are loaded)",name:"onFormReadyStateChanged",required:!1,type:{name:"((state: boolean, api: IDFormApi) => boolean | void)"}},onFormValidated:{defaultValue:null,description:"fires when the form validated",name:"onFormValidated",required:!1,type:{name:"((values: Record<string, unknown>, errors: Record<string, string>, isSubmit: boolean, api: IDFormApi) => void)"}},onFormHasErrors:{defaultValue:null,description:"fires when the form has errors",name:"onFormHasErrors",required:!1,type:{name:"((values: Record<string, unknown>, errors: Record<string, unknown>, api: IDFormApi) => void)"}},onFormHasNoErrors:{defaultValue:null,description:"fires when the form has no errors",name:"onFormHasNoErrors",required:!1,type:{name:"((values: Record<string, unknown>, api: IDFormApi) => boolean | void)"}},onDataFetch:{defaultValue:null,description:"fires when the form trying to fetch data",name:"onDataFetch",required:!1,type:{name:"((api: IDFormApi) => IDFormDataSourcePromise)"}},onDataFetchSuccess:{defaultValue:null,description:"fires when the form fetch success",name:"onDataFetchSuccess",required:!1,type:{name:"((result: { data: Record<string, unknown>; }, api: IDFormApi) => boolean | void)"}},onDataFetchError:{defaultValue:null,description:"fires when the form fetch failed",name:"onDataFetchError",required:!1,type:{name:"((error: IError, api: IDFormApi) => boolean | void)"}},onDataFetchComplete:{defaultValue:null,description:"fires after the completion of fetching the data, regardless of the result",name:"onDataFetchComplete",required:!1,type:{name:"((api: IDFormApi) => void)"}},onSubmit:{defaultValue:null,description:"Fires on submitting the form. Can returns Promise, Object, Boolean or Void",name:"onSubmit",required:!1,type:{name:"((values: Record<string, unknown>, api: IDFormApi) => boolean | void | IDFormSubmitResultPromise | IDFormSubmitResultObject)"}},onSubmitValidation:{defaultValue:null,description:"fires on submit validation",name:"onSubmitValidation",required:!1,type:{name:"((values: Record<string, unknown>, errors: Record<string, string>, api: IDFormApi) => void)"}},onSubmitSuccess:{defaultValue:null,description:"fires on submit failed",name:"onSubmitSuccess",required:!1,type:{name:"((values: Record<string, unknown>, resultValues: Record<string, unknown>, api: IDFormApi) => boolean | void)"}},onSubmitError:{defaultValue:null,description:"fires on submit error",name:"onSubmitError",required:!1,type:{name:"((values: Record<string, unknown>, error: IError, api: IDFormApi) => boolean | void)"}},onSubmitComplete:{defaultValue:null,description:"fires, when the submitting finishes, whether in failure or success.",name:"onSubmitComplete",required:!1,type:{name:"((values: Record<string, unknown>, errors: Record<string, string>, api: IDFormApi) => boolean | void)"}},onDataSetChange:{defaultValue:null,description:"fires, when the dataSet change",name:"onDataSetChange",required:!1,type:{name:"((dataSet: IDFormDataSet, api: IDFormApi) => IDFormDataSet) | undefined"}}}}}catch{}try{simpleForm.displayName="simpleForm",simpleForm.__docgenInfo={description:"Simple Dynamic form example",displayName:"simpleForm",props:{apiRef:{defaultValue:null,description:"A mutable object to merge with these controls api",name:"apiRef",required:!1,type:{name:"unknown"}},formId:{defaultValue:null,description:"Form formId",name:"formId",required:!1,type:{name:"string"}},buttons:{defaultValue:null,description:"Buttons properties",name:"buttons",required:!1,type:{name:"IFormButtons | null"}},className:{defaultValue:null,description:"Form CSS class",name:"className",required:!1,type:{name:"string"}},formStyle:{defaultValue:null,description:"Form style",name:"formStyle",required:!1,type:{name:"CSSProperties"}},containerClassName:{defaultValue:null,description:"Form container class name",name:"containerClassName",required:!1,type:{name:"string"}},containerStyle:{defaultValue:null,description:"Form container style",name:"containerStyle",required:!1,type:{name:"CSSProperties"}},contentIndent:{defaultValue:null,description:"Indent from the beginning of the controls (default 12)",name:"contentIndent",required:!1,type:{name:"number"}},dataSet:{defaultValue:null,description:"Form data",name:"dataSet",required:!1,type:{name:"IDFormDataSet"}},parentDataSet:{defaultValue:null,description:"Parent form data",name:"parentDataSet",required:!1,type:{name:"IDFormDataSet"}},fieldsProps:{defaultValue:null,description:"Fields properties",name:"fieldsProps",required:!1,type:{name:"IDFormFieldsProps"}},colorType:{defaultValue:null,description:"Form color type",name:"colorType",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"neutral"'},{value:'"info"'},{value:'"warning"'},{value:'"danger"'}]}},labelCol:{defaultValue:null,description:"label column parameters, for example span:'8'",name:"labelCol",required:!1,type:{name:"ColProps"}},wrapperCol:{defaultValue:null,description:"wrapper column parameters, for example span:'16'",name:"wrapperCol",required:!1,type:{name:"ColProps"}},labelAlign:{defaultValue:null,description:"text align of label of all items",name:"labelAlign",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"right"'}]}},layout:{defaultValue:null,description:"Form layout (horizontal or vertical). Vertical is default",name:"layout",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},formMode:{defaultValue:null,description:"Form mode",name:"formMode",required:!1,type:{name:"enum",value:[{value:'"view"'},{value:'"create"'},{value:'"update"'},{value:'"clone"'},{value:'"delete"'}]}},readOnly:{defaultValue:null,description:"The form is read only",name:"readOnly",required:!1,type:{name:"boolean"}},disableDepended:{defaultValue:null,description:"Automatically disable fields if they depend on fields whose value is not set. Otherwise, such fields will be automatically hidden",name:"disableDepended",required:!1,type:{name:"boolean"}},tabsHeight:{defaultValue:null,description:"Tabs panes height (default 40)",name:"tabsHeight",required:!1,type:{name:"number"}},unfilledForm:{defaultValue:null,description:"No use controls data",name:"unfilledForm",required:!1,type:{name:"boolean"}},validationRules:{defaultValue:null,description:"Validation rules",name:"validationRules",required:!1,type:{name:"IDFormValidationRules"}},confirmChanges:{defaultValue:null,description:"Should the form request confirmation before the form submitting or cancel, if the form data was changed by the user",name:"confirmChanges",required:!1,type:{name:"boolean"}},submitConfirmMessage:{defaultValue:null,description:"Confirm message before the form submitting",name:"submitConfirmMessage",required:!1,type:{name:"ReactNode"}},requiredMark:{defaultValue:null,description:"Required mark style. Can use required mark or optional mark. You can not config to single Form.Item since this is a Form level config",name:"requiredMark",required:!1,type:{name:"RequiredMark"}},arrowsButtonsSelection:{defaultValue:null,description:"allow select buttons using arrows keys",name:"arrowsButtonsSelection",required:!1,type:{name:"boolean"}},onTabHiddenStateChanged:{defaultValue:null,description:"fires when the hidden state of a tab changed",name:"onTabHiddenStateChanged",required:!1,type:{name:"((tabName: string, state: boolean, api: IDFormApi) => void)"}},onTabReadOnlyStateChanged:{defaultValue:null,description:"fires when read only state of a tab changed",name:"onTabReadOnlyStateChanged",required:!1,type:{name:"((tabName: string, state: boolean, api: IDFormApi) => void)"}},onTabDisabledStateChanged:{defaultValue:null,description:"fires when the disable state of a tab changes",name:"onTabDisabledStateChanged",required:!1,type:{name:"((tabName: string, state: boolean, api: IDFormApi) => void)"}},onFormDirtyStateChanged:{defaultValue:null,description:"fires when the dirty state of the form changed",name:"onFormDirtyStateChanged",required:!1,type:{name:"((state: boolean, api: IDFormApi) => void)"}},onFormReadOnlyStateChanged:{defaultValue:null,description:"fires when the read only state of the form changed",name:"onFormReadOnlyStateChanged",required:!1,type:{name:"((state: boolean, api: IDFormApi) => void)"}},onFormDisabledStateChanged:{defaultValue:null,description:"fires when the disabled state of the form changed",name:"onFormDisabledStateChanged",required:!1,type:{name:"((state: boolean, api: IDFormApi) => void)"}},onFormInit:{defaultValue:null,description:"fires when the form began initialization (renders for the first time)",name:"onFormInit",required:!1,type:{name:"((api: IDFormApi) => void)"}},onFormReadyStateChanged:{defaultValue:null,description:"fires when the form ready status changed (form ready means form is rendered, initialized and all fields data are loaded)",name:"onFormReadyStateChanged",required:!1,type:{name:"((state: boolean, api: IDFormApi) => boolean | void)"}},onFormValidated:{defaultValue:null,description:"fires when the form validated",name:"onFormValidated",required:!1,type:{name:"((values: Record<string, unknown>, errors: Record<string, string>, isSubmit: boolean, api: IDFormApi) => void)"}},onFormHasErrors:{defaultValue:null,description:"fires when the form has errors",name:"onFormHasErrors",required:!1,type:{name:"((values: Record<string, unknown>, errors: Record<string, unknown>, api: IDFormApi) => void)"}},onFormHasNoErrors:{defaultValue:null,description:"fires when the form has no errors",name:"onFormHasNoErrors",required:!1,type:{name:"((values: Record<string, unknown>, api: IDFormApi) => boolean | void)"}},onDataFetch:{defaultValue:null,description:"fires when the form trying to fetch data",name:"onDataFetch",required:!1,type:{name:"((api: IDFormApi) => IDFormDataSourcePromise)"}},onDataFetchSuccess:{defaultValue:null,description:"fires when the form fetch success",name:"onDataFetchSuccess",required:!1,type:{name:"((result: { data: Record<string, unknown>; }, api: IDFormApi) => boolean | void)"}},onDataFetchError:{defaultValue:null,description:"fires when the form fetch failed",name:"onDataFetchError",required:!1,type:{name:"((error: IError, api: IDFormApi) => boolean | void)"}},onDataFetchComplete:{defaultValue:null,description:"fires after the completion of fetching the data, regardless of the result",name:"onDataFetchComplete",required:!1,type:{name:"((api: IDFormApi) => void)"}},onSubmit:{defaultValue:null,description:"Fires on submitting the form. Can returns Promise, Object, Boolean or Void",name:"onSubmit",required:!1,type:{name:"((values: Record<string, unknown>, api: IDFormApi) => boolean | void | IDFormSubmitResultPromise | IDFormSubmitResultObject)"}},onSubmitValidation:{defaultValue:null,description:"fires on submit validation",name:"onSubmitValidation",required:!1,type:{name:"((values: Record<string, unknown>, errors: Record<string, string>, api: IDFormApi) => void)"}},onSubmitSuccess:{defaultValue:null,description:"fires on submit failed",name:"onSubmitSuccess",required:!1,type:{name:"((values: Record<string, unknown>, resultValues: Record<string, unknown>, api: IDFormApi) => boolean | void)"}},onSubmitError:{defaultValue:null,description:"fires on submit error",name:"onSubmitError",required:!1,type:{name:"((values: Record<string, unknown>, error: IError, api: IDFormApi) => boolean | void)"}},onSubmitComplete:{defaultValue:null,description:"fires, when the submitting finishes, whether in failure or success.",name:"onSubmitComplete",required:!1,type:{name:"((values: Record<string, unknown>, errors: Record<string, string>, api: IDFormApi) => boolean | void)"}},onDataSetChange:{defaultValue:null,description:"fires, when the dataSet change",name:"onDataSetChange",required:!1,type:{name:"((dataSet: IDFormDataSet, api: IDFormApi) => IDFormDataSet) | undefined"}}}}}catch{}const de={title:"DForm/Examples/SimpleForm",component:m,tags:["autodocs"],parameters:{docs:{source:{language:"tsx",format:!0,code:`
                    import React from 'react';
                    import {DForm, IDFormProps} from @krinopotam/ui-kit/dForm';
                    import {InputField} from @krinopotam/ui-kit/dForm/fields/input/inputField";
                    const formProps: IDFormProps = {
                        formId: 'Test form',
                        confirmChanges: true,
                        fieldsProps: {
                            login: {component: InputField, label: 'Логин', tooltip: 'Ввод логина'},
                            password: {component: InputField, label: 'Пароль', tooltip: 'Ввод пвароль'},
                        },
                        buttons: {ok: {position: 'right'}},
                    };
                    /** Simple Dynamic form example */
                    export const SimpleForm = (props?: IDFormProps): React.JSX.Element => {
                        const compProps = {...formProps, ...props};
                        return (
                            <>
                                <div style={{maxWidth: 500}}>
                                    <DForm {...compProps} />
                                </div>
                            </>
                        );
                    };
                    export default SimpleForm;
                `}}}},a={args:{layout:"horizontal"}};var o,i,l;a.parameters={...a.parameters,docs:{...(o=a.parameters)==null?void 0:o.docs,source:{originalSource:`{
  args: {
    layout: "horizontal"
  }
}`,...(l=(i=a.parameters)==null?void 0:i.docs)==null?void 0:l.source}}};const me=["Playground"];export{a as Playground,me as __namedExportsOrder,de as default};
//# sourceMappingURL=simpleForm.stories-6225c3fd.js.map
