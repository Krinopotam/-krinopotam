{"version":3,"file":"selectComponent.stories-ba68dd8d.js","sources":["../../../../src/dForm/fields/select/selectField.tsx","../../../../stories/dForm/fields/select/selectComponent.tsx"],"sourcesContent":["import {BaseField, IBaseFieldProps} from '@src/dForm/fields/base/baseField';\r\nimport React from 'react';\r\nimport {SelectFieldRender} from '@src/dForm/fields/select/selectFieldRender';\r\nimport {SelectProps} from 'rc-select/lib/Select';\r\n\r\nimport {ISelectProps} from '@src/select';\r\n\r\nexport interface ISelectFieldProps extends IBaseFieldProps<SelectField> {\r\n    /** if true, then the entire elements (full node) will be written into the values*/\r\n    fullItemValue?:boolean;\r\n\r\n    /** Select component options items */\r\n    dataSet: ISelectProps['dataSet'];\r\n\r\n    /** Allow clear and show clear button */\r\n    allowClear?: ISelectProps['allowClear'];\r\n\r\n    /** Whether the current search will be cleared on selecting an item. Only applies when mode is set to multiple or tags (default true) */\r\n    autoClearSearchValue?: ISelectProps['autoClearSearchValue'];\r\n\r\n    /** Whether active first option by default */\r\n    defaultActiveFirstOption?: ISelectProps['defaultActiveFirstOption'];\r\n\r\n    /** Initial open state of dropdown */\r\n    defaultOpen?: ISelectProps['defaultOpen'];\r\n\r\n    /** Initial selected option */\r\n    value?: ISelectProps['value'];\r\n\r\n    /** The className of dropdown menu */\r\n    popupClassName?: ISelectProps['popupClassName'];\r\n\r\n    /** Customize dropdown content */\r\n    dropdownRender?: ISelectProps['dropdownRender'];\r\n\r\n    /** Customize node label, value, options field name */\r\n    fieldNames?: SelectProps['fieldNames'];\r\n\r\n    /** If true, filter options by input, if value is function, filter options against it. */\r\n    filterOption?: ISelectProps['filterOption'];\r\n\r\n    /** Sort function for search options sorting, see Array sort compareFunction */\r\n    filterSort?: ISelectProps['filterSort'];\r\n\r\n    /** Whether to embed label in value, turn the format of value from string to ( value: string, label: ReactNode ) */\r\n    labelInValue?: ISelectProps['labelInValue'];\r\n\r\n    /** Config popup height (default 256) */\r\n    listHeight?: ISelectProps['listHeight'];\r\n\r\n    /** Indicate loading state */\r\n    loading?: ISelectProps['loading'];\r\n\r\n    /** Max tag count to show. responsive will cost render performance */\r\n    maxTagCount?: ISelectProps['maxTagCount'];\r\n\r\n    /** Placeholder for not showing tags */\r\n    maxTagPlaceholder?: ISelectProps['maxTagPlaceholder'];\r\n\r\n    /** Max tag text length to show */\r\n    maxTagTextLength?: ISelectProps['maxTagTextLength'];\r\n\r\n    /** The custom menuItemSelected icon with multiple options */\r\n    menuItemSelectedIcon?: ISelectProps['menuItemSelectedIcon'];\r\n\r\n    /** Set mode of Select */\r\n    mode?: ISelectProps['mode'];\r\n\r\n    /** Specify content to show when no result matches */\r\n    notFoundContent?: ISelectProps['notFoundContent'];\r\n\r\n    /** Which prop value of option will be used for filter if filterOption is true. If options is set, it should be set to label */\r\n    optionFilterProp?: ISelectProps['optionFilterProp'];\r\n\r\n    /** Which prop value of option will render as content of select. */\r\n    optionLabelProp?: ISelectProps['optionLabelProp'];\r\n\r\n    /** The position where the selection box pops up */\r\n    placement?: ISelectProps['placement'];\r\n\r\n    /** The custom remove icon */\r\n    removeIcon?: ISelectProps['removeIcon'];\r\n\r\n    /** Whether to show the drop-down arrow: true(for single select), false(for multiple select) */\r\n    showArrow?: ISelectProps['showArrow'];\r\n\r\n    /** Whether select is searchable: single: false, multiple: true */\r\n    showSearch?: ISelectProps['showSearch'];\r\n\r\n    /** The custom suffix icon */\r\n    suffixIcon?: ISelectProps['suffixIcon'];\r\n\r\n    /** Customize tag render, only applies when mode is set to multiple or tags */\r\n    tagRender?: ISelectProps['tagRender'];\r\n\r\n    /** Separator used to tokenize, only applies when mode=\"tags\" */\r\n    tokenSeparators?: ISelectProps['tokenSeparators'];\r\n\r\n    /** Disable virtual scroll when set to false */\r\n    virtual?: ISelectProps['virtual'];\r\n\r\n    /********** Callbacks *************/\r\n    /** Fires when item selected */\r\n    onSelect: ISelectProps['onSelect'];\r\n    /** Fires when item deselected */\r\n    onDeselect: ISelectProps['onDeselect'];\r\n}\r\n\r\nexport class SelectField extends BaseField<ISelectFieldProps> {\r\n    protected render() {\r\n        return <SelectFieldRender field={this} />;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {DForm} from \"@src/dForm\";\r\nimport {ISelectFieldProps, SelectField} from \"@src/dForm/fields/select/selectField\";\r\nimport {SelectDataSet} from \"../../../datasets/select\";\r\n\r\ntype IComponent = ISelectFieldProps\r\n\r\n/** DForm Select field */\r\nexport const SelectComponent = (props: IComponent): React.JSX.Element => <DForm\r\n    buttons={null}\r\n    fieldsProps={\r\n        {field1: {...props, dataSet:SelectDataSet, component: SelectField}}\r\n    }\r\n/>\r\n\r\nexport default SelectComponent\r\n"],"names":["SelectField","BaseField","jsx","SelectFieldRender","SelectComponent","props","DForm","SelectDataSet","SelectComponent$1"],"mappings":"uvDA4GO,MAAMA,UAAoBC,CAA6B,CAChD,QAAS,CACR,OAAAC,EAAA,IAACC,EAAkB,CAAA,MAAO,IAAM,CAAA,CAC3C,CACJ,CCxGO,MAAAC,EAAAC,GAAAH,EAAA,IAAkEI,EAAC,CAAA,QAAA,KAC7D,YAAA,CAAA,OAAA,CAAA,GAAAD,EAAA,QAAAE,EAAA,UAAAP,EAAA,CAE6D,CAE1E,EAEAQ,EAAAJ;;;;;;;;;;;;;;;;;;"}