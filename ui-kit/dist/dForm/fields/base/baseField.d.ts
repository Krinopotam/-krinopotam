import React from 'react';
import { AnyType } from '@krinopotam/service-types';
import { LabelTooltipType } from 'antd/es/form/FormItemLabel';
import { DModel } from '../../../dForm';
import { IRuleType } from '../../../dForm/validators/baseValidator';
export interface IBaseFieldProps<TField extends IBaseField> extends Record<string, unknown> {
    component: new (fieldName: string, fieldProps: AnyType, model: DModel, parent?: IBaseField) => TField;
    helpClass?: string;
    label?: string | React.ReactNode;
    placeholder?: string;
    inlineGroup?: string;
    value?: AnyType;
    hidden?: boolean;
    disabled?: boolean;
    readOnly?: boolean;
    dependsOn?: string[];
    width?: string | number;
    autoFocus?: boolean;
    requiredMark?: boolean;
    tooltip?: LabelTooltipType;
    style?: React.CSSProperties;
    rowStyle?: React.CSSProperties;
    rules?: IRuleType[];
    onValueChanged?: (value: unknown, prevValue: unknown, field: TField) => void;
    onTouchedStateChanged?: (state: boolean, field: TField) => void;
    onDirtyStateChanged?: (state: boolean, field: TField) => void;
    onErrorChanged?: (error: string, field: TField) => void;
    onHiddenStateChanged?: (state: boolean, field: TField) => void;
    onReadOnlyStateChanged?: (state: boolean, field: TField) => void;
    onLabelChanged?: (label: React.ReactNode, prevLabel: React.ReactNode, field: TField) => void;
    onDisabledStateChanged?: (state: boolean, field: TField) => void;
    onReadyStateChanged?: (state: boolean, field: TField) => void;
    onValidated?: (value: unknown, error: string, isSubmit: boolean, field: TField) => void;
}
export type IAnyFieldProps = IBaseFieldProps<AnyType>;
export type IBaseField = BaseField<IAnyFieldProps>;
export declare class BaseField<TFieldProps extends IAnyFieldProps> {
    protected fieldProps: TFieldProps;
    protected readonly fieldName: string;
    protected readonly model: DModel;
    protected readonly parent?: IBaseField;
    protected listeners: (() => void)[];
    protected renderSnapshot: Record<never, never>;
    protected fieldsMap: Record<string, IBaseField>;
    protected rootFields: Record<string, IBaseField>;
    constructor(fieldName: string, fieldProps: TFieldProps, model: DModel, parent?: IBaseField);
    initChildrenFields(): [Record<string, IBaseField>, Record<string, IBaseField>];
    getProps(): TFieldProps;
    setProps(fieldProps: TFieldProps, noRerender?: boolean): void;
    updateProps(updatedProps: Partial<TFieldProps>, noRerender?: boolean): void;
    getName(): string;
    getFormProps(): import("../../../dForm").IDFormProps;
    getModel(): DModel;
    getParent(): IBaseField | undefined;
    getLabel(): React.ReactNode;
    setLabel(value: React.ReactNode | undefined, noEvents?: boolean, noRerender?: boolean): void;
    getValue(): unknown;
    setValue(value: unknown, noEvents?: boolean, noRerender?: boolean): void;
    isEmptyValue(): boolean;
    isTouched(): boolean;
    setTouched(value: boolean, noEvents?: boolean): void;
    isDirty(): boolean;
    setDirty(value: boolean, noEvents?: boolean): void;
    isDisabled(): boolean;
    setDisabled(value: boolean, noEvents?: boolean, noRerender?: boolean): void;
    isReadOnly(): boolean;
    setReadOnly(value: boolean, noEvents?: boolean, noRerender?: boolean): void;
    isHidden(): boolean;
    setHidden(value: boolean, noEvents?: boolean, noRerender?: boolean): void;
    isReady(): boolean;
    setReady(value: boolean, noEvents?: boolean): void;
    getError(): string;
    setError(value: string, noEvents?: boolean, noRerender?: boolean): void;
    validate(noEvents?: boolean, noRerender?: boolean): string;
    getFieldsMap(): Record<string, IBaseField>;
    getRootFields(): Record<string, IBaseField>;
    isContainer(): boolean;
    hasVisibleChildren(): boolean;
    protected render(): React.ReactNode;
    renderField(altLabel?: React.ReactNode): React.ReactNode;
    protected renderFieldWrapper(field: React.ReactNode, altLabel?: React.ReactNode): React.JSX.Element;
    subscribe(listener: () => void): () => void;
    getSnapshot(): Record<never, never>;
    emitRender(): void;
}
