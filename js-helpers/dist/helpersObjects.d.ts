import hash from 'object-hash';
export declare const IsArray: (val: unknown) => boolean;
export declare const IsPromise: (val: unknown) => boolean;
export declare const ObjectKeys: (val: unknown) => string[] | undefined;
export declare const ObjectKeysLength: (val: unknown) => number;
export declare const FindIndexInObjectsArray: (objArray: Record<string, unknown>[], objProperty: string, searchVal: unknown) => number;
export declare const FindObjectInArray: (objArray: Record<string, unknown>[], objProperty: string, searchVal: unknown) => Record<string, unknown> | undefined;
export declare const IsObjectsEqual: <TObject, TSource>(obj1: TObject, obj2: TSource) => boolean;
export declare const MergeObjects: <TObject, TSource>(object: TObject, source: TSource) => TObject & TSource;
export declare const CloneObject: <TObject>(object: TObject, maxLevel?: number) => TObject;
export declare const HashObjectContent: (object: hash.NotUndefined, options?: hash.NormalOption) => string;
export declare const IsObjectHasOwnProperty: (obj: Record<string, unknown>, propName: string) => boolean;
export declare const SplitObject: <R1 extends object, R2 extends object>(obj: object, propNames: Required<{ [K in keyof R1]: boolean; }>) => [R1, R2];
export declare const ObjectDiffs: (obj1: object, obj2: object, mode?: 'added' | 'deleted' | 'updated' | 'detailed') => object;
export declare const IsReactClassComponent: <T>(obj: T) => boolean;
export declare const isReactComponent: <T>(obj: T) => boolean;
export declare const ParseJwt: <T extends Record<string, unknown> = Record<string, unknown>>(token: string | undefined) => T | undefined;
