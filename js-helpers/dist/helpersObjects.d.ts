import hash from 'object-hash';
export declare const isArray: (val: unknown) => boolean;
export declare const isPromise: (val: unknown) => boolean;
export declare const objectKeys: (val: unknown) => string[] | undefined;
export declare const objectKeysLength: (val: unknown) => number;
export declare const findIndexInObjectsArray: (objArray: Record<string, unknown>[], objProperty: string, searchVal: unknown) => number;
export declare const findObjectInArray: (objArray: Record<string, unknown>[], objProperty: string, searchVal: unknown) => Record<string, unknown> | undefined;
export declare const isObjectsEqual: <TObject, TSource>(obj1: TObject, obj2: TSource) => boolean;
export declare const mergeObjects: <TObject, TSource>(object: TObject, source: TSource) => TObject & TSource;
export declare const cloneObject: <TObject>(object: TObject, maxLevel?: number) => TObject;
export declare const hashObjectContent: (object: hash.NotUndefined, options?: hash.NormalOption) => string;
export declare const isObjectHasOwnProperty: (obj: Record<string, unknown>, propName: string) => boolean;
export declare const splitObject: <R1 extends object, R2 extends object>(obj: object, propNames: Required<{ [K in keyof R1]: boolean; }>) => [R1, R2];
export declare const objectDiffs: (obj1: object, obj2: object, mode?: 'added' | 'deleted' | 'updated' | 'detailed') => object;
export declare const isReactClassComponent: <T>(obj: T) => boolean;
export declare const isReactComponent: <T>(obj: T) => boolean;
export declare const parseJwt: (token: string) => any;
