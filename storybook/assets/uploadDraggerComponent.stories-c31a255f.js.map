{"version":3,"file":"uploadDraggerComponent.stories-c31a255f.js","sources":["../../src/dForm/fields/fileDrop/uploadDraggerField.tsx","../../stories/dForm/fields/uploadDragger/uploadDraggerComponent.tsx"],"sourcesContent":["import {BaseField, IBaseFieldProps} from '@src/dForm/fields/base/baseField';\r\nimport React from 'react';\r\nimport {RcFile, UploadChangeParam, UploadFile} from 'antd/es/upload';\r\nimport type {UploadRequestOption} from 'rc-upload/lib/interface';\r\nimport {HttpRequestHeader, ItemRender, ShowUploadListInterface, UploadListProgressProps, UploadListType, UploadType} from 'antd/es/upload/interface';\r\nimport {UploadDraggerFieldRender} from '@src/dForm/fields/fileDrop/uploadDraggerFieldRender';\r\n\r\n//TODO: Test component\r\nexport interface IUploadDraggerFieldProps extends IBaseFieldProps<UploadDraggerField> {\r\n    /** Default list of files that have been uploaded*/\r\n    value?: Array<UploadFile<unknown>>;\r\n    /** File types that can be accepted (See html input \"accept\" Attribute) */\r\n    accept?: string;\r\n    /** Uploading URL/promise */\r\n    action?: string | ((file: RcFile) => string) | ((file: RcFile) => Promise<string>);\r\n    /** Override for the default xhr behavior allowing for additional customization and the ability to implement your own XMLHttpRequest */\r\n    customRequest: (options: UploadRequestOption) => void;\r\n    /** Upload text */\r\n    uploadText?: React.ReactNode;\r\n    /** Upload text hint */\r\n    uploadHint?: React.ReactNode;\r\n    /** Upload section icon */\r\n    uploadIcon?: React.ReactNode;\r\n    /** Uploading extra params or function which can return uploading extra params */\r\n    data?: Record<string, unknown> | ((file: UploadFile<unknown>) => Record<string, unknown> | Promise<Record<string, unknown>>);\r\n    /** Support upload whole directory */\r\n    directory?: boolean;\r\n    /** List of files that have been uploaded (controlled) */\r\n    fileList?: Array<UploadFile<unknown>>;\r\n    /** Request headers*/\r\n    headers?: HttpRequestHeader;\r\n    /** Custom show icon */\r\n    iconRender?: (file: UploadFile<unknown>, listType?: UploadListType) => React.ReactNode;\r\n    /** Customize if render <img /> in thumbnail*/\r\n    isImageUrl?: (file: UploadFile) => boolean;\r\n    /** Custom item of uploadList */\r\n    itemRender?: ItemRender<unknown>;\r\n    /** Built-in stylesheets, support for four types: text, picture, picture-card or picture-circle */\r\n    listType?: UploadListType;\r\n    /** Limit the number of uploaded files. Will replace current one when maxCount is 1 */\r\n    maxCount?: number;\r\n    /** The http method of upload request */\r\n    method?: 'post' | 'put' | 'patch';\r\n    /** Whether to support selected multiple files. IE10+ supported. You can select multiple files with CTRL holding down while multiple is set to be true */\r\n    multiple?: boolean;\r\n    /** The name of uploading file */\r\n    fileName?: string;\r\n    /** Click open file dialog */\r\n    openFileDialogOnClick?: boolean;\r\n    /** Customize preview file logic */\r\n    previewFile?: (file: File | Blob) => Promise<string>;\r\n    /** Custom progress bar */\r\n    progress?: UploadListProgressProps;\r\n    /** Whether to show default upload list, could be an object to specify showPreviewIcon, showRemoveIcon, showDownloadIcon, removeIcon and downloadIcon individually */\r\n    showUploadList?: boolean | ShowUploadListInterface;\r\n    /** The ajax upload with cookie sent */\r\n    withCredentials?: boolean;\r\n    /** Upload type: drag | select */\r\n    type?: UploadType;\r\n    /** Dragger height */\r\n    height?: number;\r\n\r\n    /********** Callbacks **************/\r\n    /** Hook function which will be executed before uploading. Uploading will be stopped with false or a rejected Promise returned. When returned value is Upload.LIST_IGNORE, the list of files that have been uploaded will ignore it*/\r\n    onBeforeUpload?: (file: RcFile, fileList: RcFile[]) => boolean | Promise<File>;\r\n    /** A callback function, can be executed when uploading state is changing. It will trigger by every uploading phase */\r\n    onChange?: (info: UploadChangeParam<UploadFile<unknown>>) => void;\r\n    /** A callback function executed when files are dragged and dropped into the upload area */\r\n    onDrop?: (event: React.DragEvent<HTMLDivElement>) => void;\r\n    /** Click the method to download the file, pass the method to perform the method logic, and do not pass the default jump to the new TAB */\r\n    onDownload?: (file: UploadFile<unknown>) => void;\r\n    /** A callback function, will be executed when the file link or preview icon is clicked */\r\n    onPreview?: (file: UploadFile<unknown>) => void;\r\n    /** A callback function, will be executed when removing file button is clicked, remove event will be prevented when the return value is false or a Promise which resolve(false) or reject */\r\n    onRemove?: (file: UploadFile<unknown>) => void | boolean | Promise<void | boolean>;\r\n}\r\n\r\nexport class UploadDraggerField extends BaseField<IUploadDraggerFieldProps> {\r\n    getValue() {\r\n        return super.getValue() as Array<UploadFile<unknown>>;\r\n    }\r\n\r\n    setValue(value: Array<UploadFile<unknown>>, noEvents?: boolean, noRerender?: boolean) {\r\n        super.setValue(value, noEvents, noRerender);\r\n    }\r\n\r\n    protected render() {\r\n        return <UploadDraggerFieldRender field={this} />;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {DForm} from '@src/dForm';\r\nimport {IUploadDraggerFieldProps, UploadDraggerField} from '@src/dForm/fields/fileDrop/uploadDraggerField';\r\n\r\ntype IComponent = IUploadDraggerFieldProps;\r\n\r\n/** DForm Input field */\r\nexport const UploadDraggerComponent = (props: IComponent): React.JSX.Element => (\r\n    <DForm buttons={null} fieldsProps={{field1: {...props, component: UploadDraggerField}}} />\r\n);\r\n\r\nexport default UploadDraggerComponent;\r\n"],"names":["UploadDraggerField","BaseField","value","noEvents","noRerender","jsx","UploadDraggerFieldRender","UploadDraggerComponent","props","DForm","UploadDraggerComponent$1"],"mappings":"8sDA6EO,MAAMA,UAA2BC,CAAoC,CACxE,UAAW,CACP,OAAO,MAAM,UACjB,CAEA,SAASC,EAAmCC,EAAoBC,EAAsB,CAC5E,MAAA,SAASF,EAAOC,EAAUC,CAAU,CAC9C,CAEU,QAAS,CACR,OAAAC,EAAA,IAACC,EAAyB,CAAA,MAAO,IAAM,CAAA,CAClD,CACJ,CClFO,MAAAC,EAAAC,GAAAH,EAAAA,IAAAI,EAAA,CAAA,QAAA,KAAA,YAAA,CAAA,OAAA,CAAA,GAAAD,EAAA,UAAAR,CAAA,CAAA,CAAA,CAAA,EAIPU,EAAAH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}