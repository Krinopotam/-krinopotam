{"version":3,"file":"numberComponent.stories-49ee23a4.js","sources":["../../src/dForm/fields/number/numberField.tsx","../../stories/dForm/fields/number/numberComponent.tsx"],"sourcesContent":["import {BaseField, IBaseFieldProps,} from \"@src/dForm/fields/base/baseField\";\r\nimport React from \"react\";\r\nimport {NumberFieldRender} from \"@src/dForm/fields/number/numberFieldRender\";\r\nimport {InputNumberProps} from \"antd/es/input-number\";\r\n\r\nexport interface INumberFieldProps extends IBaseFieldProps<NumberField> {\r\n    /** The label text displayed after (on the right side of) the input field */\r\n    addonAfter?: React.ReactNode;\r\n\r\n    /** The label text displayed before (on the left side of) the input field */\r\n    addonBefore?: React.ReactNode;\r\n\r\n    /** Whether to show +- controls, or set custom arrows icon */\r\n    controls?: InputNumberProps['controls']\r\n\r\n    /** Decimal separator. Syntactic sugar of `formatter`. Config decimal separator of display. */\r\n    decimalSeparator?: string;\r\n\r\n    /** Default value */\r\n    value?: string | number;\r\n\r\n    /** Specifies the format of the value presented. Transform `value` to display value show in input */\r\n    formatter?: InputNumberProps['formatter'];\r\n\r\n    /** If enable keyboard behavior */\r\n    keyboard?: boolean;\r\n\r\n    /** Max input length */\r\n    maxLength?: number;\r\n\r\n    /** The max value */\r\n    max?: number;\r\n\r\n    /** The min value */\r\n    min?: number;\r\n\r\n    /** Specifies the value extracted from formatter. Parse display value to validate number */\r\n    parser?: InputNumberProps['parser'];\r\n\r\n    /** The precision of input value. Will use formatter when config of formatter. Syntactic sugar of `formatter`. Config precision of display. */\r\n    precision?: number;\r\n\r\n    /** The prefix icon for the Input */\r\n    prefix?: React.ReactNode;\r\n\r\n    /** The number to which the current value is increased or decreased. It can be an integer or decimal */\r\n    step?: number | string;\r\n    /** Set value as string to support high precision decimals. Will return string value by onChange */\r\n    stringMode?: boolean;\r\n\r\n    /** Up handler */\r\n    upHandler?: React.ReactNode;\r\n\r\n    /** Down handler */\r\n    downHandler?: React.ReactNode;\r\n\r\n    /** Class name */\r\n    className?: string;\r\n\r\n    /** Prefix class name */\r\n    prefixCls?: string;\r\n}\r\n\r\nexport class NumberField extends BaseField<INumberFieldProps> {\r\n    protected render() {\r\n        return <NumberFieldRender field={this} />\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {DForm} from \"@src/dForm\";\r\nimport {INumberFieldProps, NumberField} from \"@src/dForm/fields/number/numberField\";\r\n\r\ntype IComponent = INumberFieldProps;\r\n\r\n/** DForm Number field */\r\nexport const NumberComponent = (props: IComponent): React.JSX.Element => <DForm\r\n    buttons={null}\r\n    fieldsProps={\r\n        {field1: {...props, component: NumberField} }\r\n    }/>\r\n\r\nexport default NumberComponent"],"names":["NumberField","BaseField","jsx","NumberFieldRender","NumberComponent","props","DForm","NumberComponent$1"],"mappings":"8sDA+DO,MAAMA,UAAoBC,CAA6B,CAChD,QAAS,CACR,OAAAC,EAAA,IAACC,EAAkB,CAAA,MAAO,IAAM,CAAA,CAC3C,CACJ,CC5DO,MAAAC,EAAAC,GAAAH,EAAA,IAAkEI,EAAC,CAAA,QAAA,KAC7D,YAAA,CAAA,OAAA,CAAA,GAAAD,EAAA,UAAAL,EAAA,CAEuC,CAC/C,EAELO,EAAAH;;;;;;;;;;;;;;;;"}