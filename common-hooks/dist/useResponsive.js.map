{"version":3,"file":"useResponsive.js","sources":["../src/useResponsive.ts"],"sourcesContent":["import {useCallback, useEffect, useRef} from \"react\";\r\n\r\nexport type IBreakpoints = keyof IDimensionMaxMap\r\n\r\nexport interface IDimensionMaxMap {\r\n    xl?: string;\r\n    md?: string;\r\n    sm?: string;\r\n    xs?: string;\r\n    lg?: string;\r\n    xxl?: string;\r\n}\r\n\r\nconst defaultDimensionMaxMap: IDimensionMaxMap = {\r\n    xs: '479.98px',\r\n    sm: '575.98px',\r\n    md: '767.98px',\r\n    lg: '991.98px',\r\n    xl: '1199.98px',\r\n    xxl: '1599.98px',\r\n};\r\n\r\n/**\r\n *\r\n * @param breakpoint\r\n * @param onBreakpoint\r\n * @param dimensionMaxMap\r\n */\r\nexport const useResponsive = (breakpoint: IBreakpoints | undefined, onBreakpoint: (broken: boolean) => void, dimensionMaxMap?: IDimensionMaxMap) => {\r\n    const handlerFn = (mql: MediaQueryListEvent | MediaQueryList) => {\r\n        onBreakpoint?.(mql.matches);\r\n    }\r\n    const responsiveHandlerRef = useRef(handlerFn);\r\n    responsiveHandlerRef.current = handlerFn;\r\n\r\n    const responsiveHandler = useCallback((mql: MediaQueryListEvent | MediaQueryList) => responsiveHandlerRef.current(mql), []);\r\n\r\n    useEffect(() => {\r\n        const dimMap = {...defaultDimensionMaxMap, ...dimensionMaxMap};\r\n\r\n        let mql: MediaQueryList;\r\n        if (breakpoint && typeof window !== 'undefined') {\r\n            const {matchMedia} = window;\r\n            if (matchMedia && breakpoint in dimMap) {\r\n                mql = matchMedia(`screen and (max-width: ${dimMap[breakpoint]})`);\r\n                try {\r\n                    mql.addEventListener('change', responsiveHandler);\r\n                } catch {\r\n                    // noinspection JSDeprecatedSymbols\r\n                    mql.addListener(responsiveHandler);\r\n                }\r\n                responsiveHandler(mql);\r\n            }\r\n        }\r\n\r\n        return () => {\r\n            try {\r\n                mql?.removeEventListener('change', responsiveHandler);\r\n            } catch {\r\n                // noinspection JSDeprecatedSymbols\r\n                mql?.removeListener(responsiveHandler);\r\n            }\r\n        };\r\n    }, [breakpoint, dimensionMaxMap, responsiveHandler]);\r\n};\r\n"],"names":["defaultDimensionMaxMap","useResponsive","breakpoint","onBreakpoint","dimensionMaxMap","handlerFn","mql","responsiveHandlerRef","useRef","responsiveHandler","useCallback","useEffect","dimMap","matchMedia"],"mappings":";AAaA,MAAMA,IAA2C;AAAA,EAC7C,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,KAAK;AACT,GAQaC,IAAgB,CAACC,GAAsCC,GAAyCC,MAAuC;AAC1I,QAAAC,IAAY,CAACC,MAA8C;AAC7D,IAAAH,KAAA,QAAAA,EAAeG,EAAI;AAAA,EACvB,GACMC,IAAuBC,EAAOH,CAAS;AAC7C,EAAAE,EAAqB,UAAUF;AAEzB,QAAAI,IAAoBC,EAAY,CAACJ,MAA8CC,EAAqB,QAAQD,CAAG,GAAG,EAAE;AAE1H,EAAAK,EAAU,MAAM;AACZ,UAAMC,IAAS,EAAC,GAAGZ,GAAwB,GAAGI,EAAe;AAEzD,QAAAE;AACA,QAAAJ,KAAc,OAAO,SAAW,KAAa;AACvC,YAAA,EAAC,YAAAW,MAAc;AACjB,UAAAA,KAAcX,KAAcU,GAAQ;AACpC,QAAAN,IAAMO,EAAW,0BAA0BD,EAAOV,CAAU,CAAC,GAAG;AAC5D,YAAA;AACI,UAAAI,EAAA,iBAAiB,UAAUG,CAAiB;AAAA,QAAA,QAC5C;AAEJ,UAAAH,EAAI,YAAYG,CAAiB;AAAA,QAAA;AAErC,QAAAA,EAAkBH,CAAG;AAAA,MAAA;AAAA,IACzB;AAGJ,WAAO,MAAM;AACL,UAAA;AACK,QAAAA,KAAA,QAAAA,EAAA,oBAAoB,UAAUG;AAAA,MAAiB,QAChD;AAEJ,QAAAH,KAAA,QAAAA,EAAK,eAAeG;AAAA,MAAiB;AAAA,IAE7C;AAAA,EACD,GAAA,CAACP,GAAYE,GAAiBK,CAAiB,CAAC;AACvD;"}