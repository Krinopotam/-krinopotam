import { IDFormDataSet, IDFormDataSourcePromise, IDFormMode, IDFormProps } from './dForm';
import { IDFormFieldProps, IDFormFieldsProps } from './components/baseComponent';
import { TPromise } from '@krinopotam/service-types';
import React from 'react';
export interface IDFormModelCallbacks {
    onFieldValueChanged?: (fieldName: string, value: unknown, prevValue: unknown, model: DModel) => void;
    onFieldTouchedStateChanged?: (fieldName: string, state: boolean, model: DModel) => void;
    onFieldDirtyStateChanged?: (fieldName: string, state: boolean, model: DModel) => void;
    onFieldErrorChanged?: (fieldName: string, error: string, model: DModel) => void;
    onFieldHiddenStateChanged?: (fieldName: string, state: boolean, model: DModel) => void;
    onFieldReadOnlyStateChanged?: (fieldName: string, state: boolean, model: DModel) => void;
    onFieldLabelChanged?: (fieldName: string, label: React.ReactNode, prevLabel: React.ReactNode, model: DModel) => void;
    onFieldDisabledStateChanged?: (fieldName: string, state: boolean, model: DModel) => void;
    onFieldReady?: (fieldName: string, model: DModel) => void;
    onFieldValidated?: (fieldName: string, value: unknown, error: string, isSubmit: boolean, model: DModel) => void;
    onTabHiddenStateChanged?: (tabName: string, state: boolean, model: DModel) => void;
    onTabReadOnlyStateChanged?: (tabName: string, state: boolean, model: DModel) => void;
    onTabDisabledStateChanged?: (tabName: string, state: boolean, model: DModel) => void;
    onFormDirtyStateChanged?: (state: boolean, model: DModel) => void;
    onFormReadOnlyStateChanged?: (state: boolean, model: DModel) => void;
    onFormInit?: (model: DModel) => void;
    onFormReadyStateChanged?: (state: boolean, model: DModel) => void;
    onFormValidated?: (values: Record<string, unknown>, errors: Record<string, string>, isSubmit: boolean, model: DModel) => void;
    onFormHasErrors?: (values: Record<string, unknown>, errors: Record<string, unknown>, model: DModel) => void;
    onFormHasNoErrors?: (values: Record<string, unknown>, model: DModel) => void;
    onDataFetch?: (model: DModel) => IDFormDataSourcePromise | undefined;
    onDataFetchSuccess?: (result: {
        data: Record<string, unknown>;
    }, model: DModel) => void;
    onDataFetchError?: (message: string, code: number, model: DModel) => void;
    onDataFetchComplete?: (model: DModel) => void;
    onSubmit?: (values: Record<string, unknown>, model: DModel) => IDFormSubmitResultPromise | IDFormSubmitResultObject | boolean | void;
    onSubmitValidation?: (values: Record<string, unknown>, errors: Record<string, string | undefined>, model: DModel) => void;
    onSubmitSuccess?: (values: Record<string, unknown>, resultValues: Record<string, unknown> | undefined, model: DModel) => void;
    onSubmitError?: (values: Record<string, unknown>, message: string, code: number, model: DModel) => void;
    onSubmitComplete?: (values: Record<string, unknown>, errors: Record<string, string | undefined>, model: DModel) => void;
    onDataSetChange?: (dataSet: IDFormDataSet | undefined, model: DModel) => IDFormDataSet | undefined;
}
export type IDFormSubmitResultPromise = TPromise<{
    data: Record<string, unknown>;
}, {
    message: string;
    code: number;
}>;
export type IDFormSubmitResultObject = {
    data?: Record<string, unknown>;
    error?: {
        message: string;
        code: number;
    };
};
export declare class DModel {
    private readonly _formId;
    private _formProps;
    private _fieldsProps;
    private _tabsProps;
    private _validationRules;
    private _dataSet;
    private _labels;
    private _values;
    private _touched;
    private _dirty;
    private _errors;
    private _hidden;
    private _hiddenTabs;
    private _readOnly;
    private _readOnlyTabs;
    private _disabled;
    private _disabledTabs;
    private _ready;
    private _formReadOnly;
    private _formDirty;
    private _formReady;
    private _isFormMounted;
    private _formMode;
    private _submitCount;
    private _isSubmitting;
    private _isFetching;
    private _isFetchingFailed;
    private _callbacks;
    private _validator;
    private _fieldRenderListeners;
    private _fieldRenderSnapshots;
    private _groupRenderListeners;
    private _groupRenderSnapshots;
    private _tabRenderListeners;
    private _tabRenderSnapshots;
    private _formRenderListeners;
    private _formRenderSnapshot;
    constructor(formId: string);
    reinitModel(formProps: IDFormProps, callbacks: IDFormModelCallbacks): void;
    private preparePropsCollection;
    private initFieldsParameters;
    private calculateHiddenFields;
    getTabsProps(): Record<string, Record<string, IDFormFieldsProps>>;
    getGroupsProps(tabName: string): Record<string, IDFormFieldsProps>;
    getFieldLabel(fieldName: string): React.ReactNode;
    setFieldLabel(fieldName: string, value: React.ReactNode | undefined, noEvents?: boolean): void;
    getFieldValue(fieldName: string): unknown;
    setFieldValue(fieldName: string, value: unknown, noEvents?: boolean): void;
    isFieldTouched(fieldName: string): boolean;
    setFieldTouched(fieldName: string, value: boolean, noEvents?: boolean): void;
    isFieldDirty(fieldName: string): boolean;
    setFieldDirty(fieldName: string, value: boolean, noEvents?: boolean): void;
    isFieldDisabled(fieldName: string): boolean;
    setFieldDisabled(fieldName: string, value: boolean, noEvents?: boolean): void;
    isFieldReadOnly(fieldName: string): boolean;
    setFieldReadOnly(fieldName: string, value: boolean, noEvents?: boolean): void;
    isFieldHidden(fieldName: string): boolean;
    setFieldHidden(fieldName: string, value: boolean, noEvents?: boolean): void;
    isFieldReady(fieldName: string): boolean;
    setFieldReady(fieldName: string, value: boolean, noEvents?: boolean): void;
    getFieldError(fieldName: string): string;
    setFieldError(fieldName: string, value: string, noEvents?: boolean): void;
    validateField(fieldName: string, noEvents?: boolean): string;
    getFieldProps(fieldName: string): IDFormFieldProps;
    setFieldProps(fieldName: string, fieldProps: IDFormFieldProps): void;
    updateFieldProps(fieldName: string, updatedProps: Record<string, unknown>): void;
    isGroupHidden(tabName: string, groupName: string): boolean;
    setGroupHidden(tabName: string, groupName: string, value: boolean): void;
    getFirstVisibleFieldInGroup(tabName: string, groupName: string): IDFormFieldProps | undefined;
    isTabHidden(tabName: string): boolean;
    setTabHidden(tabName: string, value: boolean): void;
    isTabReadOnly(tabName: string): boolean;
    setTabReadOnly(tabName: string, value: boolean): void;
    isTabDisabled(tabName: string): boolean;
    setTabDisabled(tabName: string, value: boolean): void;
    getFormId(): string;
    getFormValues(): Record<string, unknown>;
    setFormValues(dataSet: IDFormDataSet | undefined, noEvents?: boolean): void;
    getFormDataSet(): IDFormDataSet | undefined;
    isFormDirty(): boolean;
    private setFormDirty;
    isFormReadOnly(): boolean;
    setFormReadOnly(value: boolean): void;
    setFormInit(): void;
    isFormReady(): boolean | undefined;
    setFormReady(value: boolean): void;
    validateForm(noEvents?: boolean): Record<string, string>;
    isFormSubmitting(): boolean;
    private setFormSubmitting;
    isFormFetching(): boolean;
    private setFormFetching;
    setFormFetchingFailed(value: boolean): void;
    isFormFetchingFailed(): boolean;
    isFormHasError(): boolean;
    getFormErrors(): Record<string, string>;
    isFormMounted(): boolean;
    setFormMounted(value: boolean): void;
    getFormMode(): IDFormMode;
    fetchData(): void;
    getFieldsProps(): IDFormFieldsProps;
    getFormProps(): IDFormProps;
    submit(onSubmitSuccess?: (values: Record<string, unknown>, result: Record<string, unknown> | undefined, model: DModel) => void, onSubmitError?: (values: Record<string, unknown>, message: string, code: number, model: DModel) => void, onSubmitComplete?: (values: Record<string, unknown>, errors: Record<string, string | undefined>, model: DModel) => void): void;
    getSubmitCount(): number;
    incrementSubmitCount(): void;
    hideDependedFields(fieldName: string): void;
    private isFieldMustBeHidden;
    subscribeRenderField(fieldName: string): (listener: () => void) => () => void;
    private emitFieldRender;
    getFieldRenderSnapshots(): Record<string, () => number> | Record<string, never>;
    subscribeRenderGroup(tabName: string, groupName: string): (listener: () => void) => () => void;
    private emitGroupRender;
    getGroupRenderSnapshots(): Record<string, never> | Record<string, Record<string, () => number>>;
    subscribeRenderTab(tabName: string): (listener: () => void) => () => void;
    private emitTabRender;
    getTabRenderSnapshots(): Record<string, never> | Record<string, () => number>;
    subscribeRenderForm(): (listener: () => void) => () => void;
    private emitFormRender;
    getFormRenderSnapshot(): () => number;
}
